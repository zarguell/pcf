<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="A_SMB2SignatureNotEnabled_Description" xml:space="preserve">
    <value>The purpose is to ensure that the SMB version 2 protocol has the signature enabled when communicating with domain controllers</value>
  </data>
  <data name="A_SMB2SignatureNotEnabled_Solution" xml:space="preserve">
    <value>Enable the group policy "Digitally sign communications (if client agrees)" or check for any policy which may alter the server settings. See the &lt;a href="https://docs.microsoft.com/en-us/windows/security/threat-protection/security-policy-settings/smbv1-microsoft-network-server-digitally-sign-communications-if-client-agrees"&gt;official documentation&lt;/a&gt; for more information.</value>
  </data>
  <data name="A_SMB2SignatureNotEnabled_Rationale" xml:space="preserve">
    <value>{count} Domain Controller(s) have been found where SMB signature is not enabled</value>
  </data>
  <data name="A_SMB2SignatureNotEnabled_Detail" xml:space="preserve">
    <value>Domain controller: {0}</value>
  </data>
  <data name="A_SMB2SignatureNotRequired_Description" xml:space="preserve">
    <value>The purpose is to ensure that the SMB version 2 protocol has the signature enforced when communicating with domain controllers</value>
  </data>
  <data name="A_SMB2SignatureNotRequired_Solution" xml:space="preserve">
    <value>Enable the group policy "Digitally sign communications (always)" or check for any policy which may alter the server settings. See the &lt;a href="https://docs.microsoft.com/en-us/windows/security/threat-protection/security-policy-settings/microsoft-network-server-digitally-sign-communications-always"&gt;official documentation&lt;/a&gt; for more information.</value>
  </data>
  <data name="A_SMB2SignatureNotRequired_Rationale" xml:space="preserve">
    <value>{count} Domain Controller(s) have been found where SMB signature is not enforced</value>
  </data>
  <data name="A_SMB2SignatureNotRequired_Detail" xml:space="preserve">
    <value>Domain controller: {0}</value>
  </data>
  <data name="S_DC_SubnetMissing_Description" xml:space="preserve">
    <value>The purpose is to ensure that the minimum set of subnet(s) has been configured in the domain</value>
  </data>
  <data name="S_DC_SubnetMissing_Solution" xml:space="preserve">
    <value>Locate the IP address which was found as not being part of declared subnet then add this subnet to the "Active Directory Sites" tool. If you have found IPv6 addresses and it was not expected, you should disable the IPv6 protocol on the network card.</value>
  </data>
  <data name="S_DC_SubnetMissing_Rationale" xml:space="preserve">
    <value>The subnet declaration is incomplete [{count} IP of DC not found in declared subnets]</value>
  </data>
  <data name="S_DC_SubnetMissing_Detail" xml:space="preserve">
    <value>Domain controller: {0} ip: {1}</value>
  </data>
  <data name="A_BackupMetadata_Description" xml:space="preserve">
    <value>The purpose is check if the backups are actually up to date in case they are needed. The alert can be triggered when a domain is backed up using non-recommended methods</value>
  </data>
  <data name="A_BackupMetadata_Solution" xml:space="preserve">
    <value>Plan AD backups based on Microsoft standards. These standards depend on the Operating System. For example with the wbadmin utility: &lt;i&gt;wbadmin start systemstatebackup -backuptarget:d:&lt;/i&gt;</value>
  </data>
  <data name="A_BackupMetadata_Rationale" xml:space="preserve">
    <value>Last AD backup has been performed {count} day(s) ago</value>
  </data>
  <data name="A_ProtectedUsers_Description" xml:space="preserve">
    <value>The purpose is to ensure that the schema has been updated for the creation of Protected Users group.</value>
  </data>
  <data name="A_ProtectedUsers_Solution" xml:space="preserve">
    <value>The Protected Users group is automatically created when the PDC (primary DC) emulator role is transferred to Windows 2012 R2 or newer domain controller. The group is then automatically replicated to all other domain controllers.
&lt;b&gt; Warning: Do not add service account into this group as this will result in "authentication failure" messages. Use "protected accounts" instead&lt;/b&gt;</value>
  </data>
  <data name="A_ProtectedUsers_Rationale" xml:space="preserve">
    <value>The Protected Users group doesn't exist on the domain.</value>
  </data>
  <data name="A_LAPS_Not_Installed_Description" xml:space="preserve">
    <value>The purpose is to make sure that there is a proper password policy in place for the native local administrator account.</value>
  </data>
  <data name="A_LAPS_Not_Installed_Solution" xml:space="preserve">
    <value>If you don't have any provisioning process or password solution to manage local administrators, you should install the LAPS solution. If you mitigate the risk differently, you should add this rule as an exception, as the risk is covered.</value>
  </data>
  <data name="A_LAPS_Not_Installed_Rationale" xml:space="preserve">
    <value>LAPS doesn't seem to be installed</value>
  </data>
  <data name="S_Vuln_MS17_010_Description" xml:space="preserve">
    <value>The purpose is to verify if Domain Controller(s) are vulnerable to the MS17-010 vulnerability</value>
  </data>
  <data name="S_Vuln_MS17_010_Solution" xml:space="preserve">
    <value>To fix the security breach, you should patch the DC as soon as it has been established it was vulnerable. Another good remediation is to disable SMB v1 (see "DC Vulnerability (SMB v1)). You can verify that using the github program in the links: this program will check remotely the last startup time of the DC and evaluate the risk</value>  
  </data>
  <data name="S_Vuln_MS17_010_Rationale" xml:space="preserve">
    <value>Number of DC(s) vulnerable to MS17-010 = {count} (&gt;0)</value>
  </data>
  <data name="S_Vuln_MS17_010_Detail" xml:space="preserve">
    <value>Domain controller: {0} Reason: {1}</value>
  </data>
  <data name="S_SMB_v1_Description" xml:space="preserve">
    <value>The purpose is to verify if Domain Controller(s) are vulnerable to the SMB v1 vulnerability</value>
  </data>
  <data name="S_SMB_v1_Solution" xml:space="preserve">
    <value>It is highly recommended by Microsoft to disable SMB v1 whenever it is possible on both client and server side. &lt;b&gt;Do note that if you are still not following best practices regarding the usage of deprecated OS (Windows 2000, 2003, XP, CE), regarding Network printer using SMBv1 scan2shares functionalities, or regarding software accessing Windows share with a custom implementation relying on SMB v1, you should consider fixing this issues before disabling SMB v1, as it will generate additional errors&lt;/b&gt;.</value>
  </data>
  <data name="S_SMB_v1_Rationale" xml:space="preserve">
    <value>SMB v1 activated on {count} DC</value>
  </data>
  <data name="S_SMB_v1_Detail" xml:space="preserve">
    <value>Domain controller: {0}</value>
  </data>
  <data name="S_Vuln_MS14_068_Description" xml:space="preserve">
    <value>The purpose is to verify if Domain Controller(s) are vulnerable to the MS14-068 vulnerability</value>
  </data>
  <data name="S_Vuln_MS14_068_Solution" xml:space="preserve">
    <value>To fix the security breach, you should patch the DC as soon as it has been established it was vulnerable. You can verify that using a program in the links: this program will check remotely the last startup time of the DC and evaluate the risk</value>
  </data>
  <data name="S_Vuln_MS14_068_Rationale" xml:space="preserve">
    <value>Number of DC(s) vulnerable to MS14-068 = {count} (&gt;0)</value>
  </data>
  <data name="S_Vuln_MS14_068_Detail" xml:space="preserve">
    <value>Domain controller: {0} Reason: {1}</value>
  </data>
  <data name="A_MembershipEveryone_Description" xml:space="preserve">
    <value>The purpose is to identify if there are restricted groups such as local administrators, terminal server access, â€¦ where Authenticated Users or Everyone is being granted access by a GPO</value>
  </data>
  <data name="A_MembershipEveryone_Solution" xml:space="preserve">
    <value>In order to correct the issue, you should edit the GPO and remove the "Members" security access rule. Another solution is to change the group to a more targeted one containing a limited set of users.</value>
  </data>
  <data name="A_MembershipEveryone_Rationale" xml:space="preserve">
    <value>Presence of restricted group where anybody is a member: {count}</value>
  </data>
  <data name="A_MembershipEveryone_Detail" xml:space="preserve">
    <value>GPO: {0} MemberOf: {1} User: {2}</value>
  </data>
  <data name="P_DCOwner_Description" xml:space="preserve">
    <value>The purpose is to perform a review of which accounts have ownership rights on a domain controller and can then modify their permissions</value>
  </data>
  <data name="P_DCOwner_Solution" xml:space="preserve">
    <value>To solve this security issue, you should change the ownership of the domain controller to match the "Domain Administrators" group.
To control the ownership of domain controller objects, you can use the following PowerShell command: 
&lt;i&gt;Get-ADComputer -server my.domain.to.check -LDAPFilter "(&amp;(objectCategory=computer)(|(primarygroupid=521)(primarygroupid=516)))" -properties name, ntsecuritydescriptor | select name,{$_.ntsecuritydescriptor.Owner}&lt;/i&gt;.
To change it you can edit the owner of an object using &lt;a href="https://docs.microsoft.com/en-us/sysinternals/downloads/adexplorer"&gt;adexplorer.exe&lt;/a&gt;. First, locate the DC object then right click to select properties. Open the security tab and press the advanced button. You then have a new dialog with an owner tab. Select the owner and change it for the domain administrators group. Youâ€™re done (no reboot needed).</value>
  </data>
  <data name="P_DCOwner_Rationale" xml:space="preserve">
    <value>{count} domain controller(s) have been found where the owner is not the Domain Admins group or the Enterprise Admins group</value>
  </data>
  <data name="P_DCOwner_Detail" xml:space="preserve">
    <value>Domain controller: {0} Owner: {1}</value>
  </data>
  <data name="T_SIDHistoryUnknownDomain_Description" xml:space="preserve">
    <value>The purpose is to ensure that every account having an SID History is part of an active migration.</value>
  </data>
  <data name="T_SIDHistoryUnknownDomain_Solution" xml:space="preserve">
    <value>Each security descriptor of the domain (including file shares for example) should be reviewed to be rewritten with the new SID of the account. Then the SID History attribute should be removed. Please note that once the SID History has been removed, it cannot be added back again without doing a real migration. Hopefully hacking tools such as mimikatz can be used to undo a deletion with for example the lsadump::dcshadow attack.</value>
  </data>
  <data name="T_SIDHistoryUnknownDomain_Rationale" xml:space="preserve">
    <value>{count} unknown domain(s) used in SIDHistory</value>
  </data>
  <data name="T_SIDHistoryUnknownDomain_Detail" xml:space="preserve">
    <value>SID: {0} Object(s): {1}</value>
  </data>
  <data name="T_SIDHistorySameDomain_Description" xml:space="preserve">
    <value>The purpose is to ensure that accounts are not linked for more privileged accounts in the same domain</value>
  </data>
  <data name="T_SIDHistorySameDomain_Solution" xml:space="preserve">
    <value>It is not possible to have this occurrence except if a user from domain A has been migrated to domain B and then migrated again to domain A. This should be strongly investigated as it may be linked to a compromise of the domain.</value>
  </data>
  <data name="T_SIDHistorySameDomain_Rationale" xml:space="preserve">
    <value>Account(s) with SID History matching the domain = {count}</value>
  </data>
  <data name="S_ADRegistration_Description" xml:space="preserve">
    <value>The purpose is to ensure that basic users cannot register extra computers in the domain</value>
  </data>
  <data name="S_ADRegistration_Solution" xml:space="preserve">
    <value>To solve the issue, limit the number of extra computers that can be registered by a basic user.  It can be reduced by modifying the value of &lt;i&gt;ms-DS-MachineAccountQuota&lt;/i&gt; to zero (0). Another solution can be to remove altogether the authenticated users group in the domain controllers policy. Do note that if you need to set delegation to an account so it can add computers to the domain, it can be done through 2 methods: Delegation in the OU or by assigning the &lt;i&gt;SeMachineAccountPrivilege&lt;/i&gt; to a special group</value>
  </data>
  <data name="S_ADRegistration_Rationale" xml:space="preserve">
    <value>Non-admin users can add up to {count} computer(s) to a domain</value>
  </data>
  <data name="S_ADRegistration_Detail" xml:space="preserve">
    <value>Domain controller: {0} Owner: {1}</value>
  </data>
  <data name="A_SHA1RootCert_Description" xml:space="preserve">
    <value>The purpose is to ensure that there is no use of the SHA1 hashing algorithm in Root Certificate</value>
  </data>
  <data name="A_SHA1RootCert_Solution" xml:space="preserve">
    <value>To solve the matter, the certificate should be removed from the GPO and if needed, certificates depending on it should be reissued.</value>
  </data>
  <data name="A_SHA1RootCert_Rationale" xml:space="preserve">
    <value>At least one trusted ROOT certificate found has a SHA1 signature [{count}]</value>
  </data>
  <data name="A_SHA1RootCert_Detail" xml:space="preserve">
    <value>GPO: {0} Subject: {1}</value>
  </data>
  <data name="A_SHA0RootCert_Description" xml:space="preserve">
    <value>The purpose is to ensure that there is no use of the SHA0 hashing algorithm in Root Certificate</value>
  </data>
  <data name="A_SHA0RootCert_Solution" xml:space="preserve">
    <value>To solve the matter, the certificate should be removed from the GPO and if needed, certificates depending on it should be reissued.</value>
  </data>
  <data name="A_SHA0RootCert_Rationale" xml:space="preserve">
    <value>At least one trusted ROOT certificate found has a SHA0 signature [{count}]</value>
  </data>
  <data name="A_SHA0RootCert_Detail" xml:space="preserve">
    <value>GPO: {0} Subject: {1}</value>
  </data>
  <data name="A_MD5RootCert_Description" xml:space="preserve">
    <value>The purpose is to ensure that there is no use of the MD5 hashing algorithm in Root Certificate</value>
  </data>
  <data name="A_MD5RootCert_Solution" xml:space="preserve">
    <value>To solve the matter, the certificate should be removed from the GPO and if needed, certificates depending on it should be reissued.</value>
  </data>
  <data name="A_MD5RootCert_Rationale" xml:space="preserve">
    <value>At least one trusted ROOT certificate found has a MD5 signature [{count}]</value>
  </data>
  <data name="A_MD5RootCert_Detail" xml:space="preserve">
    <value>GPO: {0} Subject: {1}</value>
  </data>
  <data name="A_MD4RootCert_Description" xml:space="preserve">
    <value>The purpose is to ensure that there is no use of the MD4 hashing algorithm in Root Certificate</value>
  </data>
  <data name="A_MD4RootCert_Solution" xml:space="preserve">
    <value>To solve the matter, the certificate should be removed from the GPO and if needed, certificates depending on it should be reissued.</value>
  </data>
  <data name="A_MD4RootCert_Rationale" xml:space="preserve">
    <value>At least one trusted ROOT certificate found has a MD4 signature [{count}]</value>
  </data>
  <data name="A_MD4RootCert_Detail" xml:space="preserve">
    <value>GPO: {0} Subject: {1}</value>
  </data>
  <data name="A_MD2RootCert_Description" xml:space="preserve">
    <value>The purpose is to ensure that there is no use of the MD2 hashing algorithm in Root Certificate</value>
  </data>
  <data name="A_MD2RootCert_Solution" xml:space="preserve">
    <value>To solve the matter, the certificate should be removed from the GPO and if needed, certificates depending on it should be reissued.</value>
  </data>
  <data name="A_MD2RootCert_Rationale" xml:space="preserve">
    <value>At least one trusted ROOT certificate found has a MD2 signature [{count}]</value>
  </data>
  <data name="A_MD2RootCert_Detail" xml:space="preserve">
    <value>GPO: {0} Subject: {1}</value>
  </data>
  <data name="A_WeakRSARootCert_Description" xml:space="preserve">
    <value>The purpose is to ensure that there is no use of a certificate using a weak RSA key</value>
  </data>
  <data name="A_WeakRSARootCert_Solution" xml:space="preserve">
    <value>To solve the matter, the certificate should be removed from the GPO and if needed, certificates depending on it should be reissued.</value>
  </data>
  <data name="A_WeakRSARootCert_Rationale" xml:space="preserve">
    <value>At least one trusted certificate found has a weak RSA key [{count}]</value>
  </data>
  <data name="A_WeakRSARootCert_Detail" xml:space="preserve">
    <value>Source: {0} Subject: {1} Module: {2} Expires: {3}</value>
  </data>
  <data name="A_SHA0IntermediateCert_Description" xml:space="preserve">
    <value>The purpose is to ensure that there is no use of the SHA0 hashing algorithm in Intermediate Certificate</value>
  </data>
  <data name="A_SHA0IntermediateCert_Solution" xml:space="preserve">
    <value>To solve the matter, the certificate should be removed from the GPO and if needed, certificates depending on it should be reissued.</value>
  </data>
  <data name="A_SHA0IntermediateCert_Rationale" xml:space="preserve">
    <value>At least one trusted INTERMEDIATE certificate found has a SHA0 signature [{count}]</value>
  </data>
  <data name="A_SHA0IntermediateCert_Detail" xml:space="preserve">
    <value>GPO: {0} Subject: {1}</value>
  </data>
  <data name="A_MD2IntermediateCert_Description" xml:space="preserve">
    <value>The purpose is to ensure that there is no use of the MD2 hashing algorithm in Intermediate Certificate</value>
  </data>
  <data name="A_MD2IntermediateCert_Solution" xml:space="preserve">
    <value>To solve the matter, the certificate should be removed from the GPO and if needed, certificates depending on it should be reissued.</value>
  </data>
  <data name="A_MD2IntermediateCert_Rationale" xml:space="preserve">
    <value>At least one trusted INTERMEDIATE certificate found has a MD2 signature [{count}]</value>
  </data>
  <data name="A_MD2IntermediateCert_Detail" xml:space="preserve">
    <value>GPO: {0} Subject: {1}</value>
  </data>
  <data name="A_MD4IntermediateCert_Description" xml:space="preserve">
    <value>The purpose is to ensure that there is no use of the MD4 hashing algorithm in Intermediate Certificate</value>
  </data>
  <data name="A_MD4IntermediateCert_Solution" xml:space="preserve">
    <value>To solve the matter, the certificate should be removed from the GPO and if needed, certificates depending on it should be reissued.</value>
  </data>
  <data name="A_MD4IntermediateCert_Rationale" xml:space="preserve">
    <value>At least one trusted INTERMEDIATE certificate found has a MD4 signature [{count}]</value>
  </data>
  <data name="A_MD4IntermediateCert_Detail" xml:space="preserve">
    <value>GPO: {0} Subject: {1}</value>
  </data>
  <data name="S_Domain____Description" xml:space="preserve">
    <value>The purpose is to ensure that the SID History creation is not enabled</value>
  </data>
  <data name="S_Domain____Solution" xml:space="preserve">
    <value>If a migration is in progress, declare it in PingCastle so this rule won't be triggered. Else, remove this auditing group. You can locate it by using the LDAP query (sAMAccountName=*$$$)</value>
  </data>
  <data name="S_Domain____Rationale" xml:space="preserve">
    <value>The SIDHistory auditing group is present: SID History creation is enabled</value>
  </data>
  <data name="T_ScriptOutOfDomain_Description" xml:space="preserve">
    <value>The purpose is to ensure that a compromised domain cannot use scripts located in it to compromise other domains</value>
  </data>
  <data name="T_ScriptOutOfDomain_Solution" xml:space="preserve">
    <value>Copy the login script to a share located inside the domain and not in trusted domains.</value>
  </data>
  <data name="T_ScriptOutOfDomain_Rationale" xml:space="preserve">
    <value>Number of login scripts hosted in another domain: {count}</value>
  </data>
  <data name="T_ScriptOutOfDomain_Detail" xml:space="preserve">
    <value>Script: {0}</value>
  </data>
  <data name="A_NullSession_Description" xml:space="preserve">
    <value>The purpose is to access without any account, aka NULL Sessions, within the Active Directory. A NULL Session is a session opened anonymously to access the AD, often used by attackers to perform a recon operation on the AD, to identify weaknesses</value>
  </data>
  <data name="A_NullSession_Solution" xml:space="preserve">
    <value>Locate other PingCastle rules such as A-PreWin2000Anonymous or A-DsHeuristicsAnonymous which triggered and apply the solutions. You can use the PingCastle scanner mode to do a manual check and prove the extraction of the data.</value>
  </data>
  <data name="A_NullSession_Rationale" xml:space="preserve">
    <value>Number of DC(s) with NULL SESSION enabled: {count}</value>
  </data>
  <data name="A_NullSession_Detail" xml:space="preserve">
    <value>Domain controller: {0}</value>
  </data>
  <data name="A_PreWin2000Anonymous_Description" xml:space="preserve">
    <value>The purpose is to identify domains which allow access without any account because of a Pre-Windows 2000 compatibility</value>
  </data>
  <data name="A_PreWin2000Anonymous_Solution" xml:space="preserve">
    <value>Remove the "Everyone" and "Anonymous" from the PreWin2000 group while making sure that the group "Authenticated Users" is present, then reboot each DC</value>
  </data>
  <data name="A_PreWin2000Anonymous_Rationale" xml:space="preserve">
    <value>The group Everyone and/or Anonymous is present in the Pre-Windows 2000 group.</value>
  </data>
  <data name="A_SHA1IntermediateCert_Description" xml:space="preserve">
    <value>The purpose is to ensure that there is no use of the SHA1 hashing algorithm in Intermediate Certificate</value>
  </data>
  <data name="A_SHA1IntermediateCert_Solution" xml:space="preserve">
    <value>To solve the matter, the certificate should be removed from the GPO and if needed, certificates depending on it should be reissued.</value>
  </data>
  <data name="A_SHA1IntermediateCert_Rationale" xml:space="preserve">
    <value>At least one trusted INTERMEDIATE certificate found has a SHA1 signature [{count}]</value>
  </data>
  <data name="A_SHA1IntermediateCert_Detail" xml:space="preserve">
    <value>GPO: {0} Subject: {1}</value>
  </data>
  <data name="A_MD5IntermediateCert_Description" xml:space="preserve">
    <value>The purpose is to ensure that there is no use of the MD5 hashing algorithm in Intermediate Certificate</value>
  </data>
  <data name="A_MD5IntermediateCert_Solution" xml:space="preserve">
    <value>To solve the matter, the certificate should be removed from the GPO and if needed, certificates depending on it should be reissued.</value>
  </data>
  <data name="A_MD5IntermediateCert_Rationale" xml:space="preserve">
    <value>At least one trusted INTERMEDIATE certificate found has a MD5 signature [{count}]</value>
  </data>
  <data name="A_MD5IntermediateCert_Detail" xml:space="preserve">
    <value>GPO: {0} Subject: {1}</value>
  </data>
  <data name="A_NoServicePolicy_Description" xml:space="preserve">
    <value>The purpose is to give information regarding a best practice for the Service Account password policy. Indeed, having a 20+ characters password for this account greatly helps reducing the risk behind Kerberoast attack (offline crack of the TGS tickets)
Note: PSO (Password Settings Objects) will be visible only if the user which collected the information has the permission to view it.</value>
  </data>
  <data name="A_NoServicePolicy_Solution" xml:space="preserve">
    <value> The recommended way to handle service accounts is to use "Managed service accounts" introduced since Windows 2008 R2 (search for "msDS-ManagedServiceAccount").
To solve the anomaly, you should implement a PSO or GPO password guarantying a 20+ length password.</value>
  </data>
  <data name="A_NoServicePolicy_Rationale" xml:space="preserve">
    <value>No password policy for service account found (MinimumPasswordLength&gt;=20)</value>
  </data>
  <data name="A_NoServicePolicy_Detail" xml:space="preserve">
    <value>GPO: {0}</value>
  </data>
  <data name="A_LimitBlankPasswordUse_Description" xml:space="preserve">
    <value>The purpose is to identify if accounts without password are allowed to be accessed from the network. This represents a high risk, as an account without a password is essentially an account that cannot be assigned to anyone. </value>
  </data>
  <data name="A_LimitBlankPasswordUse_Solution" xml:space="preserve">
    <value>Locate the policy having the setting "Limit local account use of blank passwords to console logon only" disabled and enabled the setting.</value>
  </data>
  <data name="A_LimitBlankPasswordUse_Rationale" xml:space="preserve">
    <value>At least one policy has been found where the account having an empty password can be accessed from the network [{count}]</value>
  </data>
  <data name="A_LimitBlankPasswordUse_Detail" xml:space="preserve">
    <value>GPO: {0}</value>
  </data>
  <data name="A_AnonymousAuthorizedGPO_Description" xml:space="preserve">
    <value>The purpose is to identify domains having a GPO which allows access to the domain without any account </value>
  </data>
  <data name="A_AnonymousAuthorizedGPO_Solution" xml:space="preserve">
    <value>In order to remove the anonymous access, we advise to identify the GPO indicated by the program and change the setting restrictanonymous and restrictanonymoussam</value>
  </data>
  <data name="A_AnonymousAuthorizedGPO_Rationale" xml:space="preserve">
    <value>{count} policies have been found where anonymous accesses can be used</value>
  </data>
  <data name="A_AnonymousAuthorizedGPO_Detail" xml:space="preserve">
    <value>GPO: {0}</value>
  </data>
  <data name="A_LMHashAuthorized_Description" xml:space="preserve">
    <value>The authentication protocol NTLM v1 can use the LM password hash algorithm which is weak if enabled by a GPO.</value>
  </data>
  <data name="A_LMHashAuthorized_Solution" xml:space="preserve">
    <value>A GPO explicitly disabled the default security policy LmCompatibilityLevel or NoLMHash. Using the information provided, identify the setting modified in the GPO and fix it.
All security settings should be modified in the Domain GPO Editor and are located in Computer Configuration / Policies / Windows Settings / Security Settings / Local Policies / Security Options
For NoLMHash the setting is located in: Network security: Do not store LAN Manager hash value on next password change
For LmCompatibilityLevel the setting is located in: Network security: LAN Manager authentication level</value>
  </data>
  <data name="A_LMHashAuthorized_Rationale" xml:space="preserve">
    <value>At least one policy has been found where the LM hash can be used [{count}]</value>
  </data>
  <data name="A_LMHashAuthorized_Detail" xml:space="preserve">
    <value>GPO: {0} Setting: {1}</value>
  </data>
  <data name="A_MinPwdLen_Description" xml:space="preserve">
    <value>The purpose is to verify if the password policy of the domain enforces users to have at least 8 characters in their password</value>
  </data>
  <data name="A_MinPwdLen_Solution" xml:space="preserve">
    <value>To solve the issue, the best way is to either remove the GPO enabling short password, or to modify it in order to increase the password length to at least 8 characters</value>
  </data>
  <data name="A_MinPwdLen_Rationale" xml:space="preserve">
    <value>Policy where the password length is less than 8 characters: {count}</value>
  </data>
  <data name="A_MinPwdLen_Detail" xml:space="preserve">
    <value>GPO: {0}</value>
  </data>
  <data name="A_ReversiblePwd_Description" xml:space="preserve">
    <value>The purpose is to verify if a GPO alters the password policy of the domain to enable reversible passwords</value>
  </data>
  <data name="A_ReversiblePwd_Solution" xml:space="preserve">
    <value>In order to remove the anonymous access, we advise to identify the GPO indicated by the program and change the setting "Store passwords using reversible encryption"</value>
  </data>
  <data name="A_ReversiblePwd_Rationale" xml:space="preserve">
    <value>At least one policy has been found where the reversible encryption has been enabled [{count}]</value>
  </data>
  <data name="A_ReversiblePwd_Detail" xml:space="preserve">
    <value>GPO: {0}</value>
  </data>
  <data name="A_SmartCardRequired_Description" xml:space="preserve">
    <value>The purpose is to make sure the requirement of Smart Cards doesn't degrade password rotation</value>
  </data>
  <data name="A_SmartCardRequired_Solution" xml:space="preserve">
    <value>There are 3 solutions to fix this issue, the most obvious being to change the user password on a regular basis. The fastest way is to check if the domain has the attribute &lt;i&gt;msDS-ExpirePasswordsOnSmartCardOnlyAccounts&lt;/i&gt;, which is available for Windows 2016 and later versions and handle periodically hash change. Another possibility instead of changing the password is to disable the flag "this account requires a smart card" then re-enable it which will trigger internally a password hash change.</value>
  </data>
  <data name="A_SmartCardRequired_Rationale" xml:space="preserve">
    <value>Number of account(s) using a smart card whose password is not changed: {count}</value>
  </data>
  <data name="A_PwdGPO_Description" xml:space="preserve">
    <value>The purpose is to alert when a clear text password has been identified in the GPO. Regardless of whether the password is present or not, both the account and password should be considered compromised</value>
  </data>
  <data name="A_PwdGPO_Solution" xml:space="preserve">
    <value>In order to solve this issue, you should manually change the password to a new one. If this password is shared on many systems, each system should have a different password. If the GPO was used to define the native local administrator account, it is recommended to install a password solution manager such as the LAPS solution. </value>
  </data>
  <data name="A_PwdGPO_Rationale" xml:space="preserve">
    <value>Number of password(s) found in GPO: {count}</value>
  </data>
  <data name="A_PwdGPO_Detail" xml:space="preserve">
    <value>GPO: {0} login: {1} password: {2}</value>
  </data>
  <data name="A_AdminSDHolder_Description" xml:space="preserve">
    <value>The purpose is to ensure that there is no rogue admin accounts in the Active Directory</value>
  </data>
  <data name="A_AdminSDHolder_Solution" xml:space="preserve">
    <value>These accounts should be reviewed, especially in regards with their past activities and have the admincount attribute removed. In order to identify which accounts are detected by this rule, we advise to run a PowerShell command that will show you all users having this flag set: &lt;i&gt;get-adobject -ldapfilter "(admincount=1)"&lt;/i&gt;
    Do not forget to look at the section AdminSDHolder below.</value>
  </data>
  <data name="A_AdminSDHolder_Rationale" xml:space="preserve">
    <value>Suspicious admin activities detected on {count} user(s)</value>
  </data>
  <data name="A_Krbtgt_Description" xml:space="preserve">
    <value>The purpose is to alert when the password for the krbtgt account can be used to compromise the whole domain. This password can be used to sign every kerberos ticket. Monitoring it closely often mitigates the risk of golden ticket attacks greatly.</value>
  </data>
  <data name="A_Krbtgt_Solution" xml:space="preserve">
    <value>The password of the krbtgt account should be changed twice to invalidate the golden ticket attack.
&lt;b&gt;Beware: two changes of the krbtgt password not replicated to domain controllers can break these domain controllers&lt;/b&gt; You should wait at least 10 hours between each krbtgt password change.

There are several possibilities to change the krbtgt password.
First, a &lt;a href="https://github.com/microsoft/New-KrbtgtKeys.ps1/blob/master/New-KrbtgtKeys.ps1"&gt;Microsoft script&lt;/a&gt; can be run in order to guarantee the correct replication of these secrets. Unfortunately this script supports only English operating systems.
Second, a more manual way is to essentially reset the password manually once, then to wait 3 days, then to reset it again. This is the safest way as it ensures the password is no longer usable by the Golden ticket attack.
   </value>
  </data>
  <data name="A_Krbtgt_Rationale" xml:space="preserve">
    <value>Last change of the Kerberos password: {count} day(s) ago</value>
  </data>
  <data name="P_DangerousExtendedRight_Description" xml:space="preserve">
    <value>The purpose is to verify the presence of dangerous rights when a part of the domain is delegated to a third party</value>
  </data>
  <data name="P_DangerousExtendedRight_Solution" xml:space="preserve">
    <value>Unless there is a strong justification of their presence, these delegations should be removed. In addition, if the origin of this delegation cannot be found, their creation should be investigated as it can be related to a compromise of the domain</value>
  </data>
  <data name="P_DangerousExtendedRight_Rationale" xml:space="preserve">
    <value>Presence of dangerous extended right in delegation: {count}</value>
  </data>
  <data name="P_DangerousExtendedRight_Detail" xml:space="preserve">
    <value>DN: {0} Account: {1} Right: {2}</value>
  </data>
  <data name="P_DelegationEveryone_Description" xml:space="preserve">
    <value>The purpose is to verify that there is no delegation granted to "Everyone" and to "Authenticated Users"</value>
  </data>
  <data name="P_DelegationEveryone_Solution" xml:space="preserve">
    <value>Review the delegation to remove this permission and if needed, set a more targeted group as recipient of the delegation.</value>
  </data>
  <data name="P_DelegationEveryone_Rationale" xml:space="preserve">
    <value>Presence of delegation where anybody can act: {count}</value>
  </data>
  <data name="P_DelegationEveryone_Detail" xml:space="preserve">
    <value>DN: {0} delegation: {1} right: {2}</value>
  </data>
  <data name="P_UnkownDelegation_Description" xml:space="preserve">
    <value>The purpose is to verify that each delegation are linked to an account which exists</value>
  </data>
  <data name="P_UnkownDelegation_Solution" xml:space="preserve">
    <value>To reduce the risk, the easiest way is essentially to remove the delegation</value>
  </data>
  <data name="P_UnkownDelegation_Rationale" xml:space="preserve">
    <value>Presence of unknown account in delegation: {count}</value>
  </data>
  <data name="P_UnkownDelegation_Detail" xml:space="preserve">
    <value>DN: {0} delegation: {1} right: {2}</value>
  </data>
  <data name="P_SchemaAdmin_Description" xml:space="preserve">
    <value>The purpose is to ensure that no account can make unexpected modifications to the schema</value>
  </data>
  <data name="P_SchemaAdmin_Solution" xml:space="preserve">
    <value>Remove the accounts or groups belonging to the "schema administrators" group.</value>
  </data>
  <data name="P_SchemaAdmin_Rationale" xml:space="preserve">
    <value>The group Schema Admins is not empty: {count} account(s)</value>
  </data>
  <data name="P_ServiceDomainAdmin_Description" xml:space="preserve">
    <value>The purpose is to check for "Service Accounts" in the "Domain Administrator" group</value>
  </data>
  <data name="P_ServiceDomainAdmin_Solution" xml:space="preserve">
    <value>To mitigate the security risk, it is strongly advised to lower the privileges of the "Service Accounts", meaning that they should be removed from the "Domain Administrator" group, while ensuring that the password of each and every "Service Account" is higher than 20 characters</value>
  </data>
  <data name="P_ServiceDomainAdmin_Rationale" xml:space="preserve">
    <value>Presence of service accounts in the domain admin group (at least {threshold} accounts have a password which never expire): {count}</value>
  </data>
  <data name="P_Delegated_Description" xml:space="preserve">
    <value>The purpose is to ensure that all Administrator Accounts have the configuration flag "this account is sensitive and cannot be delegated" (and are not member of the built-in group "Protected Users" when your domain functional level is at least Windows Server 2012 R2).</value>
  </data>
  <data name="P_Delegated_Solution" xml:space="preserve">
    <value>To correct the situation, you should make sure that all your Administrator Accounts has the check-box "This account is sensitive and cannot be delegated" active or add your Administrator Accounts to the built-in group "Protected Users" if your domain functional level is at least Windows Server 2012 R2 (some functionalities may not work properly afterwards, you should check the &lt;a href="https://docs.microsoft.com/en-us/windows-server/identity/ad-ds/manage/how-to-configure-protected-accounts"&gt;official documentation&lt;/a&gt;). Please note that there is a section below in this report named "Admin Groups" which give more information.</value>
  </data>
  <data name="P_Delegated_Rationale" xml:space="preserve">
    <value>Presence of Admin accounts which do not have the flag "this account is sensitive and cannot be delegated": {count}</value>
  </data>
  <data name="P_Delegated_Detail" xml:space="preserve">
    <value>Domain controller: {0} Reason: {1}</value>
  </data>
  <data name="P_Inactive_Description" xml:space="preserve">
    <value>The purpose is to ensure that the Administrator Accounts in the AD are all necessary and used</value>
  </data>
  <data name="P_Inactive_Solution" xml:space="preserve">
    <value>To correct the situation, you should make sure that all your Administrator Account(s) are "Active", meaning that you should remove Administrator rights if an account is set as not "Active"</value>
  </data>
  <data name="P_Inactive_Rationale" xml:space="preserve">
    <value>More than {threshold}% of admins are inactive: {count}%</value>
  </data>
  <data name="P_AdminNum_Description" xml:space="preserve">
    <value>The purpose is to verify if the number of administrator accounts is not disproportionate. Very few users should have domain admin accounts.</value>
  </data>
  <data name="P_AdminNum_Solution" xml:space="preserve">
    <value>It is strongly advised to perform a review of which users have domain administrator rights, and to ensure that these rights are actually needed. Indeed, the end goal is to remove as much domain administrator as possible, as very few users actually need these high level rights.
    The rule is trigger is the number of cumulated privileged members are 50 accounts or if it represents more than 10 percent of the user accounts.
  The rule enabled only if the domain has more than 100 active users.</value>
  </data>
  <data name="P_AdminNum_Rationale" xml:space="preserve">
    <value>Users in Admins groups = {count} (more than 50 or than 10% of all active users)</value>
  </data>
  <data name="P_AdminLogin_Description" xml:space="preserve">
    <value>The purpose is to verify if the Native Administrator account is used.</value>
  </data>
  <data name="P_AdminLogin_Solution" xml:space="preserve">
    <value>To mitigate the security risk, a good practice is to use the Native Administrator account only for emergency, while the daily work is performed through other accounts.
    It is indeed strongly recommended to not use this account but to use nominative account for administrators and dedicated account for services.
    Do note that the anomaly will be removed 35 days after the last native administrator login.
  
  To track where the administrator account has been used for the last time, we recommend to extract the attribute LastLogon of the administrator account on ALL domain controllers.
  It can be done with tools such as ADSIEdit or ADExplorer.
  Then, for each domain controller, extract the events 4624 at the date matching the LastLogon date. You will identify the computer and the process at the origin of the logon event.
  
  Please note that PingCastle relies on the attribute LastLogonTimestamp to perform this check. The LastLogonTimestamp attribute is replicated but has a latency of a maximum of 14 days, while LastLogon is updated at each logon and is more accurate but not replicated.
    </value>
  </data>
  <data name="P_AdminLogin_Rationale" xml:space="preserve">
    <value>The native administrator account has been used recently: {count} day(s) ago</value>
  </data>
  <data name="A_DsHeuristicsAnonymous_Description" xml:space="preserve">
    <value>The purpose is to identify domains having a forest setting which allows access to the domain without any account </value>
  </data>
  <data name="A_DsHeuristicsAnonymous_Solution" xml:space="preserve">
    <value>The easiest and fastest way to correct this issue is to &lt;b&gt;replace the seventh (7th) character of the DsHeuristics attribute&lt;/b&gt;. If it is a 2, replace by 0 to fix the issue.</value>
  </data>
  <data name="A_DsHeuristicsAnonymous_Rationale" xml:space="preserve">
    <value>DsHeuristics has been set to allow anonymous sessions.</value>
  </data>
  <data name="T_Inactive_Description" xml:space="preserve">
    <value>The purpose is to verify that every trust has a remote domain which is active.</value>
  </data>
  <data name="T_Inactive_Solution" xml:space="preserve">
    <value>Check for network connectivity issues from the remote domain or if the remote domain still exists. If it doesn't exist anymore, the trust should be removed. Indeed the secret used by the trust can be used to issue fake kerberos tickets and be used as a backdoor.</value>
  </data>
  <data name="T_Inactive_Rationale" xml:space="preserve">
    <value>At least one inactive trust has been found: {count}</value>
  </data>
  <data name="T_Inactive_Detail" xml:space="preserve">
    <value>Trust: {0}</value>
  </data>
  <data name="T_Downlevel_Description" xml:space="preserve">
    <value>The purpose is to ensure that there is no NT4 compatible trusts</value>
  </data>
  <data name="T_Downlevel_Solution" xml:space="preserve">
    <value>Unless the remote party of the trust is a NT4 domain, this trust shouldn't exist. It should be recreated.</value>
  </data>
  <data name="T_Downlevel_Rationale" xml:space="preserve">
    <value>At least one trust DownLevel has been found. This is a NT4 compatible trust: {count}</value>
  </data>
  <data name="T_Downlevel_Detail" xml:space="preserve">
    <value>Trust: {0}</value>
  </data>
  <data name="S_DC_2003_Description" xml:space="preserve">
    <value>The purpose is to ensure that there is no use of the obsolete and vulnerable OS Windows 2003 as Domain Controller within the domain</value>
  </data>
  <data name="S_DC_2003_Solution" xml:space="preserve">
    <value>To resolve this security risk, the only way is to decommission DC running Windows 2003 OS, in order to use new versions that are more secured and that are still being patched regarding new security threats</value>
  </data>
  <data name="S_DC_2003_Rationale" xml:space="preserve">
    <value>Presence of Windows 2003 as DC = {count}</value>
  </data>
  <data name="S_DC_2000_Description" xml:space="preserve">
    <value>The purpose is to ensure that there is no use of the obsolete and vulnerable OS Windows 2000 as Domain Controller within the domain</value>
  </data>
  <data name="S_DC_2000_Solution" xml:space="preserve">
    <value>To resolve this security risk, the only way is to decommission DC running Windows 2000 OS, in order to use new versions that are more secured and that are still being patched regarding new security threats</value>
  </data>
  <data name="S_DC_2000_Rationale" xml:space="preserve">
    <value>Presence of Windows 2000 as DC = {count}</value>
  </data>
  <data name="S_OS_2003_Description" xml:space="preserve">
    <value>The purpose is to ensure that there is no use of the obsolete and vulnerable OS Windows 2003 for the workstations within the domain</value>
  </data>
  <data name="S_OS_2003_Solution" xml:space="preserve">
    <value>In order to solve this security issue, you should upgrade all the workstations to a more recent version of Windows, starting from Windows 7. Do note that you can get the full details regarding the OS used with the following PowerShell command: &lt;i&gt;Get-ADComputer -Filter { operatingsystem -like "*Server 2003*" } -Property * | Format-Table Name,OperatingSystem,OperatingSystemServicePack,OperatingSystemVersion -Wrap -Auto&lt;/i&gt;</value>
  </data>
  <data name="S_OS_2003_Rationale" xml:space="preserve">
    <value>Presence of Windows 2003 = {count}</value>
  </data>
  <data name="S_OS_2000_Description" xml:space="preserve">
    <value>The purpose is to ensure that there is no use of the obsolete and vulnerable OS Windows 2000 for the workstations within the domain</value>
  </data>
  <data name="S_OS_2000_Solution" xml:space="preserve">
    <value>In order to solve this security issue, you should upgrade all the workstations to a more recent version of Windows, starting from Windows 7. Do note that you can get the full details regarding the OS used with the following PowerShell command: &lt;i&gt;Get-ADComputer -Filter { operatingsystem -like "*Server 2000*" } -Property * | Format-Table Name,OperatingSystem,OperatingSystemServicePack,OperatingSystemVersion -Wrap -Auto&lt;/i&gt;</value>
  </data>
  <data name="S_OS_2000_Rationale" xml:space="preserve">
    <value>Presence of Windows 2000 = {count}</value>
  </data>
  <data name="S_OS_XP_Description" xml:space="preserve">
    <value>The purpose is to ensure that there is no use of the obsolete and vulnerable OS Windows XP for the workstations within the domain</value>
  </data>
  <data name="S_OS_XP_Solution" xml:space="preserve">
    <value>In order to solve this security issue, you should upgrade all the workstations to a more recent version of Windows, starting from Windows 7. Do note that you can get the full details regarding the OS used with the following PowerShell command: &lt;i&gt;Get-ADComputer -Filter { operatingsystem -like "*Windows XP*" } -Property * | Format-Table Name,OperatingSystem,OperatingSystemServicePack,OperatingSystemVersion -Wrap -Auto&lt;/i&gt;</value>
  </data>
  <data name="S_OS_XP_Rationale" xml:space="preserve">
    <value>Presence of Windows XP = {count}</value>
  </data>
  <data name="S_OS_NT_Description" xml:space="preserve">
    <value>The purpose is to ensure that there is no use of the obsolete and vulnerable OS Windows NT for the workstations within the domain</value>
  </data>
  <data name="S_OS_NT_Solution" xml:space="preserve">
    <value>In order to solve this security issue, you should upgrade all the workstations to a more recent version of Windows, starting from Windows 7. Do note that you can get the full details regarding the OS used with the following PowerShell command: &lt;i&gt;Get-ADComputer -Filter { operatingsystem -like "* NT *" } -Property * | Format-Table Name,OperatingSystem,OperatingSystemServicePack,OperatingSystemVersion -Wrap -Auto&lt;/i&gt;</value>
  </data>
  <data name="S_OS_NT_Rationale" xml:space="preserve">
    <value>Presence of Windows NT = {count}</value>
  </data>
  <data name="S_DC_NotUpdated_Description" xml:space="preserve">
    <value>The purpose is to ensure that all the Domain Controllers are updated regularly. This is done by checking if a DC has been rebooted in the past 6 months. If not, it means it has not be patched as well in these 6 monthes</value>
  </data>
  <data name="S_DC_NotUpdated_Solution" xml:space="preserve">
    <value>Frequently updating the DC should be part of the AD policies, as there should be a dedicated time-slot for the servers to reboot and apply security patches</value>
  </data>
  <data name="S_DC_NotUpdated_Rationale" xml:space="preserve">
    <value>Number of DC not updated = {count}</value>
  </data>
  <data name="S_DC_NotUpdated_Detail" xml:space="preserve">
    <value>Domain controller: {0} Reason: {1}</value>
  </data>
  <data name="T_SIDFiltering_Description" xml:space="preserve">
    <value>The purpose is to check if all trusts are protected using the functionality named SID Filtering</value>
  </data>
  <data name="T_SIDFiltering_Solution" xml:space="preserve">
    <value>A trust without SID Filtering means either that a migration is in progress or that the domain can be compromised instantly via the trust.
The solution is to complete existing migration ASAP and enable the SID Filtering feature

If the trust is a domain trust, you should use netdom /quarantine and set it to yes
If the trust is a forest trust, you should use netdom /enablesidhistory and set it to no
Do not apply /quarantine on a forest trust: you will break the transitivity of the trust.</value>
  </data>
  <data name="T_SIDFiltering_Rationale" xml:space="preserve">
    <value>Number of trusts without SID Filtering: {count}</value>
  </data>
  <data name="T_SIDFiltering_Detail" xml:space="preserve">
    <value>Trust: {0}</value>
  </data>
  <data name="S_Duplicate_Description" xml:space="preserve">
    <value>The purpose is to verify if there currently are duplicate accounts within the domain. A duplicate account is essentially a duplicate of two objects having the same attributes.</value>
  </data>
  <data name="S_Duplicate_Solution" xml:space="preserve">
    <value>Duplicate accounts often means there are weaknesses in term of processes, that is why they should be monitored and removed. To identify all duplicate accounts, you should use the following PowerShell commands: &lt;i&gt;get-adobject -ldapfilter "(cn=*cnf:*)"&lt;/i&gt; ; &lt;i&gt;get-adobject -ldapfilter "(sAMAccountName=$duplicate)"&lt;/i&gt;</value>
  </data>
  <data name="S_Duplicate_Rationale" xml:space="preserve">
    <value>Presence of duplicate accounts = {count}</value>
  </data>
  <data name="S_C_Reversible_Description" xml:space="preserve">
    <value>The purpose is to verify if there are accounts currently running with a reversible password</value>
  </data>
  <data name="S_C_Reversible_Solution" xml:space="preserve">
    <value>To remove this risk, there should be no account(s) with reversible encryption. You should remove them by removing the flag "Store password using reversible encryption" on all accounts, so that the cleartext password is removed at the next password change. You can get a list of all the possibly compromised accounts running the following PowerShell command: &lt;i&gt;get-adobject -ldapfilter "(userAccountControl:1.2.840.113556.1.4.803:=128)" -properties useraccountcontrol&lt;/i&gt;</value>
  </data>
  <data name="S_C_Reversible_Rationale" xml:space="preserve">
    <value>Number of computers which have a reversible password: {count}</value>
  </data>
  <data name="S_Reversible_Description" xml:space="preserve">
    <value>The purpose is to verify if there are user accounts currently running with a reversible password</value>
  </data>
  <data name="S_Reversible_Solution" xml:space="preserve">
    <value>To remove this risk, there should be no account(s) with reversible encryption. You should remove them by removing the flag "Store password using reversible encryption" on all accounts, so that the cleartext password is removed at the next password change. You can get a list of all the possibly compromised accounts running the following PowerShell command: &lt;i&gt;get-adobject -ldapfilter "(userAccountControl:1.2.840.113556.1.4.803:=128)" -properties useraccountcontrol&lt;/i&gt;</value>
  </data>
  <data name="S_Reversible_Rationale" xml:space="preserve">
    <value>Number of account(s) which have a reversible password: {count}</value>
  </data>
  <data name="S_PwdNotRequired_Description" xml:space="preserve">
    <value>The purpose is to ensure that every account requires a password</value>
  </data>
  <data name="S_PwdNotRequired_Solution" xml:space="preserve">
    <value>The best solution to solve the problem is to change the "useraccountcontrol" attribute of all the accounts that have it and that are not used in trusts. If the flag is removed while there is no password set, you will have an error. You can use this to detect accounts without any passwords. Do note that you can manually check all the accounts that need to be worked on using the following PowerShell command: &lt;i&gt;get-adobject -ldapfilter "(&amp;(objectCategory=person)(objectClass=user)(userAccountControl:1.2.840.113556.1.4.803:=32))" -properties useraccountcontrol&lt;/i&gt;</value>
  </data>
  <data name="S_PwdNotRequired_Rationale" xml:space="preserve">
    <value>Number of accounts which can have an empty password (can be overridden by GPO): {count}</value>
  </data>
  <data name="S_DesEnabled_Description" xml:space="preserve">
    <value>The purpose is to verify that no weak encryption algorithm such as DES is used as crypto algorithm.</value>
  </data>
  <data name="S_DesEnabled_Solution" xml:space="preserve">
    <value>It is recommended to disable DES as an encyrption algorithm in the user configuration dialog or in the "msDSSupportedEncryptionTypes" attribute at LDAP level. It has to be disabled in the property of an account by unchecking the box "Use Kerberos DES encryption for this account"</value>
  </data>
  <data name="S_DesEnabled_Rationale" xml:space="preserve">
    <value>Presence of Des Enabled account = {count}</value>
  </data>
  <data name="S_C_PrimaryGroup_Description" xml:space="preserve">
    <value>The purpose is to check for unusual value in the primarygroupid attribute used to store group membership</value>
  </data>
  <data name="S_C_PrimaryGroup_Solution" xml:space="preserve">
    <value>Unless strongly justified, change the primary group id to its default. 513 or 514 for users, 516 or 521 for domain controllers, 514 or 515 for computers. The primary group can be edited in a friendly manner by editing the account with the "Active Directory Users and Computers" and after selecting the "Member Of" tab, "set primary group".</value>
  </data>
  <data name="S_C_PrimaryGroup_Rationale" xml:space="preserve">
    <value>Presence of wrong primary group for computers: {count}</value>
  </data>
  <data name="S_PrimaryGroup_Description" xml:space="preserve">
    <value>The purpose is to check for unusual value in the primarygroupid attribute used to store group membership</value>
  </data>
  <data name="S_PrimaryGroup_Solution" xml:space="preserve">
    <value>Unless strongly justified, change the primary group id to its default. 513 or 514 for users, 516 or 521 for domain controllers, 514 or 515 for computers. The primary group can be edited in a friendly manner by editing the account with the "Active Directory Users and Computers" and after selecting the "Member Of" tab, "set primary group".
    You can use the following script to list Users with a primary group id different from domain users:
    &lt;i&gt;Get-ADUser -Filter * -Properties PrimaryGroup | Where-Object { $_.PrimaryGroup -ne (Get-ADGroup -Identity "Domain Users").DistinguishedName } | Select-Object UserPrincipalName,PrimaryGroup&lt;/i&gt;</value>
  </data>
  <data name="S_PrimaryGroup_Rationale" xml:space="preserve">
    <value>Presence of wrong primary group for users: {count}</value>
  </data>
  <data name="S_C_Inactive_Description" xml:space="preserve">
    <value>The purpose is to ensure that there are as few inactive computers as possible within the domain</value>
  </data>
  <data name="S_C_Inactive_Solution" xml:space="preserve">
    <value>To mitigate the risk, you should monitor the number of inactive accounts and reduce it as much as possible. A list of all inactive accounts is obtainable through the command: &lt;i&gt;Search-ADAccount –AccountInActive –ComputersOnly –TimeSpan 180:00:00:00 –ResultPageSize 2000 –ResultSetSize $null | ?{$_.Enabled –eq $True} | Select-Object Name, SamAccountName, DistinguishedName&lt;/i&gt;.</value>
  </data>
  <data name="S_C_Inactive_Rationale" xml:space="preserve">
    <value>Relatively high number of inactive computer accounts: {count}% (more than {threshold}% of all computers)</value>
  </data>
  <data name="S_Inactive_Description" xml:space="preserve">
    <value>The purpose is to ensure that there are as few inactive accounts as possible within the domain</value>
  </data>
  <data name="S_Inactive_Solution" xml:space="preserve">
    <value>To mitigate the risk, you should monitor the number of inactive accounts and reduce it as much as possible. A list of all inactive accounts is obtainable through the command: &lt;i&gt;Search-ADAccount –AccountInActive –UsersOnly –TimeSpan 180:00:00:00 –ResultPageSize 2000 –ResultSetSize $null | ?{$_.Enabled –eq $True} | Select-Object Name, SamAccountName, DistinguishedName&lt;/i&gt;.</value>
  </data>
  <data name="S_Inactive_Rationale" xml:space="preserve">
    <value>Relatively high number of inactive user accounts: {count}% (more than {threshold}% of all users)</value>
  </data>
  <data name="S_SIDHistory_Description" xml:space="preserve">
    <value>The purpose is to ensure that a migration has been completed correctly and that the SIDHistory attribute has been cleared out from user and computer accounts. This attribute is indeed set when migrating a user or a computer from one domain to another</value>
  </data>
  <data name="S_SIDHistory_Solution" xml:space="preserve">
    <value>To solve the security issue, you should remove all the SIDHistory attributes. To do so, you can list the objects having an SIDHistory attribute using the command: &lt;i&gt;get-ADObject -ldapfilter "(sidhistory=*)" -properties sidhistory&lt;/i&gt;. 
Each security descriptor of the domain (including file shares for example) should be reviewed to be rewritten with the new SID of the account. Then, the attribute can be removed of these accounts using the migration tool or a PowerShell snippet &lt;i&gt;Remove-SIDHistory&lt;/i&gt; once the migration is completed. Please note that once the SID History has been removed, it cannot be added back again without doing a real migration. Hopefully hacking tools such as mimikatz can be used to undo a deletion with for example the lsadump::dcshadow attack.</value>
  </data>
  <data name="S_SIDHistory_Rationale" xml:space="preserve">
    <value>{count} domain(s) used in SIDHistory</value>
  </data>
  <data name="S_SIDHistory_Detail" xml:space="preserve">
    <value>SID: {0} Object(s): {1}</value>
  </data>
  <data name="P_UnkownDelegation_Title" xml:space="preserve">
    <value>Check delegations for the recipient's existence</value>
  </data>
  <data name="A_PreWin2000Anonymous_Title" xml:space="preserve">
    <value>Check for Windows 2000 compatibility which allows access to the domain without any account</value>
  </data>
  <data name="S_SIDHistory_Title" xml:space="preserve">
    <value>SIDHistory check</value>
  </data>
  <data name="A_MinPwdLen_Title" xml:space="preserve">
    <value>Check for Short password length in password policy</value>
  </data>
  <data name="P_ServiceDomainAdmin_Title" xml:space="preserve">
    <value>Check if Service Accounts are domain administrators</value>
  </data>
  <data name="A_SHA1RootCert_Title" xml:space="preserve">
    <value>Check for Root Certificates using unsafe hashing algorithm (SHA1)</value>
  </data>
  <data name="A_SHA0RootCert_Title" xml:space="preserve">
    <value>Check for Root Certificates using unsafe hashing algorithm (SHA0)</value>
  </data>
  <data name="A_MD5RootCert_Title" xml:space="preserve">
    <value>Check for Root Certificates using unsafe hashing algorithm (MD5)</value>
  </data>
  <data name="A_MD4RootCert_Title" xml:space="preserve">
    <value>Check for Root Certificates using unsafe hashing algorithm (MD4)</value>
  </data>
  <data name="A_MD2RootCert_Title" xml:space="preserve">
    <value>Check for Root Certificates using unsafe hashing algorithm (MD2)</value>
  </data>
  <data name="S_C_Reversible_Title" xml:space="preserve">
    <value>Check for Reversible password used for computer accounts</value>
  </data>
  <data name="A_NullSession_Title" xml:space="preserve">
    <value>Retrieve data from the domain without any account</value>
  </data>
  <data name="S_ADRegistration_Title" xml:space="preserve">
    <value>Check the process of registration of computers to the domain</value>
  </data>
  <data name="A_ProtectedUsers_Title" xml:space="preserve">
    <value>Check for presence of the Protected users group</value>
  </data>
  <data name="S_PwdNotRequired_Title" xml:space="preserve">
    <value>Check that every account requires a password</value>
  </data>
  <data name="A_NoServicePolicy_Title" xml:space="preserve">
    <value>Check the Password Policy for Service Accounts (Information)</value>
  </data>
  <data name="A_PwdGPO_Title" xml:space="preserve">
    <value>Find Password GPO</value>
  </data>
  <data name="S_OS_XP_Title" xml:space="preserve">
    <value>Obsolete OS (Windows XP)</value>
  </data>
  <data name="S_OS_NT_Title" xml:space="preserve">
    <value>Obsolete OS (Windows NT)</value>
  </data>
  <data name="S_OS_2003_Title" xml:space="preserve">
    <value>Obsolete OS (Windows 2003)</value>
  </data>
  <data name="S_OS_2000_Title" xml:space="preserve">
    <value>Obsolete OS (Windows 2000)</value>
  </data>
  <data name="S_DC_2003_Title" xml:space="preserve">
    <value>Obsolete Domain Controller (Windows 2003)</value>
  </data>
  <data name="S_DC_2000_Title" xml:space="preserve">
    <value>Obsolete Domain Controller (Windows 2000)</value>
  </data>
  <data name="P_AdminNum_Title" xml:space="preserve">
    <value>Check for Number of Administrator accounts above the baseline</value>
  </data>
  <data name="P_AdminLogin_Title" xml:space="preserve">
    <value>Check for Native administrator usage</value>
  </data>
  <data name="A_Krbtgt_Title" xml:space="preserve">
    <value>Mitigate golden ticket attack via a regular change of the krbtgt password</value>
  </data>
  <data name="A_SHA1IntermediateCert_Title" xml:space="preserve">
    <value>Check for Intermediate Certificates using unsafe hashing algorithm (SHA1)</value>
  </data>
  <data name="A_SHA0IntermediateCert_Title" xml:space="preserve">
    <value>Check for Intermediate Certificates using unsafe hashing algorithm (SHA0)</value>
  </data>
  <data name="A_MD5IntermediateCert_Title" xml:space="preserve">
    <value>Check for Intermediate Certificates using unsafe hashing algorithm (MD5)</value>
  </data>
  <data name="A_MD4IntermediateCert_Title" xml:space="preserve">
    <value>Check for Intermediate Certificates using unsafe hashing algorithm (MD4)</value>
  </data>
  <data name="A_MD2IntermediateCert_Title" xml:space="preserve">
    <value>Check for Intermediate Certificates using unsafe hashing algorithm (MD2)</value>
  </data>
  <data name="S_C_Inactive_Title" xml:space="preserve">
    <value>Inactive computer check</value>
  </data>
  <data name="S_Inactive_Title" xml:space="preserve">
    <value>Inactive Account check</value>
  </data>
  <data name="S_Duplicate_Title" xml:space="preserve">
    <value>Duplicate Account check</value>
  </data>
  <data name="S_Reversible_Title" xml:space="preserve">
    <value>Check for Reversible password used for user accounts</value>
  </data>
  <data name="S_DC_NotUpdated_Title" xml:space="preserve">
    <value>Domain Controller Update</value>
  </data>
  <data name="S_DesEnabled_Title" xml:space="preserve">
    <value>Check the use of Kerberos with weak encryption (DES algorithm)</value>
  </data>
  <data name="S_SMB_v1_Title" xml:space="preserve">
    <value>DC Vulnerability (SMB v1)</value>
  </data>
  <data name="S_Vuln_MS17_010_Title" xml:space="preserve">
    <value>DC Vulnerability (MS17-010) </value>
  </data>
  <data name="S_Vuln_MS14_068_Title" xml:space="preserve">
    <value>DC Vulnerability (MS14-068) </value>
  </data>
  <data name="A_LAPS_Not_Installed_Title" xml:space="preserve">
    <value>Check if the LAPS tool to handle the native local administrator password is installed</value>
  </data>
  <data name="A_MembershipEveryone_Title" xml:space="preserve">
    <value>Check if access to a restricted group is given to anyone by a GPO</value>
  </data>
  <data name="A_BackupMetadata_Title" xml:space="preserve">
    <value>Check for the last backup date according to Microsoft standard</value>
  </data>
  <data name="A_AdminSDHolder_Title" xml:space="preserve">
    <value>Check for suspicious account(s) used in administrator activities</value>
  </data>
  <data name="A_AnonymousAuthorizedGPO_Title" xml:space="preserve">
    <value>Check for GPO granting access to the domain without any account</value>
  </data>
  <data name="A_LMHashAuthorized_Title" xml:space="preserve">
    <value>Check for GPO enabling the unsafe algorithm LM hash</value>
  </data>
  <data name="A_LimitBlankPasswordUse_Title" xml:space="preserve">
    <value>Check for GPO allowing accounts without password to be accessed from the network</value>
  </data>
  <data name="A_DsHeuristicsAnonymous_Title" xml:space="preserve">
    <value>Check for access without any account via a forest wide setting</value>
  </data>
  <data name="A_WeakRSARootCert_Title" xml:space="preserve">
    <value>Check for Certificates using a weak signing algorithm (RSA under 1024 bits)</value>
  </data>
  <data name="P_DCOwner_Title" xml:space="preserve">
    <value>At least one Domain controller is not owned correctly</value>
  </data>
  <data name="P_Delegated_Title" xml:space="preserve">
    <value>At least one Administrator Account can be delegated</value>
  </data>
  <data name="P_Inactive_Title" xml:space="preserve">
    <value>Check for inactive Administrator Accounts</value>
  </data>
  <data name="A_SmartCardRequired_Title" xml:space="preserve">
    <value>Check for Accounts using Smart Card with unchanged password for a long time</value>
  </data>
  <data name="A_ReversiblePwd_Title" xml:space="preserve">
    <value>Check for GPO which enable reversible passwords</value>
  </data>
  <data name="P_DelegationEveryone_Title" xml:space="preserve">
    <value>A Delegation is granted to Everyone</value>
  </data>
  <data name="A_AdminSDHolder_TechnicalExplanation" xml:space="preserve">
    <value>A check is performed on non-admin accounts in order to identify if they have an attribute &lt;i&gt;admincount&lt;/i&gt; set. If they have this attribute, it means that this account, which is not supposed to be admin, has been granted administrator rights in the past. This typically happens when an administrator gives temporary rights to a normal account, off process.</value>
  </data>
  <data name="A_AnonymousAuthorizedGPO_TechnicalExplanation" xml:space="preserve">
    <value>It is possible that domains are set to authorize connection without any account, which represents a security breach. It allows potential attackers to enumerate all the users and computers belonging to a domain, in order to identify very efficiently future weak targets.
It is possible to verify the results provided by the PingCastle solution by using a Kali distribution. You should run [rpcclient -U " target_ip_address] and press enter at the password prompt to finally type [enumdomusers].</value>
  </data>
  <data name="A_BackupMetadata_TechnicalExplanation" xml:space="preserve">
    <value>A verification is done on the backups, ensuring that the backup is performed according to Microsoft standards. Indeed at each backup the DIT Database Partition Backup Signature is updated.  If for any reasons, backups are needed to perform a rollback (rebuild a domain) or to track past changes, the backups will actually be up to date. This check is equivalent to a &lt;i&gt;REPADMIN /showbackup *&lt;/i&gt;.</value>
  </data>
  <data name="A_DsHeuristicsAnonymous_TechnicalExplanation" xml:space="preserve">
    <value>The way an Active Directory behaves can be controlled via the attribute &lt;i&gt;DsHeuristics&lt;/i&gt; of &lt;i&gt;CN=Directory Service,CN=Windows NT,CN=Services,CN=Configuration&lt;/i&gt;. A parameter stored in its attribute and whose value is &lt;i&gt;fLDAPBlockAnonOps&lt;/i&gt; can be set to allow access without any account on the &lt;b&gt;whole forest level&lt;/b&gt;.
It is possible to verify the results provided by the PingCastle solution by using a Kali distribution. You should run &lt;i&gt;rpcclient -U " target_ip_address&lt;/i&gt; and press enter at the password prompt to finally type &lt;i&gt;enumdomusers&lt;/i&gt;.</value>
  </data>
  <data name="A_Krbtgt_TechnicalExplanation" xml:space="preserve">
    <value>Kerberos is an authentication protocol. It is using to sign its tickets a secret stored as the password of the krbtgt account. If the hash of the password of the krbtgt account is retrieved, it can be use to generate authentication tickets at will.
To mitigate this attack, it is recommended to change the krbtgt password between 40 days and 6 months. If it not the case, every backup done until the last password change of the krbtgt account can be used to emit Golden tickets, compromising the entire domain.
Retrieval of this secret is one of the highest priority in an attack, as this password is rarely changed and offer a long term backdoor.
Also this attack can be performed using the former password of the krbtgt account. That's why the krbtgt password should be changed twice to invalidate its leak.</value>
  </data>
  <data name="A_LAPS_Not_Installed_TechnicalExplanation" xml:space="preserve">
    <value>LAPS (Local Administrator Password Solution) is the advised solution to handle passwords for the native local administrator account on all workstations, as it is a simple way to handle most of the subject.</value>
  </data>
  <data name="A_LimitBlankPasswordUse_TechnicalExplanation" xml:space="preserve">
    <value>This rule verifies if there is a GPO with the setting "Limit local account use of blank passwords to console logon only" disabled.</value>
  </data>
  <data name="A_LMHashAuthorized_TechnicalExplanation" xml:space="preserve">
    <value>LM hash, or LAN Manager hash is a hash algorithm developed by Microsoft since Windows 3.1. Due to flaw design, hashes retrieved from the network can be reverted to the clear text password in a matter of seconds.</value>
  </data>
  <data name="A_MD2IntermediateCert_TechnicalExplanation" xml:space="preserve">
    <value>The MD2 hashing algorithm is not considered as safe. There are design flaws inherent to the algorithm that allow an attacker to generate a hash collision in less than a brute-force time</value>
  </data>
  <data name="A_MD2RootCert_TechnicalExplanation" xml:space="preserve">
    <value>The MD2 hashing algorithm is not considered as safe. There are design flaws inherent to the algorithm that allow an attacker to generate a hash collision in less than a brute-force time. Nevertheless, the root certificate algorithm has no direct impact on the security, but it can be used indirectly to force the use of this algorithm in the issued certificate</value>
  </data>
  <data name="A_MD4IntermediateCert_TechnicalExplanation" xml:space="preserve">
    <value>The MD4 hashing algorithm is not considered as safe.  There are design flaws inherent to the algorithm that allow an attacker to generate a hash collision in less than a brute-force time</value>
  </data>
  <data name="A_MD4RootCert_TechnicalExplanation" xml:space="preserve">
    <value>The MD4 hashing algorithm is not considered as safe.  There are design flaws inherent to the algorithm that allow an attacker to generate a hash collision in less than a brute-force time. Nevertheless, the root certificate algorithm has no direct impact on the security, but it can be used indirectly to force the use of this algorithm in the issued certificate</value>
  </data>
  <data name="A_MD5IntermediateCert_TechnicalExplanation" xml:space="preserve">
    <value>The MD5 hashing algorithm is not considered as safe.  There are design flaws inherent to the algorithm that allow an attacker to generate a hash collision in less than a brute-force time</value>
  </data>
  <data name="A_MD5RootCert_TechnicalExplanation" xml:space="preserve">
    <value>The MD5 hashing algorithm is not considered as safe.  There are design flaws inherent to the algorithm that allow an attacker to generate a hash collision in less than a brute-force time. Nevertheless, the root certificate algorithm has no direct impact on the security, but it can be used indirectly to force the use of this algorithm in the issued certificate</value>
  </data>
  <data name="A_MembershipEveryone_TechnicalExplanation" xml:space="preserve">
    <value>It is possible that a GPO add local membership of a restricted group. In this case the rule trigger if one is found with "Everyone" or "Authenticated Users" as members. It basically means that the Restricted Group has no restriction on belongs to it. This represents a security risk as Restricted Group are supposed to have more accesses or rights</value>
  </data>
  <data name="A_MinPwdLen_TechnicalExplanation" xml:space="preserve">
    <value>A check is performed to identify if the GPO regarding password policy allows less than 8 characters password. Short passwords represents a high risk because they can fairly easily be brute-forced. Most CERT and agencies advises for at least 8 characters (and often this number goes up to 12)</value>
  </data>
  <data name="A_NoServicePolicy_TechnicalExplanation" xml:space="preserve">
    <value>The rule is purely informative, as it gives insights regarding a best practice. It verifies if there is a GPO or PSO enforcing a 20+ characters password for the Service Account. </value>
  </data>
  <data name="A_NullSession_TechnicalExplanation" xml:space="preserve">
    <value>Unless other rules which check for known cause of anonymous access, this rule tries to enumerate accounts from the domain without any account. The program use two methods: MS-SAMR with a NULL connection and MS-LSAT which forces SID resolution with well known SID.
NULL sessions are deactivated by default since Windows 2003 and Windows XP. For compatibility reasons a setting enabling them may be still active years after.
It is possible to verify the results provided by the PingCastle solution by using a Kali distribution. You should run [rpcclient -U " target_ip_address] and press enter at the password prompt to finally type [enumdomusers].</value>
  </data>
  <data name="A_PreWin2000Anonymous_TechnicalExplanation" xml:space="preserve">
    <value>When a Windows 2003 DC is promoted, a pre-Windows 2000 compatibility setting can be enabled through the wizard. If it is enabled, the wizard will add "Everyone" and "Anonymous" to the pre-Windows 2000 compatible access group, and by doing so, it will authorize the domain to be queried without an account (null session)
It is possible to verify the results provided by the PingCastle solution by using a Kali distribution. You should run [rpcclient -U " target_ip_address] and press enter at the password prompt to finally type [enumdomusers].</value>
  </data>
  <data name="A_ProtectedUsers_TechnicalExplanation" xml:space="preserve">
    <value>The Protected Users group is a special group which is a very effective mitigation solution to counter attacks using Credential theft starting with Windows 8.1. Older Operating System must be updated to take this protection in account such as the &lt;b&gt;Windows 7 KB2871997&lt;/b&gt; patch.</value>
  </data>
  <data name="A_PwdGPO_TechnicalExplanation" xml:space="preserve">
    <value>A check is performed to identify passwords in the GPO. If a password is identified through the PingCastle solution, it means that it can be identified through many other means by attackers, and that the account should be considered compromised. 
Do note that the AES key used to encrypt passwords in GPOs has been made public for interoperability reasons, which is why even an encrypted password is compromised. It has been revealed in &lt;a href="https://msdn.microsoft.com/en-us/library/cc422924.aspx"&gt;this page&lt;/a&gt;</value>
  </data>
  <data name="A_ReversiblePwd_TechnicalExplanation" xml:space="preserve">
    <value>The policy "Store passwords using reversible encryption" is enabled. In this case, it means that the password is actually stored in clear text in the &lt;i&gt;supplementalCredential&lt;/i&gt; attribute of the account and that it can be retrieved using DCSync attack.</value>
  </data>
  <data name="A_SHA0IntermediateCert_TechnicalExplanation" xml:space="preserve">
    <value>The SHA0 hashing algorithm is not considered as safe. There are design flaws inherent to the algorithm that allow an attacker to generate a hash collision in less than a brute-force time</value>
  </data>
  <data name="A_SHA0RootCert_TechnicalExplanation" xml:space="preserve">
    <value>The SHA0 hashing algorithm is not considered as safe. There are design flaws inherent to the algorithm that allow an attacker to generate a hash collision in less than a brute-force time</value>
  </data>
  <data name="A_SHA1IntermediateCert_TechnicalExplanation" xml:space="preserve">
    <value>The SHA1 hashing algorithm is not considered as safe. There are design flaws inherent to the algorithm that allow an attacker to generate a hash collision in less than a brute-force time</value>
  </data>
  <data name="A_SHA1RootCert_TechnicalExplanation" xml:space="preserve">
    <value>The SHA1 hashing algorithm is not considered as safe. There are design flaws inherent to the algorithm that allow an attacker to generate a hash collision in less than a brute-force time</value>
  </data>
  <data name="A_SmartCardRequired_TechnicalExplanation" xml:space="preserve">
    <value>Using Smart Card to protected sensitive account is a good thing. Nevertheless, when the "Smart Card required" flag is set, the password of the account is not changed anymore by default. Internally the hash of this password is used to sign the user's kerberos tickets, making this account vulnerable to Silver ticket attacks. The rule is triggered 90 days after the last change of the attribute unicodePwd. This value is collected using the replication metadata of the attribute 589914</value>
  </data>
  <data name="A_WeakRSARootCert_TechnicalExplanation" xml:space="preserve">
    <value>A RSA key certificate with a modulus under 1024 bits is considered as not safe</value>
  </data>
  <data name="P_AdminLogin_TechnicalExplanation" xml:space="preserve">
    <value>The Native Administrator account is the main administrator account, and it is sharing its password with Directory Services Restore Mode password. Since it is the same password, it can be used to take control of the domain even if the account is disabled, notably through a DSync attack. The last login date is retrieved through the LastLogonTimestamp LDAP attribute retrieved from the Active Directory. There is an exception for 35 days to avoid this rule to be triggered at the domain creation.</value>
  </data>
  <data name="P_AdminNum_TechnicalExplanation" xml:space="preserve">
    <value>Every domain administrator represents a possible security breach, this is why it is strongly advised to have as few domain administrator accounts as possible</value>
  </data>
  <data name="P_DangerousExtendedRight_TechnicalExplanation" xml:space="preserve">
    <value>The right "REANIMATE_TOMBSTONE" used to undelete objects, "UNEXPIRE_PASSWORD" used to undo the expiration of a password, or "SID_HISTORY" used to create an alternate identity is considered dangerous. Indeed this rights can be used to trigger a backdoor.</value>
  </data>
  <data name="P_DCOwner_TechnicalExplanation" xml:space="preserve">
    <value>By default, the "Domain Administrators" group or the "Enterprise Administrators" group are set as owners for "Domain Controllers". Nonetheless, in some cases (for instance when the server has been promoted from an existing server), the owner can be a non-admin person which joined the server to the domain. If this person has still rights over this account, it can be used to take ownership over the whole domain. A chain of compromising events can be designed to take control of the domain by including this account.</value>
  </data>
  <data name="P_Delegated_TechnicalExplanation" xml:space="preserve">
    <value>Without the flag "This account is sensitive and cannot be delegated" any account can be impersonated by some service account. It is a best practice to enforce this flag on administrators accounts.</value>
  </data>
  <data name="P_DelegationEveryone_TechnicalExplanation" xml:space="preserve">
    <value>To delegate control to a OU, access checks can be modified. In case of a misconfiguration, access can be granted to the group "Everyone" or "Authenticated Users".</value>
  </data>
  <data name="P_Inactive_TechnicalExplanation" xml:space="preserve">
    <value>Accounts within the AD have attributes indicating the creation date of the account and the last login of this account. Accounts which haven't have a login since 6 months or created more than 6 months ago without any login are considered inactive. If an Administrator Account is set as inactive, the reason for having Administrator rights should be strongly justified.</value>
  </data>
  <data name="P_SchemaAdmin_TechnicalExplanation" xml:space="preserve">
    <value>The group "Schema Admins" is used to give permissions to alter the schema. Once a modification is performed on the schema such as new objects, it cannot be undone. This can result in a rebuild of the domain. The best practice is to have this group empty and to add an administrator when a schema update is required then to remove this group membership.</value>
  </data>
  <data name="P_ServiceDomainAdmin_TechnicalExplanation" xml:space="preserve">
    <value>"Service Accounts" can imply a high security risk as their password are stored in clear text in the LSA database, which can then be easily exploited using Mimikatz or Cain&amp;Abel for instance. In addition, their passwords don't change and can be used in kerberoast attacks.</value>
  </data>
  <data name="P_UnkownDelegation_TechnicalExplanation" xml:space="preserve">
    <value>In the case where a delegation has been created where the account can't be translated to a NT account, it means that the delegation is actually from another domain or that the user has been deleted. </value>
  </data>
  <data name="S_ADRegistration_TechnicalExplanation" xml:space="preserve">
    <value>By default, a basic user can register up to 10 computers within the domain. This default configuration represents a security issue as basic users shouldn't be able to create such accounts and this task should be handled by administrators.</value>
  </data>
  <data name="S_C_Inactive_TechnicalExplanation" xml:space="preserve">
    <value>Inactive computers often stay in the network because of weaknesses in the decommissioning process. These stale computer accounts can be used as backdoors and therefore represents a possible security breach. </value>
  </data>
  <data name="S_C_PrimaryGroup_TechnicalExplanation" xml:space="preserve">
    <value>In Active Directory, group membership is stored on the "members" attribute and on the "primarygroupid" attribute.
    The default primary group value is "Domain Users" for the users, "Domain Computers" for the computers and "Domain Controllers" for the domain controllers.
    The primarygroupid contains the RID (last digits of a SID) of the group targeted. It can be used to store hidden membership as this attribute is not often analyzed.
    This rule can also be triggered if one domain controller is not in the default container (named "Domain Controllers" and located at the root) which is not a recommended practice.
  </value>
  </data>
  <data name="S_C_Reversible_TechnicalExplanation" xml:space="preserve">
    <value>It is possible that domains have accounts with an encryption that can be reversed. In this case, it means that the password is actually stored in clear text in the &lt;i&gt;supplementalCredential&lt;/i&gt; attribute of the account and that it can be retrieved using DCSync attack</value>
  </data>
  <data name="S_DC_2000_TechnicalExplanation" xml:space="preserve">
    <value>The OS Windows 2000 as a DC is vulnerable to many publicly known exploits such as MS17-010 or MS14-068 and it can no longer be patched. A domain running this OS version should be considered compromised</value>
  </data>
  <data name="S_DC_2003_TechnicalExplanation" xml:space="preserve">
    <value>The OS Windows 2003 as a DC is vulnerable to many publicly known exploits such as MS14-068 and it is very complicated to patch it at this date. A domain running this OS version should be considered compromised</value>
  </data>
  <data name="S_DC_NotUpdated_TechnicalExplanation" xml:space="preserve">
    <value>Domain Controller needs to be updated regularly because threats to the AD evolve all the time, so assets in the AD should evolve accordingly. The date of last update is computed by getting the &lt;i&gt;StatisticsStartTime&lt;/i&gt; from &lt;i&gt;[net statistics workstation]&lt;/i&gt;. If not available, the PingCastle solution will use the &lt;i&gt;lastLogonTimestamp&lt;/i&gt; attribute which is refreshed based on the LastLogon attribute. Do note that there is a maximum delay for refresh: 14 days.</value>
  </data>
  <data name="S_DC_SubnetMissing_TechnicalExplanation" xml:space="preserve">
    <value>When multiple sites are created in a domain, networks should be declared in the domain in order to optimize processes such as DC attribution. In addition, PingCastle can collect the information to be able to build a network map. This rule has been triggered because at least one domain controller has an IP address which was not found in subnet declaration. These IP addresses have been collected by querying the DC FQDN IP address in both IPv6 and IPv4 format.</value>
  </data>
  <data name="S_DesEnabled_TechnicalExplanation" xml:space="preserve">
    <value>DES is very weak algorithm and once assigned to an account, it can be used in Kerberos ticket requests, even though it is easily breakable. It represents a security risk for the kerberos ticket, therefore for the whole AD.</value>
  </data>
  <data name="S_Domain____TechnicalExplanation" xml:space="preserve">
    <value>To migrate accounts to another domain, the attribute SID History should be added to the new account. Despite the fact that numerous hacking tools such as mimikatz allows the creation of the SID History attribute, its official creation requires the presence of a special auditing group named DOMAIN-$$$ such as TEST-$$$ for the TEST domain.</value>
  </data>
  <data name="S_Duplicate_TechnicalExplanation" xml:space="preserve">
    <value>In order to identify a duplicate account, a check is performed on the "DN" and the "sAMAccountName". Indeed, when a DC detects a conflict, there is a replacement performed on the second object</value>
  </data>
  <data name="S_Inactive_TechnicalExplanation" xml:space="preserve">
    <value>Inactive accounts often stay in the network because of weaknesses in the decommissioning process. These stale computer accounts can be used as backdoors and therefore represents a possible security breach. </value>
  </data>
  <data name="S_OS_2000_TechnicalExplanation" xml:space="preserve">
    <value>The Windows 2000 OS is not supported any longer, as it is vulnerable to many publicly known exploits: Administrator's credentials can be captured, security protocols are weak, etc.</value>
  </data>
  <data name="S_OS_2003_TechnicalExplanation" xml:space="preserve">
    <value>The Windows 2003 OS is not supported any longer, as it is vulnerable to many publicly known exploits: Administrator's credentials can be captured, security protocols are weak, etc.</value>
  </data>
  <data name="S_OS_NT_TechnicalExplanation" xml:space="preserve">
    <value>The Windows NT OS is not supported any longer, as it is vulnerable to many publicly known exploits: Administrator's credentials can be captured, security protocols are weak, etc.
</value>
  </data>
  <data name="S_OS_XP_TechnicalExplanation" xml:space="preserve">
    <value>The Windows XP OS is not supported any longer, as it is vulnerable to many publicly known exploits: Administrator's credentials can be captured, security protocols are weak, etc.</value>
  </data>
  <data name="S_PrimaryGroup_TechnicalExplanation" xml:space="preserve">
    <value>In Active Directory, group membership is stored on the "members" attribute and on the "primarygroupid" attribute. The default primary group value is "Domain Users" for the users, "Domain Computers" for the computers and "Domain Controllers" for the domain controllers. The primarygroupid contains the RID (last digits of a SID) of the group targeted. It can be used to store hidden membership as this attribute is not often analyzed.</value>
  </data>
  <data name="S_PwdNotRequired_TechnicalExplanation" xml:space="preserve">
    <value>An account can be set without a password if it has the flag "PASSWD_NOTREQD" set as "True" in the "useraccountcontrol" attribute. This represents a high security risk as the account is not protected at all without a password</value>
  </data>
  <data name="S_Reversible_TechnicalExplanation" xml:space="preserve">
    <value>It is possible that domains have accounts with an encryption that can be reversed. In this case, it means that the password is actually stored in clear text in the &lt;i&gt;supplementalCredential&lt;/i&gt; attribute of the account and that it can be retrieved using DCSync attack</value>
  </data>
  <data name="S_SIDHistory_TechnicalExplanation" xml:space="preserve">
    <value>The SIDHistory attribute is useful when doing a migration because it allows to keep the reference to the former account. On the other hand, once the migration is over, it is mandatory that this attribute is removed to evaluate the permissions in regards with the new account and not the former one.</value>
  </data>
  <data name="S_SMB_v1_TechnicalExplanation" xml:space="preserve">
    <value>The SMB downgrade attack is used to obtain credentials or executing commands on behalf of a user by using SMB v1 as protocol. Indeed, because SMB v1 supports old authentication protocol, the integrity can be bypassed</value>
  </data>
  <data name="S_Vuln_MS14_068_TechnicalExplanation" xml:space="preserve">
    <value>MS14-068 is a critical vulnerability that was published on November, 18th 2014. It can be used to very quickly compromise an entire domain, which is why having DC still vulnerable to this publicly known vulnerability represents a high security risk.</value>
  </data>
  <data name="S_Vuln_MS17_010_TechnicalExplanation" xml:space="preserve">
    <value>MS17-010 is a critical vulnerability that was published on March, 14th 2017. It can be used to compromise an entire domain via DC compromise. This exploit has been revealed by the Shadow brokers (EternalBlue, EternalRomance, EternalSinergy) and it uses the SMB v1 vulnerability</value>
  </data>
  <data name="T_Downlevel_TechnicalExplanation" xml:space="preserve">
    <value>A Downlevel trust is a special kind of trust compatible with NT4. The kind of trust can be displayed in the "Active Directory Domains and Trusts" tool.</value>
  </data>
  <data name="T_Inactive_TechnicalExplanation" xml:space="preserve">
    <value>When a trust is active, it is using a shared secret to communicate to a domain. This secret is hold in a special account whose name is the remote domain name. This password is changed every month and as consequence the whenChanged attribute of this account is changed. When there is no modification of the whenChanged attribute, it can be guessed that the secret has not being changed and that there was either a problem with the remote domain or that the remote domain does not exist anymore.</value>
  </data>
  <data name="T_ScriptOutOfDomain_TechnicalExplanation" xml:space="preserve">
    <value>Login script can be stored in any file share available in the network and that includes trusted domains shares. If a login script is located in a compromise domain, it can be used to compromise other domains.</value>
  </data>
  <data name="T_SIDFiltering_TechnicalExplanation" xml:space="preserve">
    <value>SID Filtering is a mechanism used to block account presenting a SID History property. SID History is used to link an existing account to another account and can be use to propagate a compromise through trusts. SID Filtering for domain to domain trust is called a quarantine and is disabled by default. SID Filtering to a forest is enabled by default and disabling it is called "enabling SID History".

The algorithm to compute the SID Filtering is:
get the attribute trustDirection and TrustAttributes of the trust object.
if the direction is 0 or 1 or if the trust is intra forest (trustattributes &amp; 32 != 0) then SID Filtering is not applicable.
Then, if the trust is a forest trust (trusattributes &amp; 8 != 0) then
check if /enablesidhistory has been enabled - trustattributes &amp; 64 != 0.
If enabled: SID Filtering is deactivated.
Else if not a forest trust (trustattributes &amp; 8 == 0) then check for the quarantined attribute (trustattributes &amp; 4 != 0).
If the quarantine flag is set, SID Filtering is enabled.

You can use the PowerShell command to get its status:
&lt;i&gt;[System.DirectoryServices.ActiveDirectory.Domain]::GetCurrentDomain().GetSidFilteringStatus('my.domain.to.test.local')&lt;/i&gt;
</value>
  </data>
  <data name="T_SIDHistorySameDomain_TechnicalExplanation" xml:space="preserve">
    <value>SID History is an attribute used in migration to link with a former account. It is not possible to have an account linked with an account belonging to the same domain. This can be analyzed by comparing the domain part of the SID History with the domain SID.</value>
  </data>
  <data name="T_SIDHistoryUnknownDomain_TechnicalExplanation" xml:space="preserve">
    <value>When accounts are migrated from one domain to another, the attribute SID History can be appended to the new account to keep track of its former account. The origin can be tracked by removing the last digit of the SID to guess the SID of the origin domain. If the SID of the origin domain cannot be resolved, that means that the domain has been removed and as consequence that the SID History is not needed. This SID History information can be used to give additional rights and thus alter the real security rights.</value>
  </data>
  <data name="A_AdminSDHolder_Documentation" xml:space="preserve">
    <value>https://msdn.microsoft.com/en-us/library/ms675212(v=vs.85).aspx</value>
  </data>
  <data name="A_AnonymousAuthorizedGPO_Documentation" xml:space="preserve">
    <value>https://technet.microsoft.com/en-us/library/cc963223.aspx https://technet.microsoft.com/en-us/library/jj852184.aspx</value>
  </data>
  <data name="A_BackupMetadata_Documentation" xml:space="preserve">
    <value>https://technet.microsoft.com/en-us/library/jj130668(v=ws.10).aspx</value>
  </data>
  <data name="A_DsHeuristicsAnonymous_Documentation" xml:space="preserve">
    <value>https://msdn.microsoft.com/en-us/library/cc223560.aspx
https://support.microsoft.com/en-us/help/326690/anonymous-ldap-operations-to-active-directory-are-disabled-on-windows</value>
  </data>
  <data name="A_Krbtgt_Documentation" xml:space="preserve">
    <value>https://techcommunity.microsoft.com/t5/core-infrastructure-and-security/faqs-from-the-field-on-krbtgt-reset/ba-p/2367838
https://github.com/microsoft/New-KrbtgtKeys.ps1
https://github.com/PSSecTools/Krbtgt</value>
  </data>
  <data name="A_LAPS_Not_Installed_Documentation" xml:space="preserve">
    <value>https://www.microsoft.com/en-us/download/details.aspx?id=46899</value>
  </data>
  <data name="A_LimitBlankPasswordUse_Documentation" xml:space="preserve">
    <value>https://technet.microsoft.com/en-us/library/jj852174.aspx</value>
  </data>
  <data name="A_LMHashAuthorized_Documentation" xml:space="preserve">
    <value />
  </data>
  <data name="A_MD2IntermediateCert_Documentation" xml:space="preserve">
    <value>https://www.ssi.gouv.fr/archive/fr/sciences/fichiers/lcr/mu04c.pdf</value>
  </data>
  <data name="A_MD2RootCert_Documentation" xml:space="preserve">
    <value>https://www.ssi.gouv.fr/archive/fr/sciences/fichiers/lcr/mu04c.pdf</value>
  </data>
  <data name="A_MD4IntermediateCert_Documentation" xml:space="preserve">
    <value>https://tools.ietf.org/html/rfc6150</value>
  </data>
  <data name="A_MD4RootCert_Documentation" xml:space="preserve">
    <value>https://tools.ietf.org/html/rfc6150</value>
  </data>
  <data name="A_MD5IntermediateCert_Documentation" xml:space="preserve">
    <value>https://www.kb.cert.org/vuls/id/836068</value>
  </data>
  <data name="A_MD5RootCert_Documentation" xml:space="preserve">
    <value>https://www.kb.cert.org/vuls/id/836068</value>
  </data>
  <data name="A_MembershipEveryone_Documentation" xml:space="preserve">
    <value>http://social.technet.microsoft.com/wiki/contents/articles/20402.active-directory-group-policy-restricted-groups.aspx</value>
  </data>
  <data name="A_MinPwdLen_Documentation" xml:space="preserve">
    <value>https://www.microsoft.com/en-us/research/publication/password-guidance/</value>
  </data>
  <data name="A_NoServicePolicy_Documentation" xml:space="preserve">
    <value>https://www.microsoft.com/en-us/research/publication/password-guidance/</value>
  </data>
  <data name="A_NullSession_Documentation" xml:space="preserve">
    <value>https://www.sans.org/reading-room/whitepapers/windows/null-sessions-nt-2000-286</value>
  </data>
  <data name="A_PreWin2000Anonymous_Documentation" xml:space="preserve">
    <value>https://msdn.microsoft.com/en-us/library/cc223672.aspx</value>
  </data>
  <data name="A_ProtectedUsers_Documentation" xml:space="preserve">
    <value>https://docs.microsoft.com/en-us/windows-server/security/credentials-protection-and-management/protected-users-security-group</value>
  </data>
  <data name="A_PwdGPO_Documentation" xml:space="preserve">
    <value>https://msdn.microsoft.com/en-us/library/cc422924.aspx</value>
  </data>
  <data name="A_ReversiblePwd_Documentation" xml:space="preserve">
    <value>https://docs.microsoft.com/en-us/windows/security/threat-protection/security-policy-settings/store-passwords-using-reversible-encryption</value>
  </data>
  <data name="A_SHA0IntermediateCert_Documentation" xml:space="preserve">
    <value>https://tools.ietf.org/html/rfc6194</value>
  </data>
  <data name="A_SHA0RootCert_Documentation" xml:space="preserve">
    <value>https://tools.ietf.org/html/rfc6194</value>
  </data>
  <data name="A_SHA1IntermediateCert_Documentation" xml:space="preserve">
    <value>https://tools.ietf.org/html/rfc6194</value>
  </data>
  <data name="A_SHA1RootCert_Documentation" xml:space="preserve">
    <value>https://tools.ietf.org/html/rfc6194</value>
  </data>
  <data name="A_SmartCardRequired_Documentation" xml:space="preserve">
    <value>https://blogs.technet.microsoft.com/positivesecurity/2017/05/17/smartcard-and-pass-the-hash/</value>
  </data>
  <data name="A_WeakRSARootCert_Documentation" xml:space="preserve">
    <value>https://www.iad.gov/iad/library/ia-guidance/ia-solutions-for-classified/algorithm-guidance/commercial-national-security-algorithm-suite-factsheet.cfm
    https://www.ssi.gouv.fr/guide/cryptographie-les-regles-du-rgs/</value>
  </data>
  <data name="P_AdminLogin_Documentation" xml:space="preserve">
    <value>https://docs.microsoft.com/en-us/windows-server/identity/ad-ds/plan/security-best-practices/implementing-least-privilege-administrative-models</value>
  </data>
  <data name="P_AdminNum_Documentation" xml:space="preserve">
    <value>https://docs.microsoft.com/en-us/windows-server/identity/ad-ds/plan/security-best-practices/implementing-least-privilege-administrative-models</value>
  </data>
  <data name="P_DangerousExtendedRight_Documentation" xml:space="preserve">
    <value>https://technet.microsoft.com/en-us/library/ff405676.aspx</value>
  </data>
  <data name="P_DCOwner_Documentation" xml:space="preserve">
    <value />
  </data>
  <data name="P_Delegated_Documentation" xml:space="preserve">
    <value />
  </data>
  <data name="P_DelegationEveryone_Documentation" xml:space="preserve">
    <value />
  </data>
  <data name="P_Inactive_Documentation" xml:space="preserve">
    <value />
  </data>
  <data name="P_SchemaAdmin_Documentation" xml:space="preserve">
    <value />
  </data>
  <data name="P_ServiceDomainAdmin_Documentation" xml:space="preserve">
    <value />
  </data>
  <data name="P_UnkownDelegation_Documentation" xml:space="preserve">
    <value />
  </data>
  <data name="S_ADRegistration_Documentation" xml:space="preserve">
    <value>https://docs.microsoft.com/troubleshoot/windows-server/identity/default-workstation-numbers-join-domain
http://prajwaldesai.com/allow-domain-user-to-add-computer-to-domain/
http://blog.backslasher.net/preventing-users-from-adding-computers-to-a-domain.html</value>
  </data>
  <data name="S_C_Inactive_Documentation" xml:space="preserve">
    <value />
  </data>
  <data name="S_C_PrimaryGroup_Documentation" xml:space="preserve">
    <value />
  </data>
  <data name="S_C_Reversible_Documentation" xml:space="preserve">
    <value />
  </data>
  <data name="S_DC_2000_Documentation" xml:space="preserve">
    <value />
  </data>
  <data name="S_DC_2003_Documentation" xml:space="preserve">
    <value />
  </data>
  <data name="S_DC_NotUpdated_Documentation" xml:space="preserve">
    <value />
  </data>
  <data name="S_DC_SubnetMissing_Documentation" xml:space="preserve">
    <value />
  </data>
  <data name="S_DesEnabled_Documentation" xml:space="preserve">
    <value>https://docs.microsoft.com/en-us/archive/blogs/openspecification/msds-supportedencryptiontypes-episode-1-computer-accounts</value>
  </data>
  <data name="S_Domain____Documentation" xml:space="preserve">
    <value />
  </data>
  <data name="S_Duplicate_Documentation" xml:space="preserve">
    <value />
  </data>
  <data name="S_Inactive_Documentation" xml:space="preserve">
    <value />
  </data>
  <data name="S_OS_2000_Documentation" xml:space="preserve">
    <value />
  </data>
  <data name="S_OS_2003_Documentation" xml:space="preserve">
    <value />
  </data>
  <data name="S_OS_NT_Documentation" xml:space="preserve">
    <value />
  </data>
  <data name="S_OS_XP_Documentation" xml:space="preserve">
    <value />
  </data>
  <data name="S_PrimaryGroup_Documentation" xml:space="preserve">
    <value />
  </data>
  <data name="S_PwdNotRequired_Documentation" xml:space="preserve">
    <value>https://docs.microsoft.com/troubleshoot/windows-server/identity/useraccountcontrol-manipulate-account-properties</value>
  </data>
  <data name="S_Reversible_Documentation" xml:space="preserve">
    <value />
  </data>
  <data name="S_SIDHistory_Documentation" xml:space="preserve">
    <value />
  </data>
  <data name="S_SMB_v1_Documentation" xml:space="preserve">
    <value>https://github.com/lgandx/Responder-Windows
https://blogs.technet.microsoft.com/josebda/2015/04/21/the-deprecation-of-smb1-you-should-be-planning-to-get-rid-of-this-old-smb-dialect
https://docs.microsoft.com/windows-server/storage/file-server/troubleshoot/detect-enable-and-disable-smbv1-v2-v3</value>
  </data>
  <data name="S_Vuln_MS14_068_Documentation" xml:space="preserve">
    <value>https://technet.microsoft.com/en-us/library/security/ms14-068.aspx </value>
  </data>
  <data name="S_Vuln_MS17_010_Documentation" xml:space="preserve">
    <value>https://blogs.technet.microsoft.com/msrc/2017/04/14/protecting-customers-and-evaluating-risk/ 
https://github.com/misterch0c/shadowbroker/tree/master/windows/exploits </value>
  </data>
  <data name="T_Downlevel_Documentation" xml:space="preserve">
    <value>https://msdn.microsoft.com/en-us/library/cc223771.aspx</value>
  </data>
  <data name="T_Inactive_Documentation" xml:space="preserve">
    <value>https://msdn.microsoft.com/fr-fr/library/ms680921(v=vs.85).aspx</value>
  </data>
  <data name="T_ScriptOutOfDomain_Documentation" xml:space="preserve">
    <value />
  </data>
  <data name="T_SIDFiltering_Documentation" xml:space="preserve">
    <value>https://msdn.microsoft.com/en-us/library/cc237940.aspx</value>
  </data>
  <data name="T_SIDHistorySameDomain_Documentation" xml:space="preserve">
    <value />
  </data>
  <data name="T_SIDHistoryUnknownDomain_Documentation" xml:space="preserve">
    <value />
  </data>
  <data name="A_SMB2SignatureNotEnabled_Title" xml:space="preserve">
    <value>Check if the file share protocol can sign its network dialog</value>
  </data>
  <data name="A_SMB2SignatureNotRequired_Title" xml:space="preserve">
    <value>Check if the file share protocol requires its client to sign its network dialog</value>
  </data>
  <data name="P_DangerousExtendedRight_Title" xml:space="preserve">
    <value>Check for Dangerous rights found in OU delegation</value>
  </data>
  <data name="P_SchemaAdmin_Title" xml:space="preserve">
    <value>Avoid unexpected schema modifications which could result in domain rebuild</value>
  </data>
  <data name="S_C_PrimaryGroup_Title" xml:space="preserve">
    <value>Check for hidden group membership for computer accounts</value>
  </data>
  <data name="S_DC_SubnetMissing_Title" xml:space="preserve">
    <value>Check for completeness of network declaration</value>
  </data>
  <data name="S_Domain____Title" xml:space="preserve">
    <value>Check if a migration is in progress</value>
  </data>
  <data name="S_PrimaryGroup_Title" xml:space="preserve">
    <value>Check for hidden group membership for user accounts</value>
  </data>
  <data name="T_Downlevel_Title" xml:space="preserve">
    <value>Check for trusts compatible with NT4</value>
  </data>
  <data name="T_Inactive_Title" xml:space="preserve">
    <value>Check for inactive trusts</value>
  </data>
  <data name="T_ScriptOutOfDomain_Title" xml:space="preserve">
    <value>Check if login scripts may be located in a trusted domain</value>
  </data>
  <data name="T_SIDFiltering_Title" xml:space="preserve">
    <value>Check for Trusts whose security is not maximum</value>
  </data>
  <data name="T_SIDHistorySameDomain_Title" xml:space="preserve">
    <value>Check for local backdoor stored in SID History</value>
  </data>
  <data name="T_SIDHistoryUnknownDomain_Title" xml:space="preserve">
    <value>Check if the account has been migrated from a domain which doesn't exist anymore</value>
  </data>
  <data name="A_SMB2SignatureNotEnabled_TechnicalExplanation" xml:space="preserve">
    <value>Python responder is a tool used to compromise a domain by listening for SMB connections and injecting rogue data into the communications at the network level. SMB v1 does not provide a mechanism to enforce integrity and thus is compromised easily. SMB v2 (and subsequent version SMB v3) provides a way to guarantee the integrity of the network communication via a signature of each packet. By establishing a SMB v2 dialog with domain controllers, PingCastle checks the signature capability by looking at the SMB options provided by the server.</value>
  </data>
  <data name="A_SMB2SignatureNotRequired_TechnicalExplanation" xml:space="preserve">
    <value>Python responder is a tool used to compromise a domain by listening for SMB connections and injecting rogue data into the communications at the network level. SMB v1 does not provide a mechanism to enforce integrity and thus is compromised easily. SMB v2 (and subsequent version SMB v3) provides a way to guarantee the integrity of the network communication via a signature of each packet. By establishing a SMB v2 dialog with domain controllers, PingCastle checks the signature capability by looking at the SMB options provided by the server.</value>
  </data>
  <data name="A_SMB2SignatureNotEnabled_Documentation" xml:space="preserve">
    <value>https://msdn.microsoft.com/en-us/library/cc246675.aspx</value>
  </data>
  <data name="A_SMB2SignatureNotRequired_Documentation" xml:space="preserve">
    <value>https://msdn.microsoft.com/en-us/library/cc246675.aspx</value>
  </data>
  <data name="S_NoPreAuth_Description" xml:space="preserve">
    <value>The purpose is to ensure that all accounts do support kerberos pre-authentication</value>
  </data>
  <data name="S_NoPreAuth_Documentation" xml:space="preserve">
    <value>http://www.harmj0y.net/blog/activedirectory/roasting-as-reps/</value>
  </data>
  <data name="S_NoPreAuth_Rationale" xml:space="preserve">
    <value>Number of accounts which do not require kerberos pre-authentication: {count}</value>
  </data>
  <data name="S_NoPreAuth_Solution" xml:space="preserve">
    <value>Edit the property of the involved accounts and select the Account tab. Uncheck "Do not require Kerberos preauthentication". For computers which doesn't have the Account tab, you have to manually edit the attribute useraccountcontrol. Subtract from the attribute the value 4194304.</value>
  </data>
  <data name="S_NoPreAuth_TechnicalExplanation" xml:space="preserve">
    <value>Without kerberos pre-authentication, an attacker can request kerberos data from the domain controller and use this data to brute-force the account password. You can search accounts using the ldap query &lt;i&gt;Get-ADObject -LDAPFilter "(userAccountControl:1.2.840.113556.1.4.803:=4194304)"&lt;/i&gt;</value>
  </data>
  <data name="S_NoPreAuth_Title" xml:space="preserve">
    <value>Check if all accounts do support kerberos pre-authentication</value>
  </data>
  <data name="P_DelegationLoginScript_Description" xml:space="preserve">
    <value>The purpose is to ensure that standard users cannot modify login scripts</value>
  </data>
  <data name="P_DelegationLoginScript_Documentation" xml:space="preserve">
    <value />
  </data>
  <data name="P_DelegationLoginScript_Rationale" xml:space="preserve">
    <value>Number of login scripts that can be modified by any user: {count}</value>
  </data>
  <data name="P_DelegationLoginScript_Solution" xml:space="preserve">
    <value>Edit the Access Control List (ACL) of the script object or the directory where the file is located. Then remove any write permission given to the group.</value>
  </data>
  <data name="P_DelegationLoginScript_TechnicalExplanation" xml:space="preserve">
    <value>When the group Authenticated Users, Everyone or any similar groups have permission to modify a login script, it can be abused to take control of the accounts using this script. It can potentially lead to the compromise of the domain</value>
  </data>
  <data name="P_DelegationLoginScript_Title" xml:space="preserve">
    <value>Ensure that all login scripts cannot be modified by any user</value>
  </data>
  <data name="P_DelegationLoginScript_Detail" xml:space="preserve">
    <value>Script: {0} Account: {1} Right: {2}</value>
  </data>
  <data name="A_DC_Spooler_Title" xml:space="preserve">
    <value>Ensure that the printer spooler cannot be abused to get the DC Credentials</value>
  </data>
  <data name="A_DC_Spooler_Description" xml:space="preserve">
    <value>The purpose is to ensure that credentials cannot be extracted from the DC via its printer spooler</value>
  </data>
  <data name="A_DC_Spooler_Solution" xml:space="preserve">
    <value>The spooler service should be deactivated on domain controllers. Please note as a consequence that the Printer Pruning functionality (rarely used) will be unavailable.</value>
  </data>
  <data name="A_DC_Spooler_Rationale" xml:space="preserve">
    <value>The spooler service is remotely accessible from {count} DC</value>
  </data>
  <data name="A_DC_Spooler_TechnicalExplanation" xml:space="preserve">
    <value>When there’s an account with unconstrained delegation configured (which is fairly common) and the Print Spooler service running on a computer, you can get that computers credentials sent to the system with unconstrained delegation as a user. With a domain controller, the TGT of the DC can be extracted allowing an attacker to reuse it with a DCSync attack and obtain all user hashes and impersonate them.</value>
  </data>
  <data name="A_DC_Spooler_Detail" xml:space="preserve">
    <value>Domain controller: {0}</value>
  </data>
  <data name="A_DC_Spooler_Documentation" xml:space="preserve">
    <value>https://adsecurity.org/?p=4056
https://www.slideshare.net/harmj0y/derbycon-the-unintended-risks-of-trusting-active-directory</value>
  </data>
  <data name="A_NotEnoughDC_Title" xml:space="preserve">
    <value>Ensure that there are enough DCs to provide basic redundancy</value>
  </data>
  <data name="A_NotEnoughDC_Description" xml:space="preserve">
    <value>The purpose is to ensure the failure of one domain controller will not stop the domain.</value>
  </data>
  <data name="A_NotEnoughDC_Solution" xml:space="preserve">
    <value>Increase the number of domain controllers by installing new ones.</value>
  </data>
  <data name="A_NotEnoughDC_Rationale" xml:space="preserve">
    <value>The number of DCs is too small to provide redundancy: {count} DC</value>
  </data>
  <data name="A_NotEnoughDC_TechnicalExplanation" xml:space="preserve">
    <value>A single domain controller failure can lead to a lack of availability of the domain if the number of servers is too low. To have a minimum redundancy, the number of DC should be at least 2. For Labs, this rule can be ignored and you can add this rule into the exception list.</value>
  </data>
  <data name="A_NotEnoughDC_Documentation" xml:space="preserve">
    <value>https://social.technet.microsoft.com/wiki/contents/articles/14355.capacity-planning-for-active-directory-domain-services.aspx</value>
  </data>
  <data name="P_UnconstrainedDelegation_Title" xml:space="preserve">
    <value>Ensure that no accounts are subject to unconstrained delegation</value>
  </data>
  <data name="P_UnconstrainedDelegation_Description" xml:space="preserve">
    <value>The purpose is to ensure no account can impersonate any account.</value>
  </data>
  <data name="P_UnconstrainedDelegation_Solution" xml:space="preserve">
    <value>Replace unconstrained delegation by constrained delegation. In practice, on the account object, tab "delegation", replace "trust this computer for delegation to any service" by "trust this computer for delegation to specified services only".</value>
  </data>
  <data name="P_UnconstrainedDelegation_Rationale" xml:space="preserve">
    <value>Unconstrained delegations are configured on the domain: {count} account(s)</value>
  </data>
  <data name="P_UnconstrainedDelegation_TechnicalExplanation" xml:space="preserve">
    <value>When an unconstrained delegation is configured, the kerberos ticket TGT can be captured. This TGT grant then access to any service the user has access. If the user is an administrator or a domain controller (a connection can be forced using the spooler service), the domain can be compromised.</value>
  </data>
  <data name="P_UnconstrainedDelegation_Documentation" xml:space="preserve">
    <value>https://blogs.technet.microsoft.com/389thoughts/2017/04/18/get-rid-of-accounts-that-use-kerberos-unconstrained-delegation/
https://adsecurity.org/?p=1667</value>
  </data>
  <data name="P_UnconstrainedDelegation_Detail" xml:space="preserve">
    <value>DN: {0} Name: {1}</value>
  </data>
  <data name="P_ExchangeAdminSDHolder_Title" xml:space="preserve">
    <value>Ensure that Exchange did not modify the AdminSDHolder object to introduce vulnerabilities</value>
  </data>
  <data name="P_ExchangeAdminSDHolder_Description" xml:space="preserve">
    <value>The purpose is to ensure that no weakness has been introduced at Exchange installation.</value>
  </data>
  <data name="P_ExchangeAdminSDHolder_Solution" xml:space="preserve">
    <value>After having carefully studied the possible impact of the following change, alter the AdminSDHolder permissions to remove the Exchange objects.</value>
  </data>
  <data name="P_ExchangeAdminSDHolder_Rationale" xml:space="preserve">
    <value>Exchange did alter the AdminSDHolder object</value>
  </data>
  <data name="P_ExchangeAdminSDHolder_TechnicalExplanation" xml:space="preserve">
    <value>At install time, the Exchange Windows Permissions universal security group (USG) was granted the ability to modify the members attribute, the ability to change and reset passwords, and the ability to modify the permissions of any object protected by the AdminSDHolder role.
    This security group includes all the Exchange servers.
    As a consequence, a malicious administrator could elevate their privileges on one of the servers and thus gain control of the Active Directory forest.
    Newest versions of Exchange do not introduce this security vulnerability.</value>
  </data>
  <data name="P_ExchangeAdminSDHolder_Documentation" xml:space="preserve">
    <value>https://blogs.technet.microsoft.com/exchange/2009/09/23/exchange-2010-and-resolution-of-the-adminsdholder-elevation-issue/</value>
  </data>
  <data name="P_DelegationKeyAdmin_Title" xml:space="preserve">
    <value>Ensure that bogus Windows 2016 AD prep did not introduce vulnerabilities</value>
  </data>
  <data name="P_DelegationKeyAdmin_Description" xml:space="preserve">
    <value>The purpose is to ensure that no weaknesses have been introduced following a Windows 2016 installation.</value>
  </data>
  <data name="P_DelegationKeyAdmin_Solution" xml:space="preserve">
    <value>After having carefully studied the possible impact of the following change, apply the script made by MSRC and referenced in the documentation below to alter the permission.</value>
  </data>
  <data name="P_DelegationKeyAdmin_Rationale" xml:space="preserve">
    <value>A bogus Windows 2016 installation has granted too many rights to the Enterprise Key Admins group</value>
  </data>
  <data name="P_DelegationKeyAdmin_TechnicalExplanation" xml:space="preserve">
    <value>After performing adprep /domainprep from Windows Server 2016 sources there may be an unwanted AccessControlEntry (ACE) in the DiscretionaryACL (DACL) of the targeted domain-naming-context's SecurityDescriptor (SD) that grants FullControl permission to the Enterprise Key Admins group ( SID = ending with -527 ).
This is s a bug in ADPREP that was fixed in Windows Server 2016 RS3/1709. No official fix for those who used pre-1709.
Note: The SID will only be resolvable after the PDC emulator role is transferred to a Windows Server 2016 domain controller.
  </value>
  </data>
  <data name="P_DelegationKeyAdmin_Detail" xml:space="preserve">
    <value>DN: {0} Account: {1} Right: {2}</value>
  </data>
  <data name="P_DelegationKeyAdmin_Documentation" xml:space="preserve">
    <value>https://itpro-tips.com/wp-content/uploads/files/TechnetGallery/Enterprise-Key-Admins-720eb270.zip
https://secureidentity.se/adprep-bug-in-windows-server-2016/</value>
  </data>
  <data name="P_OperatorsEmpty_Description" xml:space="preserve">
    <value>The purpose is to ensure that the operator groups, which can have indirect control to the domain, are empty</value>
  </data>
  <data name="P_OperatorsEmpty_Detail" xml:space="preserve">
    <value>Group: {0} Members: {1}</value>
  </data>
  <data name="P_OperatorsEmpty_Documentation" xml:space="preserve">
    <value />
  </data>
  <data name="P_OperatorsEmpty_Rationale" xml:space="preserve">
    <value>{count} operator group(s) are not empty</value>
  </data>
  <data name="P_OperatorsEmpty_Solution" xml:space="preserve">
    <value>It is recommended to have these groups empty. Assign administrators into administrators group. Other accounts should have proper delegation rights in an OU or in the scope they are managing.</value>
  </data>
  <data name="P_OperatorsEmpty_TechnicalExplanation" xml:space="preserve">
    <value>Operator groups (account operators, server operators, ...) can take indirect control of the domain. Indeed these groups have write access to critical resources of the domain.</value>
  </data>
  <data name="P_OperatorsEmpty_Title" xml:space="preserve">
    <value>Check that operators group are empty</value>
  </data>
  <data name="P_DelegationGPOData_Description" xml:space="preserve">
    <value>The purpose is to ensure that standard users cannot modify GPO</value>
  </data>
  <data name="P_DelegationGPOData_Documentation" xml:space="preserve">
    <value />
  </data>
  <data name="P_DelegationGPOData_Rationale" xml:space="preserve">
    <value>Number of GPO items that can be modified by any user: {count}</value>
  </data>
  <data name="P_DelegationGPOData_Solution" xml:space="preserve">
    <value>Edit the Access Control List (ACL) of the GPO object or the directory where the items is located. Then remove any write permission given to the group.</value>
  </data>
  <data name="P_DelegationGPOData_TechnicalExplanation" xml:space="preserve">
    <value>When the group Authenticated Users, Everyone or any similar groups have permission to modify a GPO, it can be abused to take control of the accounts where this GPO applies. It can potentially lead to the compromise of the domain</value>
  </data>
  <data name="P_DelegationGPOData_Title" xml:space="preserve">
    <value>Ensure that GPO items cannot be modified by any user</value>
  </data>
  <data name="P_DelegationGPOData_Detail" xml:space="preserve">
    <value>GPO: {0} Item: {1} Account: {2} Right: {3}</value>
  </data>
  <data name="P_PrivilegeEveryone_Description" xml:space="preserve">
    <value>The purpose is to ensure that standard users are not granted dangerous privileges</value>
  </data>
  <data name="P_PrivilegeEveryone_Documentation" xml:space="preserve">
    <value>https://www.romhack.io/slides/RomHack%202018%20-%20Andrea%20Pierini%20-%20whoami%20priv%20-%20show%20me%20your%20Windows%20privileges%20and%20I%20will%20lead%20you%20to%20SYSTEM.pdf
https://www.tarlogic.com/en/blog/abusing-seloaddriverprivilege-for-privilege-escalation/
https://github.com/decoder-it/psgetsystem
https://twitter.com/0gtweet/status/1303427935647531018?s=20</value>
  </data>
  <data name="P_PrivilegeEveryone_Rationale" xml:space="preserve">
    <value>Number of privileges granted by GPO to any user: {count}</value>
  </data>
  <data name="P_PrivilegeEveryone_Solution" xml:space="preserve">
    <value>Locate the GPO specified in Details and remove the privilege.
Most of the settings are located in :
    Computer configuration -&gt; Policies -&gt; Windows Settings -&gt;Security Settings -&gt; Local Policies -&gt; User Rights Assignment.
As an alternative, the file GptTmpl.inf can be manually edited.</value>
  </data>
  <data name="P_PrivilegeEveryone_TechnicalExplanation" xml:space="preserve">
    <value>To perform special operations, the operating system relies on privileges. They can be displayed by running the command: whoami /all.
SeLoadDriverPrivilege can be used to take control of the system by loading a specifically designed driver. This procedure can be performed by low privileged users as the driver can be defined in HKCU.
SeTcbPrivilege is the privilege used to "Act on behalf the operating system". This is the privilege reserved to the SYSTEM user. This procedure allow any users to act as SYSTEM.
SeDebugPrivilege is the privilege used to debug program and to access any program's memory. It can be used to create a new process and set the parent process to a privileged one.
SeRestorePrivilege can be used to modify a service running as local system and startable by all users to a chosen one.
SeBackupPrivilege can be used to backup Windows registry and use third party tools for extracting local NTLM hashes.
SeTakeOwnershipPrivilege can be used to take ownership of any secureable object in the system including a service registry key. Then to change its ACL to define its own service running as LocalSystem.
SeCreateTokenPrivilege can be used to create a custom token with all privileges and thus be abused like SeTcbPrivilege 
SeImpersonatePrivilege and SeAssignPrimaryTokenPrivilege can be abused to impersonate privileged tokens. These tokens can be retrieved by establishing security context such as Local DCOM DCE/RPC reflexion.
SeSecurityPrivilege can be use to clear the security event log and shrink it to make events flushed soon. Also read security log and view events where the user inverted the login and its password.
SeManageVolumePrivilege can be use to reset the security descriptor on the C volume and thus, change the inherited permissions to critical files</value>
  </data>
  <data name="P_PrivilegeEveryone_Title" xml:space="preserve">
    <value>Ensure that dangerous privileges are not granted to everyone by GPO</value>
  </data>
  <data name="P_PrivilegeEveryone_Detail" xml:space="preserve">
    <value>GPO: {0} Account: {1} Privilege: {2}</value>
  </data>
  <data name="A_AdminSDHolder_ReportLocation" xml:space="preserve">
    <value>The detail can be found in the &lt;a href="#admincountequalsone"&gt;AdminSDHolder User List&lt;/a&gt;</value>
  </data>
  <data name="A_AnonymousAuthorizedGPO_ReportLocation" xml:space="preserve">
    <value>The detail can be found in &lt;a href="#lsasettings"&gt;Security settings&lt;/a&gt;</value>
  </data>
  <data name="A_BackupMetadata_ReportLocation" xml:space="preserve">
    <value>The detail can be found in &lt;a href="#backup"&gt;Backup&lt;/a&gt;</value>
  </data>
  <data name="A_MD2IntermediateCert_ReportLocation" xml:space="preserve">
    <value>The detail can be found in &lt;a href="#certificates"&gt;Certificates&lt;/a&gt;</value>
  </data>
  <data name="A_MD2RootCert_ReportLocation" xml:space="preserve">
    <value>The detail can be found in &lt;a href="#certificates"&gt;Certificates&lt;/a&gt;</value>
  </data>
  <data name="A_MD4IntermediateCert_ReportLocation" xml:space="preserve">
    <value>The detail can be found in &lt;a href="#certificates"&gt;Certificates&lt;/a&gt;</value>
  </data>
  <data name="A_MD4RootCert_ReportLocation" xml:space="preserve">
    <value>The detail can be found in &lt;a href="#certificates"&gt;Certificates&lt;/a&gt;</value>
  </data>
  <data name="A_MD5IntermediateCert_ReportLocation" xml:space="preserve">
    <value>The detail can be found in &lt;a href="#certificates"&gt;Certificates&lt;/a&gt;</value>
  </data>
  <data name="A_MD5RootCert_ReportLocation" xml:space="preserve">
    <value>The detail can be found in &lt;a href="#certificates"&gt;Certificates&lt;/a&gt;</value>
  </data>
  <data name="A_SHA0IntermediateCert_ReportLocation" xml:space="preserve">
    <value>The detail can be found in &lt;a href="#certificates"&gt;Certificates&lt;/a&gt;</value>
  </data>
  <data name="A_SHA0RootCert_ReportLocation" xml:space="preserve">
    <value>The detail can be found in &lt;a href="#certificates"&gt;Certificates&lt;/a&gt;</value>
  </data>
  <data name="A_SHA1IntermediateCert_ReportLocation" xml:space="preserve">
    <value>The detail can be found in &lt;a href="#certificates"&gt;Certificates&lt;/a&gt;</value>
  </data>
  <data name="A_SHA1RootCert_ReportLocation" xml:space="preserve">
    <value>The detail can be found in &lt;a href="#certificates"&gt;Certificates&lt;/a&gt;</value>
  </data>
  <data name="A_WeakRSARootCert_ReportLocation" xml:space="preserve">
    <value>The detail can be found in &lt;a href="#certificates"&gt;Certificates&lt;/a&gt;</value>
  </data>
  <data name="A_DC_Spooler_ReportLocation" xml:space="preserve">
    <value>The detail can be found in &lt;a href="#domaincontrollersection"&gt;Domain controllers&lt;/a&gt;</value>
  </data>
  <data name="A_Krbtgt_ReportLocation" xml:space="preserve">
    <value>The detail can be found in &lt;a href="#krbtgt"&gt;Krbtgt&lt;/a&gt;</value>
  </data>
  <data name="A_LAPS_Not_Installed_ReportLocation" xml:space="preserve">
    <value>The detail can be found in &lt;a href="#laps"&gt;LAPS&lt;/a&gt;</value>
  </data>
  <data name="A_LMHashAuthorized_ReportLocation" xml:space="preserve">
    <value>The detail can be found in &lt;a href="#lsasettings"&gt;Security settings&lt;/a&gt;</value>
  </data>
  <data name="A_MinPwdLen_ReportLocation" xml:space="preserve">
    <value>The detail can be found in &lt;a href="#passwordpolicies"&gt;Password policies&lt;/a&gt;</value>
  </data>
  <data name="A_NotEnoughDC_ReportLocation" xml:space="preserve">
    <value>The detail can be found in &lt;a href="#domaincontrollersection"&gt;Domain controllers&lt;/a&gt;</value>
  </data>
  <data name="A_NullSession_ReportLocation" xml:space="preserve">
    <value>The detail can be found in &lt;a href="#domaincontrollersection"&gt;Domain controllers&lt;/a&gt; and  &lt;a href="#nullsession"&gt;Null Session&lt;/a&gt;</value>
  </data>
  <data name="A_PwdGPO_ReportLocation" xml:space="preserve">
    <value>The detail can be found in the &lt;a href="#gpoobfuscatedpassword"&gt;Obfuscated Passwords&lt;/a&gt;</value>
  </data>
  <data name="A_LimitBlankPasswordUse_ReportLocation" xml:space="preserve">
    <value>The detail can be found in &lt;a href="#lsasettings"&gt;Security settings&lt;/a&gt;</value>
  </data>
  <data name="A_ReversiblePwd_ReportLocation" xml:space="preserve">
    <value>The detail can be found in &lt;a href="#lsasettings"&gt;Security settings&lt;/a&gt;</value>
  </data>
  <data name="A_ProtectedUsers_ReportLocation" xml:space="preserve">
    <value>The schema version is indicated in &lt;a href="#domaininformation"&gt;Domain Information&lt;/a&gt;</value>
  </data>
  <data name="A_NoServicePolicy_ReportLocation" xml:space="preserve">
    <value>The detail can be found in &lt;a href="#passwordpolicies"&gt;Password Policies&lt;/a&gt;</value>
  </data>
  <data name="A_SmartCardRequired_ReportLocation" xml:space="preserve">
    <value>The detail can be found in &lt;a href="#smartcardmandatorywithnopasswordchange"&gt;Smart Card and Password&lt;/a&gt;</value>
  </data>
  <data name="A_SMB2SignatureNotEnabled_ReportLocation" xml:space="preserve">
    <value>The detail can be found in &lt;a href="#domaincontrollersection"&gt;Domain controllers&lt;/a&gt;</value>
  </data>
  <data name="A_SMB2SignatureNotRequired_ReportLocation" xml:space="preserve">
    <value>The detail can be found in &lt;a href="#domaincontrollersection"&gt;Domain controllers&lt;/a&gt;</value>
  </data>
  <data name="P_AdminNum_ReportLocation" xml:space="preserve">
    <value>The detail can be found in &lt;a href="#admingroups"&gt;Admin Groups&lt;/a&gt;</value>
  </data>
  <data name="P_DangerousExtendedRight_ReportLocation" xml:space="preserve">
    <value>The detail can be found in &lt;a href="#admindelegation"&gt;Delegations&lt;/a&gt;</value>
  </data>
  <data name="P_DCOwner_ReportLocation" xml:space="preserve">
    <value>The detail can be found in &lt;a href="#domaincontrollersection"&gt;Domain controllers&lt;/a&gt;</value>
  </data>
  <data name="P_Delegated_ReportLocation" xml:space="preserve">
    <value>The detail can be found in &lt;a href="#admingroups"&gt;Admin Groups&lt;/a&gt;</value>
  </data>
  <data name="P_DelegationEveryone_ReportLocation" xml:space="preserve">
    <value>The detail can be found in &lt;a href="#admindelegation"&gt;Delegations&lt;/a&gt;</value>
  </data>
  <data name="P_DelegationKeyAdmin_ReportLocation" xml:space="preserve">
    <value>The detail can be found in &lt;a href="#admindelegation"&gt;Delegations&lt;/a&gt;</value>
  </data>
  <data name="P_DelegationLoginScript_ReportLocation" xml:space="preserve">
    <value>The detail can be found in &lt;a href="#gpologin"&gt;GPO Login script&lt;/a&gt;</value>
  </data>
  <data name="P_ExchangeAdminSDHolder_ReportLocation" xml:space="preserve">
    <value>The detail can be found in &lt;a href="#admindelegation"&gt;Delegations&lt;/a&gt;</value>
  </data>
  <data name="P_OperatorsEmpty_ReportLocation" xml:space="preserve">
    <value>The detail can be found in &lt;a href="#admingroups"&gt;Admin Groups&lt;/a&gt;</value>
  </data>
  <data name="P_PrivilegeEveryone_ReportLocation" xml:space="preserve">
    <value>The detail can be found in &lt;a href="#gpoprivileges"&gt;Privileges&lt;/a&gt;</value>
  </data>
  <data name="P_SchemaAdmin_ReportLocation" xml:space="preserve">
    <value>The detail can be found in &lt;a href="#admingroups"&gt;Admin Groups&lt;/a&gt;</value>
  </data>
  <data name="P_ServiceDomainAdmin_ReportLocation" xml:space="preserve">
    <value>The detail can be found in &lt;a href="#admingroups"&gt;Admin Groups&lt;/a&gt;</value>
  </data>
  <data name="P_UnconstrainedDelegation_ReportLocation" xml:space="preserve">
    <value>The detail can be found in &lt;a href="#useraccountanalysis"&gt;User information&lt;/a&gt; and &lt;a href="#computeraccountanalysis"&gt;Computer information&lt;/a&gt;</value>
  </data>
  <data name="P_UnkownDelegation_ReportLocation" xml:space="preserve">
    <value>The detail can be found in &lt;a href="#admindelegation"&gt;Delegations&lt;/a&gt;</value>
  </data>
  <data name="S_DC_NotUpdated_ReportLocation" xml:space="preserve">
    <value>The detail can be found in &lt;a href="#domaincontrollersection"&gt;Domain controllers&lt;/a&gt;</value>
  </data>
  <data name="S_DC_SubnetMissing_ReportLocation" xml:space="preserve">
    <value>The detail can be found in &lt;a href="#domaincontrollersection"&gt;Domain controllers&lt;/a&gt;</value>
  </data>
  <data name="S_DesEnabled_ReportLocation" xml:space="preserve">
    <value>The detail can be found in &lt;a href="#useraccountanalysis"&gt;User information&lt;/a&gt; and &lt;a href="#computeraccountanalysis"&gt;Computer information&lt;/a&gt;</value>
  </data>
  <data name="S_Duplicate_ReportLocation" xml:space="preserve">
    <value>The detail can be found in &lt;a href="#useraccountanalysis"&gt;User information&lt;/a&gt; and &lt;a href="#computeraccountanalysis"&gt;Computer information&lt;/a&gt;</value>
  </data>
  <data name="S_Inactive_ReportLocation" xml:space="preserve">
    <value>The detail can be found in &lt;a href="#useraccountanalysis"&gt;User information&lt;/a&gt; and &lt;a href="#computeraccountanalysis"&gt;Computer information&lt;/a&gt;</value>
  </data>
  <data name="S_NoPreAuth_ReportLocation" xml:space="preserve">
    <value>The detail can be found in &lt;a href="#useraccountanalysis"&gt;User information&lt;/a&gt; and &lt;a href="#computeraccountanalysis"&gt;Computer information&lt;/a&gt;</value>
  </data>
  <data name="S_Vuln_MS14_068_ReportLocation" xml:space="preserve">
    <value>The startup time of domain controllers can be found in &lt;a href="#domaincontrollersection"&gt;Domain controllers&lt;/a&gt;</value>
  </data>
  <data name="S_Vuln_MS17_010_ReportLocation" xml:space="preserve">
    <value>The startup time of domain controllers can be found in &lt;a href="#domaincontrollersection"&gt;Domain controllers&lt;/a&gt;</value>
  </data>
  <data name="S_OS_2000_ReportLocation" xml:space="preserve">
    <value>The detail can be found in &lt;a href="#operatingsystems"&gt;Operating Systems&lt;/a&gt;</value>
  </data>
  <data name="S_OS_2003_ReportLocation" xml:space="preserve">
    <value>The detail can be found in &lt;a href="#operatingsystems"&gt;Operating Systems&lt;/a&gt;</value>
  </data>
  <data name="S_DC_2000_ReportLocation" xml:space="preserve">
    <value>The operating system of domain controllers can be found in &lt;a href="#domaincontrollersection"&gt;Domain controllers&lt;/a&gt;</value>
  </data>
  <data name="S_DC_2003_ReportLocation" xml:space="preserve">
    <value>The operating system of domain controllers can be found in &lt;a href="#domaincontrollersection"&gt;Domain controllers&lt;/a&gt;</value>
  </data>
  <data name="S_OS_NT_ReportLocation" xml:space="preserve">
    <value>The detail can be found in &lt;a href="#operatingsystems"&gt;Operating Systems&lt;/a&gt;</value>
  </data>
  <data name="S_OS_XP_ReportLocation" xml:space="preserve">
    <value>The detail can be found in &lt;a href="#operatingsystems"&gt;Operating Systems&lt;/a&gt;</value>
  </data>
  <data name="S_PrimaryGroup_ReportLocation" xml:space="preserve">
    <value>The detail can be found in &lt;a href="#useraccountanalysis"&gt;User information&lt;/a&gt; and &lt;a href="#computeraccountanalysis"&gt;Computer information&lt;/a&gt;</value>
  </data>
  <data name="S_C_PrimaryGroup_ReportLocation" xml:space="preserve">
    <value>The detail can be found in &lt;a href="#useraccountanalysis"&gt;User information&lt;/a&gt; and &lt;a href="#computeraccountanalysis"&gt;Computer information&lt;/a&gt;</value>
  </data>
  <data name="S_PwdNotRequired_ReportLocation" xml:space="preserve">
    <value>The detail can be found in &lt;a href="#useraccountanalysis"&gt;User information&lt;/a&gt; and &lt;a href="#computeraccountanalysis"&gt;Computer information&lt;/a&gt;</value>
  </data>
  <data name="S_Reversible_ReportLocation" xml:space="preserve">
    <value>The detail can be found in &lt;a href="#useraccountanalysis"&gt;User information&lt;/a&gt; and &lt;a href="#computeraccountanalysis"&gt;Computer information&lt;/a&gt;</value>
  </data>
  <data name="S_C_Reversible_ReportLocation" xml:space="preserve">
    <value>The detail can be found in &lt;a href="#useraccountanalysis"&gt;User information&lt;/a&gt; and &lt;a href="#computeraccountanalysis"&gt;Computer information&lt;/a&gt;</value>
  </data>
  <data name="S_SIDHistory_ReportLocation" xml:space="preserve">
    <value>The SIDHistory detail can be found in &lt;a href="#useraccountanalysis"&gt;User information&lt;/a&gt; and &lt;a href="#computeraccountanalysis"&gt;Computer information&lt;/a&gt; and a quick summary in &lt;a href="#sidhistory"&gt;SID History&lt;/a&gt;</value>
  </data>
  <data name="S_SMB_v1_ReportLocation" xml:space="preserve">
    <value>The detail can be found in &lt;a href="#domaincontrollersection"&gt;Domain controllers&lt;/a&gt;</value>
  </data>
  <data name="T_Downlevel_ReportLocation" xml:space="preserve">
    <value>The detail can be found in &lt;a href="#discovereddomains"&gt;Trusts section&lt;/a&gt;</value>
  </data>
  <data name="T_Inactive_ReportLocation" xml:space="preserve">
    <value>The detail can be found in &lt;a href="#discovereddomains"&gt;Trusts section&lt;/a&gt;</value>
  </data>
  <data name="T_ScriptOutOfDomain_ReportLocation" xml:space="preserve">
    <value>The detail can be found in &lt;a href="#gpologin"&gt;GPO Login script&lt;/a&gt; and in &lt;a href="#logonscripts"&gt;Logon Scripts&lt;/a&gt;</value>
  </data>
  <data name="T_SIDFiltering_ReportLocation" xml:space="preserve">
    <value>The detail can be found in &lt;a href="#discovereddomains"&gt;Trusts section&lt;/a&gt;</value>
  </data>
  <data name="T_SIDHistorySameDomain" xml:space="preserve">
    <value>The SIDHistory detail can be found in &lt;a href="#useraccountanalysis"&gt;User information&lt;/a&gt; and &lt;a href="#computeraccountanalysis"&gt;Computer information&lt;/a&gt; and a quick summary in &lt;a href="#sidhistory"&gt;SID History&lt;/a&gt;</value>
  </data>
  <data name="T_SIDHistoryUnknownDomain_ReportLocation" xml:space="preserve">
    <value>The SIDHistory detail can be found in &lt;a href="#useraccountanalysis"&gt;User information&lt;/a&gt; and &lt;a href="#computeraccountanalysis"&gt;Computer information&lt;/a&gt; and a quick summary in &lt;a href="#sidhistory"&gt;SID History&lt;/a&gt;</value>
  </data>
  <data name="P_ExchangePrivEsc_Description" xml:space="preserve">
    <value>The purpose is to ensure that Exchange Installation did not introduce privilege escalation vulnerabilites by modifying domain permissions</value>
  </data>
  <data name="P_ExchangePrivEsc_Documentation" xml:space="preserve">
    <value>https://github.com/gdedrouas/Exchange-AD-Privesc/blob/master/DomainObject/Fix-DomainObjectDACL.ps1
https://blogs.technet.microsoft.com/exchange/2019/02/12/released-february-2019-quarterly-exchange-updates/
https://support.microsoft.com/en-us/help/4490059/using-shared-permissions-model-to-run-exchange-server</value>
  </data>
  <data name="P_ExchangePrivEsc_Rationale" xml:space="preserve">
    <value>The group Exchange Windows Permissions has the right to change the security descriptor of the domain root</value>
  </data>
  <data name="P_ExchangePrivEsc_Solution" xml:space="preserve">
    <value>Edit the root domain security descriptor. Identify the ACE giving the right ModifyDACL to the principal Exchange Windows Permissions. Go to the advanced settings and set the inheritance to Inherit Only.
    
Or run the powershell script Fix-DomainObjectDACL.ps1 referenced below.</value>
  </data>
  <data name="P_ExchangePrivEsc_TechnicalExplanation" xml:space="preserve">
    <value>When Exchange is installed, a set of permissions is modified to allow a deep Windows integration. A dependancy analysis has shown that the permissions that Exchange set introduce privilege escalation.
    The most basic exploitation is that a member of the group Exchange Windows Permissions can modified the security permission of the domain, granting itself the right  Ds-Replication-Get-Changes-All.
    This right allows the account to perform an attack named DCSync which retrieve the hash of the krbtgt account. With this hash, the attacker can then create a golden ticket and impersonate silently any user of the domain.
    </value>
  </data>
  <data name="P_ExchangePrivEsc_Title" xml:space="preserve">
    <value>Ensure that Exchange did not introduce security vulnerabilities</value>
  </data>
  <data name="P_LoginDCEveryone_Description" xml:space="preserve">
    <value>The purpose is to ensure that standard users cannot login to Domain Controllers</value>
  </data>
  <data name="P_LoginDCEveryone_Documentation" xml:space="preserve">
    <value>https://docs.microsoft.com/en-us/windows/security/threat-protection/security-policy-settings/allow-log-on-locally
https://docs.microsoft.com/en-us/windows/security/threat-protection/security-policy-settings/allow-log-on-through-remote-desktop-services
https://support.hpe.com/hpsc/doc/public/display?docId=emr_na-c04197764-1</value>
  </data>
  <data name="P_LoginDCEveryone_Rationale" xml:space="preserve">
    <value>Anyone can interactively or remotely login to a DC</value>
  </data>
  <data name="P_LoginDCEveryone_Solution" xml:space="preserve">
    <value>Locate the GPO specified in Details and remove the privilege "Allow log on locally" or "Allow log on through Remote Desktop Services" to "Everyone", "Authenticated Users", "Domain Users" or "Domain Computers".
The settings are located in :
    Computer configuration -&gt; Policies -&gt; Windows Settings -&gt;Security Settings -&gt; Local Policies -&gt; User Rights Assignment.
As an alternative, the file GptTmpl.inf can be manually edited.</value>
  </data>
  <data name="P_LoginDCEveryone_TechnicalExplanation" xml:space="preserve">
    <value>Domain Controllers are critical components of the Active Directory. If an attacker is able to open a session, he will be able to discover unsecure backup media or perform a local privilege escalation to become the DC admin and thus the AD admin.
    Local logon requires usually physical interaction, which explains why network seggregation is a best practice, but this can be bypassed. Indeed VNC or remote server management software is a way to perform local logon remotely.
    In addition, remote server management software have been the subject of many vulnerabilites, some of them can be exploited even if this software is disabled.</value>
  </data>
  <data name="P_LoginDCEveryone_Title" xml:space="preserve">
    <value>Ensure that the privilege to log on Domain Controllers are not granted to everyone by GPO</value>
  </data>
  <data name="P_LoginDCEveryone_Detail" xml:space="preserve">
    <value>GPO: {0} Account: {1} Privilege: {2}</value>
  </data>
  <data name="P_LoginDCEveryone_ReportLocation" xml:space="preserve">
    <value>The detail can be found in &lt;a href="#gpoprivileges"&gt;Privileges&lt;/a&gt;</value>
  </data>
  <data name="P_RecycleBin_Description" xml:space="preserve">
    <value>The purpose is to ensure that the Recycle Bin feature is enabled</value>
  </data>
  <data name="P_RecycleBin_Documentation" xml:space="preserve">
    <value>https://enterinit.com/powershell-enable-active-directory-recycle-bin</value>
  </data>
  <data name="P_RecycleBin_Rationale" xml:space="preserve">
    <value>The Recycle Bin is not enabled</value>
  </data>
  <data name="P_RecycleBin_Solution" xml:space="preserve">
    <value>First, be sure that the forest level is at least Windows 2008 R2.
    You can check it with Get-ADForest or in the &lt;a href="#domaininformation"&gt;Domain Information&lt;/a&gt; section.
  Then you can enable it using the powershell command:
Enable-ADOptionalFeature -Identity 'Recycle Bin Feature' -Scope ForestOrConfigurationSet -Target 'test.mysmartlogon.com'</value>
  </data>
  <data name="P_RecycleBin_TechnicalExplanation" xml:space="preserve">
    <value>The Recycle Bin avoids immediate deletion of objects (which can still be partially recovered by its tombstone). This lowers the administration work needed to restore. It also extends the period where traces are available when an investigation is needed.</value>
  </data>
  <data name="P_RecycleBin_Title" xml:space="preserve">
    <value>Ensure that the Recycle Bin feature is enabled</value>
  </data>
  <data name="P_RecycleBin_ReportLocation" xml:space="preserve">
    <value>The detail can be found in &lt;a href="#domaininformation"&gt;Domain Information&lt;/a&gt;</value>
  </data>
  <data name="P_DsHeuristicsAdminSDExMask_Description" xml:space="preserve">
    <value>The purpose is to ensure that the AdminSDHolder mechanism has not been altered</value>
  </data>
  <data name="P_DsHeuristicsAdminSDExMask_Documentation" xml:space="preserve">
    <value>https://www.petri.com/active-directory-security-understanding-adminsdholder-object
https://docs.microsoft.com/en-us/openspecs/windows_protocols/ms-adts/e5899be4-862e-496f-9a38-33950617d2c5</value>
  </data>
  <data name="P_DsHeuristicsAdminSDExMask_Rationale" xml:space="preserve">
    <value>The AdminSDHolder safety mechanism has been modified for some privilege groups</value>
  </data>
  <data name="P_DsHeuristicsAdminSDExMask_Solution" xml:space="preserve">
    <value>Find the dsHeuristics configuration which is located in CN=Directory Service,CN=Windows NT,CN=Services,CN=Configuration,DC=ad,DC=contoso,DC=com.
    Then edit the 16th character and set it to zero.</value>
  </data>
  <data name="P_DsHeuristicsAdminSDExMask_TechnicalExplanation" xml:space="preserve">
    <value>The AdminSDHolder service is a protection which prohibits an admin to loose control of the domain after a permission change or to introduce a weakness in the permissions.
It proceed by rewriting every 60 minutes the security descriptor of critical objects.

By modifying the dsHeuristics attribute, this protection can be disabled for one or more critical group.
Each critical group is associated with a value:
Account Operators: 1,
Server Operators: 2,
Print Operators:4,
Backup Operators: 8.
The 16th character of dsHeuristics represents the sum of the values associated to the groups where the AdminSDHolder has been disabled.
To disable it for the 'Backup Operators' and the 'Server Operators', the value is 8 + 2 = 0x0A = 'a'.
</value>
  </data>
  <data name="P_DsHeuristicsAdminSDExMask_Title" xml:space="preserve">
    <value>Ensure that the AdminSDHolder protection has not been disabled for some critical groups</value>
  </data>
  <data name="P_DsHeuristicsDoListObject_Description" xml:space="preserve">
    <value>The purpose is to check if the DoListObject feature has been enabled</value>
  </data>
  <data name="P_DsHeuristicsDoListObject_Documentation" xml:space="preserve">
    <value>https://dirteam.com/sander/2008/12/09/active-directory-visibility-modes/
https://docs.microsoft.com/en-us/openspecs/windows_protocols/ms-adts/e5899be4-862e-496f-9a38-33950617d2c5
https://docs.microsoft.com/en-us/openspecs/windows_protocols/ms-adts/990fb975-ab31-4bc1-8b75-5da132cd4584</value>
  </data>
  <data name="P_DsHeuristicsDoListObject_Rationale" xml:space="preserve">
    <value>The DoListObject has been enabled</value>
  </data>
  <data name="P_DsHeuristicsDoListObject_Solution" xml:space="preserve">
    <value>This is an informative rule.
If you want to reverse this behavior to its default value, find the dsHeuristics configuration which is located in CN=Directory Service,CN=Windows NT,CN=Services,CN=Configuration,DC=ad,DC=contoso,DC=com.
Then edit the 3rd character and set it to zero.</value>
  </data>
  <data name="P_DsHeuristicsDoListObject_TechnicalExplanation" xml:space="preserve">
    <value>The DoListObject is a feature to probihit account located in an OU to look at another OU. It proceed by checking an special ACL named RIGHT_DS_LIST_OBJECT.
</value>
  </data>
  <data name="P_DsHeuristicsDoListObject_Title" xml:space="preserve">
    <value>Check if the behavior DoListObject has been enabled</value>
  </data>
  <data name="P_RecoveryModeUnprotected_Description" xml:space="preserve">
    <value>The purpose is to check that it is not possible to go into recovery mode without the administrator password</value>
  </data>
  <data name="P_RecoveryModeUnprotected_Documentation" xml:space="preserve">
    <value>https://docs.microsoft.com/en-us/windows/security/threat-protection/security-policy-settings/recovery-console-allow-automatic-administrative-logon</value>
  </data>
  <data name="P_RecoveryModeUnprotected_Rationale" xml:space="preserve">
    <value>At least one GPO grant the right to get in the recovery mode without being admin</value>
  </data>
  <data name="P_RecoveryModeUnprotected_Solution" xml:space="preserve">
    <value>Locate the GPO specified in Details and turn off the setting "Recovery console: Allow automatic administrative logon"
The setting is located in :
    Computer configuration -&gt; Policies -&gt; Windows Settings -&gt;Security Settings -&gt; Local Policies -&gt; Security Options.
As an alternative, the file GptTmpl.inf can be manually edited.</value>
  </data>
  <data name="P_RecoveryModeUnprotected_TechnicalExplanation" xml:space="preserve">
    <value>The recovery mode is a special mode allowing an admin to fix an issue preventing the computer to boot. By pressing F8 in the short time span allowed, the computer boots with just a simple command line.
    Usually, the administrator password is requested to avoid that people having physical access get control of it. It can typically be done by creating a new user account and add this account as member of the administrators group. This rule checks if there are any GPO which disable this password prompt.</value>
  </data>
  <data name="P_RecoveryModeUnprotected_Title" xml:space="preserve">
    <value>Ensure the "automatic administrative logon" feature of the recovery mode is not enabled</value>
  </data>
  <data name="P_RecoveryModeUnprotected_Detail" xml:space="preserve">
    <value>GPO: {0}</value>
  </data>
  <data name="P_RecoveryModeUnprotected_ReportLocation" xml:space="preserve">
    <value>The detail can be found in &lt;a href="#lsasettings"&gt;Security settings&lt;/a&gt;</value>
  </data>
  <data name="A_LDAPSigningDisabled_Description" xml:space="preserve">
    <value>The purpose is to check that the integrity of the network protocol LDAP as not been explicitly disabled.</value>
  </data>
  <data name="A_LDAPSigningDisabled_Documentation" xml:space="preserve">
    <value>https://docs.microsoft.com/en-us/windows/security/threat-protection/security-policy-settings/network-security-ldap-client-signing-requirements</value>
  </data>
  <data name="A_LDAPSigningDisabled_Rationale" xml:space="preserve">
    <value>At least one GPO disables explicitly LDAP client signature</value>
  </data>
  <data name="A_LDAPSigningDisabled_Solution" xml:space="preserve">
    <value>Locate the GPO specified in Details and change the setting in "Network security: LDAP client signing requirements".
    Disable this setting, or set it to "Negotiate signing" or "Require Signature".
The setting is located in :
    Computer configuration -&gt; Policies -&gt; Windows Settings -&gt;Security Settings -&gt; Local Policies -&gt; Security Options.
As an alternative, the file GptTmpl.inf can be manually edited.</value>
  </data>
  <data name="A_LDAPSigningDisabled_TechnicalExplanation" xml:space="preserve">
    <value>The LDAP signature feature enables the integrity of the network communication between the computer and the domain controller.
Hackers aim at intercepting the communication at the network layer and modify the network dialog to grant themselves admin privileges.
The goal of this feature is to defeat these attacks.
Unfortunately, not all devices support LDAP signature. That's why the best practice is to Require Signature if possible or to, at least, try to negotiate it.
In this case, the LDAP signature feature is configured to None (no negotiation), which can enable hackers to perform their attacks.</value>
  </data>
  <data name="A_LDAPSigningDisabled_Title" xml:space="preserve">
    <value>Ensure LDAP signing requirements is not set to None</value>
  </data>
  <data name="A_LDAPSigningDisabled_Detail" xml:space="preserve">
    <value>GPO: {0}</value>
  </data>
  <data name="A_LDAPSigningDisabled_ReportLocation" xml:space="preserve">
    <value>The detail can be found in &lt;a href="#lsasettings"&gt;Security settings&lt;/a&gt;</value>
  </data>
  <data name="A_DCRefuseComputerPwdChange_Description" xml:space="preserve">
    <value>The purpose is to check that the computer account password can be changed as usual.</value>
  </data>
  <data name="A_DCRefuseComputerPwdChange_Documentation" xml:space="preserve">
    <value>https://docs.microsoft.com/en-us/windows/security/threat-protection/security-policy-settings/domain-controller-refuse-machine-account-password-changes</value>
  </data>
  <data name="A_DCRefuseComputerPwdChange_Rationale" xml:space="preserve">
    <value>At least one GPO disables explicitly the change of the computer account password</value>
  </data>
  <data name="A_DCRefuseComputerPwdChange_Solution" xml:space="preserve">
    <value>Locate the GPO specified in Details and change the setting in "Domain controller: Refuse machine account password changes".
    Disable this setting, or set it to "Disabled".
The setting is located in :
    Computer configuration -&gt; Policies -&gt; Windows Settings -&gt;Security Settings -&gt; Local Policies -&gt; Security Options.
As an alternative, the file GptTmpl.inf can be manually edited.</value>
  </data>
  <data name="A_DCRefuseComputerPwdChange_TechnicalExplanation" xml:space="preserve">
    <value>For each computer, there is a hidden user account. This account is used to maintain the computer inside the Active Directory domain.
    The password of this account is changed every 30 days automatically except if the Domain Controller prohibits this.
  This is the case when the GPO is enabled.</value>
  </data>
  <data name="A_DCRefuseComputerPwdChange_Title" xml:space="preserve">
    <value>Ensure that Domain Controllers don't deny the change of computers account password.</value>
  </data>
  <data name="A_DCRefuseComputerPwdChange_Detail" xml:space="preserve">
    <value>GPO: {0}</value>
  </data>
  <data name="A_DCRefuseComputerPwdChange_ReportLocation" xml:space="preserve">
    <value>The detail can be found in &lt;a href="#lsasettings"&gt;Security settings&lt;/a&gt;</value>
  </data>
  <data name="P_DelegationFileDeployed_Description" xml:space="preserve">
    <value>The purpose is to check that files deployed to computers cannot be changed by everyone.</value>
  </data>
  <data name="P_DelegationFileDeployed_Documentation" xml:space="preserve">
    <value />
  </data>
  <data name="P_DelegationFileDeployed_Rationale" xml:space="preserve">
    <value>At least one GPO is deploying a file which can be modified by everyone</value>
  </data>
  <data name="P_DelegationFileDeployed_Solution" xml:space="preserve">
    <value>Locate the file mentionned by the GPO specified in Details and change its permissions.</value>
  </data>
  <data name="P_DelegationFileDeployed_TechnicalExplanation" xml:space="preserve">
    <value>Application provided in a msi form or general files can be deployed by a GPO. If an attacker can modify one of this file, it can take control of the user account.</value>
  </data>
  <data name="P_DelegationFileDeployed_Title" xml:space="preserve">
    <value>Ensure that file deployed by a GPO cannot be modified by everyone.</value>
  </data>
  <data name="P_DelegationFileDeployed_Detail" xml:space="preserve">
    <value>GPO: {0} Type: {1} FileName: {2} Account: {3} Right: {4}</value>
  </data>
  <data name="P_DelegationFileDeployed_ReportLocation" xml:space="preserve">
    <value>The detail can be found in &lt;a href="#gpodeployedfiles"&gt;GPO Deployed Files&lt;/a&gt;</value>
  </data>
  <data name="T_FileDeployedOutOfDomain_Description" xml:space="preserve">
    <value>The purpose is to ensure that a compromised domain cannot use file deployed by GPO to compromise other domains</value>
  </data>
  <data name="T_FileDeployedOutOfDomain_Solution" xml:space="preserve">
    <value>Copy the file to a share located inside the domain and not in trusted domains.</value>
  </data>
  <data name="T_FileDeployedOutOfDomain_Rationale" xml:space="preserve">
    <value>Number of files deployed hosted in another domain: {count}</value>
  </data>
  <data name="T_FileDeployedOutOfDomain_Detail" xml:space="preserve">
    <value>Server: {0} GPO: {1} File: {2}</value>
  </data>
  <data name="T_FileDeployedOutOfDomain_TechnicalExplanation" xml:space="preserve">
    <value>Files deployed (Application as msi, file copied by GPO, ...) can be stored in any file share available in the network and that includes trusted domains shares. If such file is located in a compromise domain, it can be used to compromise other domains.</value>
  </data>
  <data name="T_FileDeployedOutOfDomain_Documentation" xml:space="preserve">
    <value />
  </data>
  <data name="T_FileDeployedOutOfDomain_Title" xml:space="preserve">
    <value>Check if files deployed may be located in a trusted domain</value>
  </data>
  <data name="T_FileDeployedOutOfDomain_ReportLocation" xml:space="preserve">
    <value>The detail can be found in &lt;a href="#gpodeployedfiles"&gt;GPO Deployed Files&lt;/a&gt;</value>
  </data>
  <data name="A_NoGPOLLMNR_Description" xml:space="preserve">
    <value>The purpose is to ensure that local name resolution protocol (LLMNR) cannot be used to collect credentials by performing a network attack</value>
  </data>
  <data name="A_NoGPOLLMNR_Solution" xml:space="preserve">
    <value>Enable the GPO &lt;a href="https://getadmx.com/?Category=Windows_10_2016&amp;Policy=Microsoft.Policies.DNSClient::Turn_Off_Multicast"&gt;Turn off multicast name resolution&lt;/a&gt; and check that no GPO override this setting.
    (if it is the case, the policy involved will be displayed below)</value>
  </data>
  <data name="A_NoGPOLLMNR_Rationale" xml:space="preserve">
    <value>No GPO has been found which disables LLMNR or at least one GPO does enable it explicitly</value>
  </data>
  <data name="A_NoGPOLLMNR_Detail" xml:space="preserve">
    <value>GPO: {0}</value>
  </data>
  <data name="A_NoGPOLLMNR_TechnicalExplanation" xml:space="preserve">
    <value>LLMNR is a protocol which translates names such as foo.bar.com into an ip address. LLMNR has been designed to translate name locally in case the default protocol DNS is not available.
    Regarding Active Directory, DNS is mandatory which makes LLMNR useless.
  LLMNR exploits typo mistakes or faster response time to redirect users to a specially designed share, server or website.
  Being trusted, this service will trigger the single sign on procedure which can be abused to retrieve the user credentials.

    LLMNR is enabled by default on all OS except starting from Windows 10 v1903 and Windows Server v1903 where it is disabled.
    </value>
  </data>
  <data name="A_NoGPOLLMNR_Documentation" xml:space="preserve">
    <value>https://youtu.be/Fg2gvk0qgjM</value>
  </data>
  <data name="A_NoGPOLLMNR_Title" xml:space="preserve">
    <value>Check if LLMNR can be used to steal credentials</value>
  </data>
  <data name="A_NoGPOLLMNR_ReportLocation" xml:space="preserve">
    <value>The detail can be found in &lt;a href="#lsasettings"&gt;Security settings&lt;/a&gt;</value>
  </data>
  <data name="InactiveUserOrComputer_Detail" xml:space="preserve">
    <value>By reusing existing objects, whose credentials may be the same among all objects or stored on configuration files or in memory, a third party can take them over.</value>
  </data>
  <data name="VulnerabilityManagement_Detail" xml:space="preserve">
    <value>Patching computers is part of the security process. Unpatched vulnerability is a way to gain control of a computer.</value>
  </data>
  <data name="Replication_Detail" xml:space="preserve">
    <value>Active Directory uses a distributed architecture to have a high level of availability. This architecture replicates each change at a regular interval. Collision of changes can create unexpected objects which can be used later.</value>
  </data>
  <data name="Provisioning_Detail" xml:space="preserve">
    <value>It is important to control who can create new objects in the Active Directory. Indeed, its owner may introduced an object in which it has a strong control.</value>
  </data>
  <data name="OldAuthenticationProtocols_Detail" xml:space="preserve">
    <value>Cryptography and computer power have evolved during the time and the oldest protocols do not provide the same level of security anymore. They can be broken and used to gain control of the domain.</value>
  </data>
  <data name="ObsoleteOS_Detail" xml:space="preserve">
    <value>Operating systems have a lifecycle where its manufacturer provides patches. If the operating system is not supported anymore, vulnerabilities are not fixed anymore.</value>
  </data>
  <data name="ObjectConfig_Detail" xml:space="preserve">
    <value>By abusing a misconfiguration, an attacker can gain the control of the domain.</value>
  </data>
  <data name="NetworkTopography_Detail" xml:space="preserve">
    <value>It is important to have a database of all the assets and control the physical security of the server. If one server is compromised physically, all the secrets of the domain can be exposed.</value>
  </data>
  <data name="AdminControl_Detail" xml:space="preserve">
    <value>It is important to know how much administrators are in place and to track the use of emergency accounts</value>
  </data>
  <data name="PrivilegeControl_Detail" xml:space="preserve">
    <value>Privileges are granted to special groups to perform their duty. Sometimes, these privileges can be used to take control of the domain.</value>
  </data>
  <data name="ACLCheck_Detail" xml:space="preserve">
    <value>Delegation is used to perform day to day activities. It is important to control it.</value>
  </data>
  <data name="ControlPath_Detail" xml:space="preserve">
    <value>Permissions granted to someone can be difficult to analyze. Hackers use this fact to chain multiple permission leaks in order to gain control of the domain.</value>
  </data>
  <data name="IrreversibleChange_Detail" xml:space="preserve">
    <value>Most of the changes can be reversed. Some not, and it can broke the domain.</value>
  </data>
  <data name="SIDFiltering_Detail" xml:space="preserve">
    <value>Isolation of domain is critical to avoid a global compromission.</value>
  </data>
  <data name="TrustInactive_Detail" xml:space="preserve">
    <value>Any trust introduce a risk. The secret used for the trust can be exposed to take control of the domain.</value>
  </data>
  <data name="TrustImpermeability_Detail" xml:space="preserve">
    <value>A trust is a technical boundary which should not be altered.</value>
  </data>
  <data name="SIDHistory_Detail" xml:space="preserve">
    <value>When doing migrations, a double identity may be attributed. It can have side effects up to the compromission of the domain.</value>
  </data>
  <data name="OldTrustProtocol_Detail" xml:space="preserve">
    <value>NT4 like trusts do not provide an accurate level of security and by the use of its old protocols, put the domain at risk.</value>
  </data>
  <data name="Reconnaissance_Detail" xml:space="preserve">
    <value>At the begining of an attack, a hacker try to collect as much data as possible. Leaking information just reduce the time an attacker needs to gain control of the domain.</value>
  </data>
  <data name="LocalGroupVulnerability_Detail" xml:space="preserve">
    <value>the GPO deploy settings which are applied to computers locally and it can be abuse to take control of individual computers.</value>
  </data>
  <data name="PasswordRetrieval_Detail" xml:space="preserve">
    <value>Passwords stored in clear text or obfuscated can be retrieved. By reusing the user's identity, an attacker does not need to perform attack and it is difficult to detect it.</value>
  </data>
  <data name="WeakPassword_Detail" xml:space="preserve">
    <value>Misprotected credentials can be abused to be retrieved in plain text and then, impersonate the user.</value>
  </data>
  <data name="TemporaryAdmins_Detail" xml:space="preserve">
    <value>Administrators grant sometimes privileged rights to colleagues without any approval from a security officer.</value>
  </data>
  <data name="NetworkSniffing_Detail" xml:space="preserve">
    <value>Network attacks such as interception or modification can be used to run commands on behalf an administrator.</value>
  </data>
  <data name="CertificateTakeOver_Detail" xml:space="preserve">
    <value>Certificates are an alternative to passwords. Their protection is crucial to avoid any backdoor.</value>
  </data>
  <data name="PassTheCredential_Detail" xml:space="preserve">
    <value>If the password is a secret which protects, its derivatives, such as the fingerprint named hash, can be used as if it was the password itself.</value>
  </data>
  <data name="GoldenTicket_Detail" xml:space="preserve">
    <value>There are key secrets in Active Directory which provides seed to the cryptographic process. A leak can lead to a total compromise of a domain.</value>
  </data>
  <data name="Backup_Detail" xml:space="preserve">
    <value>Althought Active Directory has been designed for redundancy, a backup process is key for a recovery plan.</value>
  </data>
  <data name="Audit_Detail" xml:space="preserve">
    <value>The default audit policy of Windows does not collect key events, to trace activities or discover past compromise.</value>
  </data>
  <data name="DelegationCheck_Detail" xml:space="preserve">
    <value>Delegations are very complex to understand and may grant more privileges than initially thought.</value>
  </data>
  <data name="TrustAzure_Detail" xml:space="preserve">
    <value>The link with Azure Systems may create new compromise methods between the cloud and on premise systems.</value>
  </data>
  <data name="T_TGTDelegation_Description" xml:space="preserve">
    <value>The purpose is to ensure that a forest cannot be used to compromise another forest using kerberos delegation</value>
  </data>
  <data name="T_TGTDelegation_Solution" xml:space="preserve">
    <value>TGT Delegation on forest trusts should be disabled, except for migrations.
You can use netdom to turn the TGT delegation on forest trust OFF.
Example: netdom.exe trust fabrikam.com /domain:contoso.com /EnableTGTDelegation:No
As an alternative, you can locate the forest trust and change its LDAP trustattribute from the value 8 to the value 520.

The impact is to have non working services which relies on unconstrained delegation. Resource based delegation is not impacted.

See the official Microsoft recommandations and a script to find potentially impacted services in the links below.</value>
  </data>
  <data name="T_TGTDelegation_Rationale" xml:space="preserve">
    <value>At least one forest trust has been found where TGT delegation over forest trust is allowed</value>
  </data>
  <data name="T_TGTDelegation_Detail" xml:space="preserve">
    <value>Trust: {0}</value>
  </data>
  <data name="T_TGTDelegation_TechnicalExplanation" xml:space="preserve">
    <value>A Forest trust is a link between two forests. By default, this trust is secure and prohibits SID History attacks.
However, it allows kerberos delegation by default.
By configuring an uncontrainst delegation on forest A, an attacker located in forest A can collect admin or domain controller credentials, the TGT of the session, of the forest B.
This collection can be forced by using services such as the printer spooler, enabled by default on all domain controllers.
Having collected this TGT, the attacker can then request access to other systems in forest B, by asking for a TGS given the TGT, and then gain control of the whole forest.</value>
  </data>
  <data name="T_TGTDelegation_Documentation" xml:space="preserve">
    <value>http://www.harmj0y.net/blog/redteaming/not-a-security-boundary-breaking-forest-trusts/
https://techcommunity.microsoft.com/t5/Premier-Field-Engineering/Changes-to-Ticket-Granting-Ticket-TGT-Delegation-Across-Trusts/ba-p/440283/tab/rich
https://support.microsoft.com/en-us/help/4490425/updates-to-tgt-delegation-across-incoming-trusts-in-windows-server</value>
  </data>
  <data name="T_TGTDelegation_Title" xml:space="preserve">
    <value>Check if kerberos delegation can be used to take control of the forest from a trusted forest</value>
  </data>
  <data name="T_TGTDelegation_ReportLocation" xml:space="preserve">
    <value>The detail can be found in &lt;a href="#discovereddomains"&gt;Trusts section&lt;/a&gt;</value>
  </data>
  <data name="AccountTakeOver_Detail" xml:space="preserve">
    <value>Members of administrators' groups are a priority target. By misconfiguring their protection, the password of the account can be retrieved by an attacker or it can leverage internal mechanisms of the AD such authentication to act on its behalf.</value>
  </data>
  <data name="P_Kerberoasting_Description" xml:space="preserve">
    <value>The purpose is to ensure that the password of admin accounts cannot be retrieved using the kerberoast attack.</value>
  </data>
  <data name="P_Kerberoasting_Solution" xml:space="preserve">
    <value>If the account is a service account, the service should be removed from the privileged group or have a process to change it at a regular basis.
If the user is a person, the SPN attribute of the account should be removed.</value>
  </data>
  <data name="P_Kerberoasting_Rationale" xml:space="preserve">
    <value>At least one member of an admin group is vulnerable to the kerberoast attack.</value>
  </data>
  <data name="P_Kerberoasting_Detail" xml:space="preserve">
    <value>Group: {0} User: {1}</value>
  </data>
  <data name="P_Kerberoasting_TechnicalExplanation" xml:space="preserve">
    <value>To access a service using kerberos, a user does request a ticket (named TGS) to the DC specific to the service.
However this ticket is encrypted using a derivative of the service password. This ticket can then be brute-forced to retrieve the original password.
Any account having the attribute SPN populated is considered as a service account.
Given the fact that any user can request a ticket for service account, these accounts can have their password retrieved.
In addition, services are known to have their password not changed at a regular basis and to use well-known words.

Please note that this program skips service accounts having their password changed for less than 40 days ago to allow a mitigation using a password change process.</value>
  </data>
  <data name="P_Kerberoasting_Documentation" xml:space="preserve">
    <value>https://adsecurity.org/?p=3466</value>
  </data>
  <data name="P_Kerberoasting_Title" xml:space="preserve">
    <value>Check if admin accounts are vulnerable to the kerberoast attack.</value>
  </data>
  <data name="P_Kerberoasting_ReportLocation" xml:space="preserve">
    <value>The detail can be found in &lt;a href="#admingroups"&gt;Admin Groups&lt;/a&gt;</value>
  </data>
  <data name="P_DNSDelegation_Description" xml:space="preserve">
    <value>The purpose is to ensure that no specific delegation has been setup to manage the Microsoft DNS.</value>
  </data>
  <data name="P_DNSDelegation_Solution" xml:space="preserve">
    <value>You should remove the explicit write delegation located in the CN=MicrosoftDNS,CN=System container and do a proper delegation.
    First, grant only "Read Property", "List", "List object" and "Read permssions" to CN=MicrosoftDNS,CN=System to enable access to the RPC service.
  Then on each zone (the object in the tree below with the class dnsZone), grant "Read Property", "List", "List object", "Read permissions", "Create Child", "Delete Child", "Delete", "Delete Tree".</value>
  </data>
  <data name="P_DNSDelegation_Rationale" xml:space="preserve">
    <value>An explicit delegation has been put in place to manage the Microsoft DNS service.</value>
  </data>
  <data name="P_DNSDelegation_Detail" xml:space="preserve">
    <value>Account: {0} Right: {1}</value>
  </data>
  <data name="P_DNSDelegation_TechnicalExplanation" xml:space="preserve">
    <value>Administrators of the DNS Service have the possibility to inject a DLL in this service.
However this service is hosted most of the time in the domain controller and is running as system.
That means that DNS Admins are potentially domain admins.

The security descriptor used to grant admin rights is located on the nTSecurityDescriptor attribute of the object CN=MicrosoftDNS,CN=System.
The "Write All Prop" access right induces the vulnerability.

In this case, an explicit delegation has been setup and this delegation is not using the existing DnsAdmins group.</value>
  </data>
  <data name="P_DNSDelegation_Documentation" xml:space="preserve">
    <value>https://medium.com/@esnesenon/feature-not-bug-dnsadmin-to-dc-compromise-in-one-line-a0f779b8dc83
https://docs.microsoft.com/en-us/openspecs/windows_protocols/ms-dnsp/007efcd2-2955-46dd-a59e-f83ae88f4678</value>
  </data>
  <data name="P_DNSDelegation_Title" xml:space="preserve">
    <value>Check if there is an explicit delegation on DNS servers.</value>
  </data>
  <data name="P_DNSDelegation_ReportLocation" xml:space="preserve">
    <value>The detail can be found in &lt;a href="#admindelegation"&gt;Delegations&lt;/a&gt;</value>
  </data>
  <data name="P_TrustedCredManAccessPrivilege_Description" xml:space="preserve">
    <value>The purpose is to ensure that there is no assignment of the SeTrustedCredManAccessPrivilege privilege.</value>
  </data>
  <data name="P_TrustedCredManAccessPrivilege_Solution" xml:space="preserve">
    <value>You should edit the GPO and remove the GPO right assignment.
    
The setting is located in Computer Policy -&gt; Computer Configuration -&gt; Windows Settings -&gt; Security Settings -&gt; Local Policies -&gt; User Rights Assignment.</value>
  </data>
  <data name="P_TrustedCredManAccessPrivilege_Rationale" xml:space="preserve">
    <value>The privilege "Access Credential Manager as a trusted caller user right" has been explicitly granted.</value>
  </data>
  <data name="P_TrustedCredManAccessPrivilege_Detail" xml:space="preserve">
    <value>GPO: {0} User: {1}</value>
  </data>
  <data name="P_TrustedCredManAccessPrivilege_TechnicalExplanation" xml:space="preserve">
    <value>The Credential Manger is a vault where credentials are being stored.
This privilege can be used to retrieve the secret data.

Please note that, as today, there is no public POC published to exploit this privilege and no supported API needing that privilege.
    </value>
  </data>
  <data name="P_TrustedCredManAccessPrivilege_Documentation" xml:space="preserve">
    <value>https://docs.microsoft.com/en-us/windows/win32/secauthn/credentials-management
https://docs.microsoft.com/en-us/windows/win32/secauthn/authentication-functions#credentials-management-functions</value>
  </data>
  <data name="P_TrustedCredManAccessPrivilege_Title" xml:space="preserve">
    <value>Check if there is the privilege Access Credential Manager as a trusted caller user right has been explicitly granted.</value>
  </data>
  <data name="P_TrustedCredManAccessPrivilege_ReportLocation" xml:space="preserve">
    <value>The detail can be found in &lt;a href="#gpoprivileges"&gt;Privileges&lt;/a&gt;</value>
  </data>
  <data name="P_LogonDenied_Description" xml:space="preserve">
    <value>The purpose is to ensure that there is a tier isolation.</value>
  </data>
  <data name="P_LogonDenied_Solution" xml:space="preserve">
    <value>You should add a GPO prohibing the logon for the specific group: Domain Admins and Administrators.
    
The setting is located in Computer Policy -&gt; Computer Configuration -&gt; Windows Settings -&gt; Security Settings -&gt; Local Policies -&gt; User Rights Assignment.
Then Deny log on locally and Deny logon through Remote Desktop Services.</value>
  </data>
  <data name="P_LogonDenied_Rationale" xml:space="preserve">
    <value>No GPO preventing the logon of administrators has been found.</value>
  </data>
  <data name="P_LogonDenied_Detail" xml:space="preserve">
    <value />
  </data>
  <data name="P_LogonDenied_TechnicalExplanation" xml:space="preserve">
    <value>A way to collect an administrator credential is to take control of a workstation in the unsecure tiers and expect that an administrator will connect to it.
    An attack such as credential theft or kerberos delegation is then performed.
    To reduce the impact of such compromise, the best practice is to isolate components (such as admins, DC) in tiers.
    Typically, a domain admin should not be allowed to connect to any workstation but login only to perform highly privileged operations.
    
    To check for this policy, PingCastle looks at all GPO and check if there is a GPO denying logon (SeDenyRemoteInteractiveLogonRight, SeDenyInteractiveLogonRight) of admins (Domain Admins or Administrators) to a specific scope.
    
    False positives can occurs for this rule:
    * if the expected GPO is hidden due to ACL checks
    * if the targeted group is not "checked" when saving the GPO. Indeed the group will be saved as is without a convertion to its technical name and it will prohibit a match if there are groups internationalized, aka renamed given a specific language.
    
    As a consequence, only one deny policy on one group will fulfill this requirements. The program also do not check if the GPO is applied on an Organizational Unit or a Container.
    Also this rule is enforced only if there is more than 200 users and 200 computers.
    </value>
  </data>
  <data name="P_LogonDenied_Documentation" xml:space="preserve">
    <value>https://docs.microsoft.com/en-us/windows-server/identity/ad-ds/plan/security-best-practices/appendix-f--securing-domain-admins-groups-in-active-directory</value>
  </data>
  <data name="P_LogonDenied_Title" xml:space="preserve">
    <value>Check if there is a policy preventing administrators to connect to unsecured workstations.</value>
  </data>
  <data name="P_LogonDenied_ReportLocation" xml:space="preserve">
    <value>The detail can be found in &lt;a href="#gpologin"&gt;GPO Login&lt;/a&gt;</value>
  </data>
  <data name="P_ControlPathIndirectEveryone_Description" xml:space="preserve">
    <value>The purpose is to ensure that there is no control path involving everyone.</value>
  </data>
  <data name="P_ControlPathIndirectEveryone_Solution" xml:space="preserve">
    <value>You should analyze the chart and determine which underlying object is involved and grants write permissions to everyone.
    Then edit the permissions and locate the write permission involved.
    Then delete it or replace it according to your delegation model.</value>
  </data>
  <data name="P_ControlPathIndirectEveryone_Rationale" xml:space="preserve">
    <value>Everyone can take control of a key domain object by abusing targeted permissions.</value>
  </data>
  <data name="P_ControlPathIndirectEveryone_Detail" xml:space="preserve">
    <value>Group: {0}</value>
  </data>
  <data name="P_ControlPathIndirectEveryone_TechnicalExplanation" xml:space="preserve">
    <value>
      If you have access to a key server and the helpdesk can reset your password, then the helpdesk has access to the key server.
This is the kind of logic used by hackers to take control of the domain using key infrastructure objects (domain root, ...) or groups (domain administrators, ...).
Permissions are collected and analyzed to produce a control paths analysis.
Only write permissions (and specific ones) are used for this analysis.
Then the program identifies which users or computers, that are not members of known groups, can take control of this object.
To be fast, some tradeoffs have been selected. For example, logged on users on servers are ignored.
The program may also select paths which are not exploitable and ignore paths if it cannot read every permissions.
[Everyone] includes the anonymous, everyone, authenticated users, domain users, domain computers and builtin-users groups.
    </value>
  </data>
  <data name="P_ControlPathIndirectEveryone_Documentation" xml:space="preserve">
    <value>https://github.com/BloodHoundAD/BloodHound
https://github.com/ANSSI-FR/AD-control-paths</value>
  </data>
  <data name="P_ControlPathIndirectEveryone_Title" xml:space="preserve">
    <value>Check if there is a control path involving everyone-like groups.</value>
  </data>
  <data name="P_ControlPathIndirectEveryone_ReportLocation" xml:space="preserve">
    <value>The detail can be found in &lt;a href="#controlpath"&gt;Control Paths Analysis&lt;/a&gt;</value>
  </data>
  <data name="P_ControlPathIndirectMany_Description" xml:space="preserve">
    <value>The purpose is to ensure that there is no control path involving a large number of users.</value>
  </data>
  <data name="P_ControlPathIndirectMany_Solution" xml:space="preserve">
    <value>You should analyze the chart and determine which underlying object is involved and grants too much write permissions.
    Then edit the permissions and locate the write permission involved.
    Then delete it or replace it according to your delegation model.</value>
  </data>
  <data name="P_ControlPathIndirectMany_Rationale" xml:space="preserve">
    <value>A large number of users or computers can take control of a key domain object by abusing targeted permissions.</value>
  </data>
  <data name="P_ControlPathIndirectMany_Detail" xml:space="preserve">
    <value>Group: {0} Number: {1}</value>
  </data>
  <data name="P_ControlPathIndirectMany_TechnicalExplanation" xml:space="preserve">
    <value>
      If you have access to a key server and the helpdesk can reset your password, then the helpdesk has access to the key server.
This is the kind of logic used by hackers to take control of the domain using key infrastructure objects (domain root, ...) or groups (domain administrators, ...).
Permissions are collected and analyzed to produce a control paths analysis.
Only write permissions (and specific ones) are used for this analysis.
Then the program identifies which users or computers, that are not members of known groups, can take control of this object.
To be fast, some tradeoffs have been selected. For example, logged on users on servers are ignored.
The program may also select paths which are not exploitable and ignore paths if it cannot read every permissions.
    </value>
  </data>
  <data name="P_ControlPathIndirectMany_Documentation" xml:space="preserve">
    <value>https://github.com/BloodHoundAD/BloodHound
https://github.com/ANSSI-FR/AD-control-paths</value>
  </data>
  <data name="P_ControlPathIndirectMany_Title" xml:space="preserve">
    <value>Check if there is a control path involving too much users or computers.</value>
  </data>
  <data name="P_ControlPathIndirectMany_ReportLocation" xml:space="preserve">
    <value>The detail can be found in &lt;a href="#controlpath"&gt;Control Paths Analysis&lt;/a&gt;</value>
  </data>
  <data name="A_AuditDC_Description" xml:space="preserve">
    <value>The purpose is to ensure that the audit policy on domain controllers collect the right set of events.</value>
  </data>
  <data name="A_AuditDC_Solution" xml:space="preserve">
    <value>Identify the Audit settings to apply and fix them.
    Be aware that there are two places for audit settings.
    For "Simple" audit configuration:
    in Computer Configuration -&gt; Policies -&gt; Windows Settings -&gt; Security Settings -&gt; Local Policies -&gt; Audit Policies
    For "Advanced" audit configuration:
    in Computer Configuration -&gt; Policies -&gt; Windows Settings -&gt; Security Settings -&gt; Advanced Audit Policy Configuration
    Also be sure that the audit GPO is applied to all domain controllers, as the underlying object may be in a OU where the GPO is not applied.
  </value>
  </data>
  <data name="A_AuditDC_Rationale" xml:space="preserve">
    <value>The audit policy on domain controllers does not collect key events.</value>
  </data>
  <data name="A_AuditDC_Detail" xml:space="preserve">
    <value>Type: {0} Audit: {1} Problem: {2} Rationale: {3} Domain controller: {4}</value>
  </data>
  <data name="A_AuditDC_TechnicalExplanation" xml:space="preserve">
    <value>To detect and mitigate an attack, the right set of events need to be collected.
      The audit policy is a compromise between too much and too few events to collect.
      To solve this problem, the suggested audit policy from adsecurity.org is checked against the audit policy in place.
    </value>
  </data>
  <data name="A_AuditDC_Documentation" xml:space="preserve">
    <value>https://adsecurity.org/?p=3299</value>
  </data>
  <data name="A_AuditDC_Title" xml:space="preserve">
    <value>Check if there is the expected audit policy on domain controllers.</value>
  </data>
  <data name="A_AuditDC_ReportLocation" xml:space="preserve">
    <value>The detail can be found in &lt;a href="#auditsettings"&gt;Audit settings&lt;/a&gt;
    &lt;br&gt;
    The table below shows the settings that were not found as configured in GPO for a given domain controller.</value>
  </data>
  <data name="A_DCLdapsProtocol_Description" xml:space="preserve">
    <value>The purpose is to ensure that all DC don't use weak SSL protocols when acting as server.</value>
  </data>
  <data name="A_DCLdapsProtocol_Solution" xml:space="preserve">
    <value>Apply Windows updates and registry tweaks described in the documentation section to disable the weak SSL protocols.
  </value>
  </data>
  <data name="A_DCLdapsProtocol_Rationale" xml:space="preserve">
    <value>At least one DC uses a weak SSL protocol for server side purposes.</value>
  </data>
  <data name="A_DCLdapsProtocol_Detail" xml:space="preserve">
    <value>DC: {0} Protocol: {1}</value>
  </data>
  <data name="A_DCLdapsProtocol_TechnicalExplanation" xml:space="preserve">
    <value>SSL version 2 and SSL version 3 are considered weak and it is strongly advised to disable them.
    The SSL protocols in Windows is provided by the Schannel component.
The Schannel component needs to be tuned in order to not propose these weak protocols. Many guidelines to handle this problem issued by Microsoft do not talk about Schannel but rather IIS. These guidlines are quoted in the documentation section below.

PingCastle is able to check the SSL version if LDAPS is exposed. LDAPS is automatically exposed once a certificate is available for the DC and the service restarted.
Please note that PingCastle is using the native .Net SSL stack to perform this test. .Net begins to ignore these weak protocols starting the version 4.7 of the framework and as a consequence, PingCasle may miss some weak protocol detection.

To test these protocol, you can use openssl with the following commands:
openssl s_client -connect dc.domain.local:636 -ssl2
openssl s_client -connect dc.domain.local:636 -ssl3
    </value>
  </data>
  <data name="A_DCLdapsProtocol_Documentation" xml:space="preserve">
    <value>https://social.technet.microsoft.com/wiki/contents/articles/2249.windows-server-20082008r2-how-to-disable-sslv2-on-domain-controller-dsforum2wiki.aspx
https://support.microsoft.com/en-us/help/187498/how-to-disable-pct-1-0-ssl-2-0-ssl-3-0-or-tls-1-0-in-internet-informat
https://adsecurity.org/?p=376</value>
  </data>
  <data name="A_DCLdapsProtocol_Title" xml:space="preserve">
    <value>Check if LDAPS is used with weak SSL protocol.</value>
  </data>
  <data name="A_DCLdapsProtocol_ReportLocation" xml:space="preserve">
    <value>The detail can be found in &lt;a href="#domaincontrollersection"&gt;Domain controllers&lt;/a&gt;</value>
  </data>
  <data name="A_AuditPowershell_Description" xml:space="preserve">
    <value>The purpose is to ensure that Powershell logging is enabled.</value>
  </data>
  <data name="A_AuditPowershell_Solution" xml:space="preserve">
    <value>Go to Computer Configuration -&gt; Administrative Templates -&gt; Windows Components -&gt; Windows PowerShell
And enable "Turn on Module logging" and "Turn on Powershell Script Block logging"
We recommend to set "*" as the module list.
  </value>
  </data>
  <data name="A_AuditPowershell_Rationale" xml:space="preserve">
    <value>The powershell audit configuration is not fully enabled.</value>
  </data>
  <data name="A_AuditPowershell_Detail" xml:space="preserve">
    <value />
  </data>
  <data name="A_AuditPowershell_TechnicalExplanation" xml:space="preserve">
    <value>Powershell is a powerful language, also used by hackers because of this quality. Hackers are able to run programs such as mimikatz in memory using obfuscated commands such as Invoke&#8211;Mimikatz.
    Because there is no artefact on the disk, the incident response task is difficult for the forensic analysts.
    For this reason, we recommend to enable Powershell logging via a group policy, despite the fact that these security settings may be part of the workstation or server images.
    </value>
  </data>
  <data name="A_AuditPowershell_Documentation" xml:space="preserve">
    <value>https://adsecurity.org/?p=2604
https://docs.microsoft.com/en-us/powershell/scripting/wmf/whats-new/script-logging?view=powershell-6</value>
  </data>
  <data name="A_AuditPowershell_Title" xml:space="preserve">
    <value>Check if there is powershell logging enabled.</value>
  </data>
  <data name="A_AuditPowershell_ReportLocation" xml:space="preserve">
    <value>The detail can be found in &lt;a href="#lsasettings"&gt;Security settings&lt;/a&gt;</value>
  </data>
  <data name="S_OS_Vista_Description" xml:space="preserve">
    <value>The purpose is to ensure that there is no use of the obsolete and vulnerable OS Windows Vista for the workstations within the domain</value>
  </data>
  <data name="S_OS_Vista_Solution" xml:space="preserve">
    <value>In order to solve this security issue, you should upgrade all the workstations to a more recent version of Windows, starting from Windows 10. Do note that you can get the full details regarding the OS used with the following PowerShell command: &lt;i&gt;Get-ADComputer -Filter * -Property * | Format-Table Name,OperatingSystem,OperatingSystemServicePack,OperatingSystemVersion -Wrap -Auto You can replace [-Filter *] by [-Filter {OperatingSystem -Like "Windows Server*"}&lt;/i&gt;</value>
  </data>
  <data name="S_OS_Vista_Rationale" xml:space="preserve">
    <value>Presence of Windows Vista = {count}</value>
  </data>
  <data name="S_OS_Vista_Title" xml:space="preserve">
    <value>Obsolete OS (Windows Vista)</value>
  </data>
  <data name="S_OS_Vista_TechnicalExplanation" xml:space="preserve">
    <value>The Windows Vista OS is not supported any longer, as it is vulnerable to many publicly known exploits: Administrator's credentials can be captured, security protocols are weak, etc.</value>
  </data>
  <data name="S_OS_Vista_Documentation" xml:space="preserve">
    <value />
  </data>
  <data name="S_OS_Vista_ReportLocation" xml:space="preserve">
    <value>The detail can be found in &lt;a href="#operatingsystems"&gt;Operating Systems&lt;/a&gt;</value>
  </data>
  <data name="S_DC_2008_Description" xml:space="preserve">
    <value>The purpose is to ensure that there is no use of the obsolete and vulnerable OS Windows 2008 as Domain Controller within the domain</value>
  </data>
  <data name="S_DC_2008_Documentation" xml:space="preserve">
    <value>https://support.microsoft.com/en-us/help/4456235/end-of-support-for-windows-server-2008-and-windows-server-2008-r2</value>
  </data>
  <data name="S_DC_2008_Rationale" xml:space="preserve">
    <value>Presence of Windows 2008 as DC = {count}</value>
  </data>
  <data name="S_DC_2008_ReportLocation" xml:space="preserve">
    <value>The operating system of domain controllers can be found in &lt;a href="#domaincontrollersection"&gt;Domain controllers&lt;/a&gt;</value>
  </data>
  <data name="S_DC_2008_Solution" xml:space="preserve">
    <value>To resolve this security risk, the only way is to decommission DC running Windows 2008 OS, in order to use new versions that are more secured and that are still being patched regarding new security threats</value>
  </data>
  <data name="S_DC_2008_TechnicalExplanation" xml:space="preserve">
    <value>The OS Windows 2008 is not supported anymore by Microsoft (except when migrated to Azure) and any vulnerability found will not be patched unless an expensive support contrat has been purchased.</value>
  </data>
  <data name="S_DC_2008_Title" xml:space="preserve">
    <value>Obsolete Domain Controller (Windows 2008)</value>
  </data>
  <data name="S_OS_2008_Description" xml:space="preserve">
    <value>The purpose is to ensure that there is no use of the obsolete and vulnerable OS Windows 2008 for the workstations within the domain</value>
  </data>
  <data name="S_OS_2008_Documentation" xml:space="preserve">
    <value>https://support.microsoft.com/en-us/help/4456235/end-of-support-for-windows-server-2008-and-windows-server-2008-r2</value>
  </data>
  <data name="S_OS_2008_Rationale" xml:space="preserve">
    <value>Presence of Windows 2008 = {count}</value>
  </data>
  <data name="S_OS_2008_ReportLocation" xml:space="preserve">
    <value>The detail can be found in &lt;a href="#operatingsystems"&gt;Operating Systems&lt;/a&gt;</value>
  </data>
  <data name="S_OS_2008_Solution" xml:space="preserve">
    <value>In order to solve this security issue, you should upgrade all the servers to a more recent version of Windows, starting from Windows 2012. Do note that you can get the full details regarding the OS used with the following PowerShell command: &lt;i&gt;Get-ADComputer -Filter * -Property * | Format-Table Name,OperatingSystem,OperatingSystemServicePack,OperatingSystemVersion -Wrap -Auto You can replace [-Filter *] by [-Filter {OperatingSystem -Like "Windows Server*"}&lt;/i&gt;</value>
  </data>
  <data name="S_OS_2008_TechnicalExplanation" xml:space="preserve">
    <value>The Windows 2008 OS is not supported any longer, as it is vulnerable to many publicly known exploits: Administrator's credentials can be captured, security protocols are weak, etc.</value>
  </data>
  <data name="S_OS_2008_Title" xml:space="preserve">
    <value>Obsolete OS (Windows 2008)</value>
  </data>
  <data name="A_CertROCA_Description" xml:space="preserve">
    <value>The purpose is to ensure that there is no private key that can be recovered from a certificate</value>
  </data>
  <data name="A_CertROCA_Documentation" xml:space="preserve">
    <value>https://crocs.fi.muni.cz/public/papers/rsa_ccs17
https://github.com/crocs-muni/roca
https://portal.msrc.microsoft.com/en-US/security-guidance/advisory/ADV190026
https://portal.msrc.microsoft.com/en-US/security-guidance/advisory/ADV170012
https://keychest.net/roca</value>
  </data>
  <data name="A_CertROCA_Rationale" xml:space="preserve">
    <value>At least one private key associated to a certificate can be recovered</value>
  </data>
  <data name="A_CertROCA_ReportLocation" xml:space="preserve">
    <value>The detail can be found in &lt;a href="#certificates"&gt;Certificates&lt;/a&gt;</value>
  </data>
  <data name="A_CertROCA_Solution" xml:space="preserve">
    <value>If the certificates listed below are still valid, you have to revoke and re-issue them. If other certificates depends on them, they should be revoked and replaced too.
    If the certificates have been expired, they should be removed.</value>
  </data>
  <data name="A_CertROCA_TechnicalExplanation" xml:space="preserve">
    <value>"ROCA" is an acronym for "Return of Coppersmith's attack" which enables an attacker to retrieve the private key from a public key.
    It is due by a library named RSALib, provided by Infineon Technologies which is incorporated into many smart cards, Trusted Platform Module (TPM), and Hardware Security Modules (HSM) implementations, including YubiKey 4 tokens and used to generate public RSA keys.
  This library was generating data in a limited number space, which decreased the number of values that an attacker has to guess.</value>
  </data>
  <data name="A_CertROCA_Title" xml:space="preserve">
    <value>Check for the ROCA vulnerability in certificates</value>
  </data>
  <data name="A_CertROCA_Detail" xml:space="preserve">
    <value>Source: {0} Subject: {1} Expires: {2}</value>
  </data>
  <data name="A_CertWeakDSA_Description" xml:space="preserve">
    <value>The purpose is to ensure that there is no use of a certificate using a DSA key for signature</value>
  </data>
  <data name="A_CertWeakDSA_Detail" xml:space="preserve">
    <value>GPO: {0} Subject: {1}</value>
  </data>
  <data name="A_CertWeakDSA_Documentation" xml:space="preserve">
    <value>https://csrc.nist.gov/publications/detail/fips/186/5/draft</value>
  </data>
  <data name="A_CertWeakDSA_Rationale" xml:space="preserve">
    <value>At least one trusted certificate found has a DSA key [{count}]</value>
  </data>
  <data name="A_CertWeakDSA_ReportLocation" xml:space="preserve">
    <value>The detail can be found in &lt;a href="#certificates"&gt;Certificates&lt;/a&gt;</value>
  </data>
  <data name="A_CertWeakDSA_Solution" xml:space="preserve">
    <value>To solve the matter, the certificate should be removed from the GPO and if needed, certificates depending on it should be reissued.</value>
  </data>
  <data name="A_CertWeakDSA_TechnicalExplanation" xml:space="preserve">
    <value>Digital Signature Algorithm (DSA), is a NIST standard signature algorithm, part of the 1993 Digital Signature Standard(FIPS 186). The proposed FIPS 186-5 draft deprecates the use of DSA and will forbid its usage for digital signature purposes.
    The annex E of FIPS 186-5 specifies: DSA is no longer approved for digital signature generation. DSA may be used to verify signatures generated prior to the implementation date of this standard.</value>
  </data>
  <data name="A_CertWeakDSA_Title" xml:space="preserve">
    <value>Check for Certificates using the DSA algorithm for signature</value>
  </data>
  <data name="A_CertWeakRsaComponent_Description" xml:space="preserve">
    <value>The purpose is to ensure that there is no use of a certificate with a weak RSA exponent</value>
  </data>
  <data name="A_CertWeakRsaComponent_Detail" xml:space="preserve">
    <value>GPO: {0} Subject: {1} Exponent: {2}</value>
  </data>
  <data name="A_CertWeakRsaComponent_Documentation" xml:space="preserve">
    <value />
  </data>
  <data name="A_CertWeakRsaComponent_Rationale" xml:space="preserve">
    <value>At least one trusted certificate found has a weak RSA exponent [{count}]</value>
  </data>
  <data name="A_CertWeakRsaComponent_ReportLocation" xml:space="preserve">
    <value>The detail can be found in &lt;a href="#certificates"&gt;Certificates&lt;/a&gt;</value>
  </data>
  <data name="A_CertWeakRsaComponent_Solution" xml:space="preserve">
    <value>To solve the matter, the certificate should be removed from the GPO and if needed, certificates depending on it should be reissued.</value>
  </data>
  <data name="A_CertWeakRsaComponent_TechnicalExplanation" xml:space="preserve">
    <value>The RSA public key is composed of two parts: the modulus and the exponent. The exponent has to be a prime number and its value is usually 65537.
    It is not recommended to have a exponent larger than 65537 for compatibility reasons as for example older Windows handle the exponent in 4 bytes.
  Having a lower exponent, such as 3, give a significant performance boost (up to 8 times), but it is considered less secure.</value>
  </data>
  <data name="A_CertWeakRsaComponent_Title" xml:space="preserve">
    <value>Check for Certificates using a weak RSA exponent</value>
  </data>
  <data name="A_WeakRSARootCert2_Description" xml:space="preserve">
    <value>The purpose is to ensure that there is no use of a certificate using a relatively weak RSA key</value>
  </data>
  <data name="A_WeakRSARootCert2_Detail" xml:space="preserve">
    <value>Source: {0} Subject: {1} Module: {2} Expires: {3}</value>
  </data>
  <data name="A_WeakRSARootCert2_Documentation" xml:space="preserve">
    <value>https://www.iad.gov/iad/library/ia-guidance/ia-solutions-for-classified/algorithm-guidance/commercial-national-security-algorithm-suite-factsheet.cfm
    https://www.ssi.gouv.fr/guide/cryptographie-les-regles-du-rgs/</value>
  </data>
  <data name="A_WeakRSARootCert2_Rationale" xml:space="preserve">
    <value>At least one trusted certificate found has a relatively weak RSA key [{count}]</value>
  </data>
  <data name="A_WeakRSARootCert2_ReportLocation" xml:space="preserve">
    <value>The detail can be found in &lt;a href="#certificates"&gt;Certificates&lt;/a&gt;</value>
  </data>
  <data name="A_WeakRSARootCert2_Solution" xml:space="preserve">
    <value>To solve the matter, the certificate should be removed from the GPO and if needed, certificates depending on it should be reissued.
    
    Please note that this rule is the companion of the rule A-WeakRSARootCert which checks for unsecured certificates (key lower than 1024 bits).</value>
  </data>
  <data name="A_WeakRSARootCert2_TechnicalExplanation" xml:space="preserve">
    <value>A RSA key certificate with a modulus under 1024 bits is considered as not safe. This is checked by the rule A-WeakRSARootCert.
    This rule checks for certificates having a key under 2048 bits which is considered as having a lower level of security and under 3072 bits for certificates valid after 2030.</value>
  </data>
  <data name="A_WeakRSARootCert2_Title" xml:space="preserve">
    <value>Check for Certificates using a relatively weak signing algorithm (RSA between 1024 bits and 2048)</value>
  </data>
  <data name="A_DsHeuristicsAllowAnonNSPI_Description" xml:space="preserve">
    <value>The purpose is to identify domains having the NSPI protocol exposed without any required account</value>
  </data>
  <data name="A_DsHeuristicsAllowAnonNSPI_Documentation" xml:space="preserve">
    <value>https://docs.microsoft.com/en-us/openspecs/windows_protocols/ms-adts/e5899be4-862e-496f-9a38-33950617d2c5
https://docs.microsoft.com/en-us/openspecs/windows_protocols/ms-nspi/6dd0a3ea-b4d4-4a73-a857-add03a89a543</value>
  </data>
  <data name="A_DsHeuristicsAllowAnonNSPI_Rationale" xml:space="preserve">
    <value>DsHeuristics has been set to allow anonymous access to the NSPI protocol</value>
  </data>
  <data name="A_DsHeuristicsAllowAnonNSPI_Solution" xml:space="preserve">
    <value>The easiest and fastest way to correct this issue is to &lt;b&gt;replace the eighth (8th) character of the DsHeuristics attribute&lt;/b&gt;. If it is not a 0, replace by 0 to fix the issue.</value>
  </data>
  <data name="A_DsHeuristicsAllowAnonNSPI_TechnicalExplanation" xml:space="preserve">
    <value>The way an Active Directory behaves can be controlled via the attribute &lt;i&gt;DsHeuristics&lt;/i&gt; of &lt;i&gt;CN=Directory Service,CN=Windows NT,CN=Services,CN=Configuration&lt;/i&gt;. A parameter stored in its attribute and whose value is &lt;i&gt;fAllowAnonNSPI&lt;/i&gt; can be set to allow access to the NSPI protocol without any account.
The NSPI protocol is used internally by Exchange to resolve addresses, and thus can be used to dump all the users of the forest. It can be exposed to the internet via RPC over HTTP.</value>
  </data>
  <data name="A_DsHeuristicsAllowAnonNSPI_Title" xml:space="preserve">
    <value>Check for access without any account to the Name Service Provider Interface (NSPI) protocol</value>
  </data>
  <data name="P_RODCAllowedGroup_Description" xml:space="preserve">
    <value>The purpose is to ensure that the Allowed RODC Password Replication Group group is empty.</value>
  </data>
  <data name="P_RODCAllowedGroup_Detail" xml:space="preserve">
    <value>Member: {0}</value>
  </data>
  <data name="P_RODCAllowedGroup_Documentation" xml:space="preserve">
    <value />
  </data>
  <data name="P_RODCAllowedGroup_Rationale" xml:space="preserve">
    <value>The Allowed RODC Password Replication Group group is not empty</value>
  </data>
  <data name="P_RODCAllowedGroup_ReportLocation" xml:space="preserve">
    <value />
  </data>
  <data name="P_RODCAllowedGroup_Solution" xml:space="preserve">
    <value>This group should be emptied, and dedicated groups should only be added to the Password Replication Policy of each relevant RODC.</value>
  </data>
  <data name="P_RODCAllowedGroup_TechnicalExplanation" xml:space="preserve">
    <value>Accounts belonging to the Allowed RODC Password Replication Group group have their password hashes revealed on all RODCs.</value>
  </data>
  <data name="P_RODCAllowedGroup_Title" xml:space="preserve">
    <value>Check the Allowed RODC Password Replication Group group</value>
  </data>
  <data name="P_RODCDeniedGroup_Description" xml:space="preserve">
    <value>The purpose is to ensure that the Denied RODC Password Replication Group group has at least its default members.</value>
  </data>
  <data name="P_RODCDeniedGroup_Detail" xml:space="preserve">
    <value>Missing: {0}</value>
  </data>
  <data name="P_RODCDeniedGroup_Documentation" xml:space="preserve">
    <value>https://docs.microsoft.com/en-us/services-hub/health/remediation-steps-ad/review-the-removal-of-default-members-from-the-denied-rodc-password-replication-group</value>
  </data>
  <data name="P_RODCDeniedGroup_Rationale" xml:space="preserve">
    <value>The Denied RODC Password Replication Group group has some of its default members missing</value>
  </data>
  <data name="P_RODCDeniedGroup_ReportLocation" xml:space="preserve">
    <value />
  </data>
  <data name="P_RODCDeniedGroup_Solution" xml:space="preserve">
    <value>Add the items which have been identified as missing to the Denied RODC Password Replication Group group.
    </value>
  </data>
  <data name="P_RODCDeniedGroup_TechnicalExplanation" xml:space="preserve">
    <value>A set of critical objects are being forbidden to replicate in RODC for security reasons.
    This permission is set using the Denied RODC Password Replication Group group.
    Removing one of the default members of this group remove this protection, and thus, the isolation of RODC.</value>
  </data>
  <data name="P_RODCDeniedGroup_Title" xml:space="preserve">
    <value>Check the Denied RODC Password Replication Group group</value>
  </data>
  <data name="A_NTFRSOnSysvol_Description" xml:space="preserve">
    <value>The purpose is to ensure that the old NTFRS protocol is not used to replicate the SYSVOL share.</value>
  </data>
  <data name="A_NTFRSOnSysvol_Detail" xml:space="preserve">
    <value />
  </data>
  <data name="A_NTFRSOnSysvol_Documentation" xml:space="preserve">
    <value>https://docs.microsoft.com/en-us/windows-server/storage/dfs-replication/migrate-sysvol-to-dfsr
https://support.microsoft.com/en-us/help/312862/recovering-missing-frs-objects-and-frs-attributes-in-active-directory
https://docs.microsoft.com/en-us/openspecs/windows_protocols/ms-frs1/d18cc589-677e-4133-97e5-113641792c5e
https://docs.microsoft.com/en-us/troubleshoot/windows-server/networking/sysvol-dfsr-migration-fails-after-in-place-upgrade</value>
  </data>
  <data name="A_NTFRSOnSysvol_Rationale" xml:space="preserve">
    <value>The old protocol NTFRS is used to replicate the SYSVOL share</value>
  </data>
  <data name="A_NTFRSOnSysvol_ReportLocation" xml:space="preserve">
    <value />
  </data>
  <data name="A_NTFRSOnSysvol_Solution" xml:space="preserve">
    <value>You have to migrate from NTFRS to DFS replication. See the documentation below for more details.
    </value>
  </data>
  <data name="A_NTFRSOnSysvol_TechnicalExplanation" xml:space="preserve">
    <value>NTFRS is an old protocol and is not considered as secure.
    The SYSVOL share is mainly hosted on domain controllers to host GPO files and login scripts.
  If the content can be modified, it can be used to grant to an hacker the control of the computers reading these configuration files.
To know if the setting is enabled, PingCastle read the following LDAP entry: CN=Domain System Volume (SYSVOL share),CN=File Replication Service,CN=System
If there is any entry found, the program consider that NTFRS is in use for SYSVOL replication.

Starting in Windows Server 2019, promoting new domain controllers requires the DFS Replication (DFSR) to replicate the contents in the SYSVOL share.
As a consequence this rule become informative if at least one Windows 2019 or more recent is installed as a Domain Controller.

Please note that at the time of writing, Microsoft supports it until Windows 2022 (see the Open Specification link in the documentation section below)
</value>
  </data>
  <data name="A_NTFRSOnSysvol_Title" xml:space="preserve">
    <value>Check if NTFRS is used to replicate SYSVOL</value>
  </data>
  <data name="A_DnsZoneUpdate1_Description" xml:space="preserve">
    <value>The purpose is to ensure that the DNS Zones are configured to accept only secure update.</value>
  </data>
  <data name="A_DnsZoneUpdate1_Detail" xml:space="preserve">
    <value>Zone: {0}</value>
  </data>
  <data name="A_DnsZoneUpdate1_Documentation" xml:space="preserve">
    <value>https://docs.microsoft.com/en-us/openspecs/windows_protocols/ms-dnsp/f97756c9-3783-428b-9451-b376f877319a
    https://docs.microsoft.com/en-us/windows-server/administration/windows-commands/dnscmd</value>
  </data>
  <data name="A_DnsZoneUpdate1_Rationale" xml:space="preserve">
    <value>A DNS Zone is configured with unsecure updates</value>
  </data>
  <data name="A_DnsZoneUpdate1_ReportLocation" xml:space="preserve">
    <value />
  </data>
  <data name="A_DnsZoneUpdate1_Solution" xml:space="preserve">
    <value>You have to enable secure updates. 
    Identify the faulty zone in the details below.
    Go to the DNS console and select a zone in the "Forward Lookup Zones".
    Right click on it and switch to the "General" tab.
    Then change Dynamic updates from "Nonsecure and secure" to "Secure only".
    You can also run: dnscmd servername /Config zone /AllowUpdate 2
    </value>
  </data>
  <data name="A_DnsZoneUpdate1_TechnicalExplanation" xml:space="preserve">
    <value>When the unsecure update mechanism is enabled, an attacker can update a DNS record anonymously.
    He can then use this feature to add new entries or perform a man in the middle attack to capture credentials.
  
    Please note that the rule A-DnsZoneUpdate1 is the companion of A-DnsZoneUpdate2 and it is used to report anomalies related to the local domain zone or the main _msdcs zone. A-DnsZoneUpdate2 reports all the other zones.
    </value>
  </data>
  <data name="A_DnsZoneUpdate1_Title" xml:space="preserve">
    <value>Check if DNS Zones are configured with unsecure update.</value>
  </data>
  <data name="A_DnsZoneUpdate2_Description" xml:space="preserve">
    <value>The purpose is to ensure that the DNS Zones are configured to accept only secure update.</value>
  </data>
  <data name="A_DnsZoneUpdate2_Detail" xml:space="preserve">
    <value>Zone: {0}</value>
  </data>
  <data name="A_DnsZoneUpdate2_Documentation" xml:space="preserve">
    <value>https://docs.microsoft.com/en-us/openspecs/windows_protocols/ms-dnsp/f97756c9-3783-428b-9451-b376f877319a
    https://docs.microsoft.com/en-us/windows-server/administration/windows-commands/dnscmd</value>
  </data>
  <data name="A_DnsZoneUpdate2_Rationale" xml:space="preserve">
    <value>A DNS Zone is configured with unsecure updates</value>
  </data>
  <data name="A_DnsZoneUpdate2_ReportLocation" xml:space="preserve">
    <value />
  </data>
  <data name="A_DnsZoneUpdate2_Solution" xml:space="preserve">
    <value>You have to enable secure updates. 
    Identify the faulty zone in the details below.
    Go to the DNS console and select a zone in the "Forward Lookup Zones".
    Right click on it and switch to the "General" tab.
    Then change Dynamic updates from "Nonsecure and secure" to "Secure only".
    You can also run: dnscmd servername /Config zone /AllowUpdate 2
    </value>
  </data>
  <data name="A_DnsZoneUpdate2_TechnicalExplanation" xml:space="preserve">
    <value>When the unsecure update mechanism is enabled, an attacker can update a DNS record anonymously.
    He can then use this feature to add new entries or perform a man in the middle attack to capture credentials.
  
    Please note that the rule A-DnsZoneUpdate1 is the companion of A-DnsZoneUpdate2 and it is used to report anomalies related to the local domain zone or the main _msdcs zone. A-DnsZoneUpdate2 reports all the other zones.
    </value>
  </data>
  <data name="A_DnsZoneUpdate2_Title" xml:space="preserve">
    <value>Check if DNS Zones are configured with unsecure update.</value>
  </data>
  <data name="S_DC_Inactive_Description" xml:space="preserve">
    <value>The purpose is to ensure that every DC is active.</value>
  </data>
  <data name="S_DC_Inactive_Detail" xml:space="preserve">
    <value>Domain controller: {0}</value>
  </data>
  <data name="S_DC_Inactive_Documentation" xml:space="preserve">
    <value>https://docs.microsoft.com/en-us/windows-server/identity/ad-ds/deploy/demoting-domain-controllers-and-domains--level-200-</value>
  </data>
  <data name="S_DC_Inactive_Rationale" xml:space="preserve">
    <value>Number of DC inactive: {count}</value>
  </data>
  <data name="S_DC_Inactive_ReportLocation" xml:space="preserve">
    <value>The detail can be found in &lt;a href="#domaincontrollersection"&gt;Domain controllers&lt;/a&gt;</value>
  </data>
  <data name="S_DC_Inactive_Solution" xml:space="preserve">
    <value>You have to demote the DC object using the procedure referenced in the documentation section.
    </value>
  </data>
  <data name="S_DC_Inactive_TechnicalExplanation" xml:space="preserve">
    <value>Domain Controllers are user accounts with powerfull privileges.
    While an active Domain Controller change its password every 30 days, an inactive account can be involved in a domain compromise.
    Indeed, another account, which have rights over this object, may reset the password of this account without being noticed.
    </value>
  </data>
  <data name="S_DC_Inactive_Title" xml:space="preserve">
    <value>Check if all DC are active.</value>
  </data>
  <data name="S_PwdLastSet_DC_Description" xml:space="preserve">
    <value>The purpose is to ensure that the regular change of computer account is active on Domain Controllers.</value>
  </data>
  <data name="S_PwdLastSet_DC_Detail" xml:space="preserve">
    <value>Domain controller: {0} LastChange: {1}</value>
  </data>
  <data name="S_PwdLastSet_DC_Documentation" xml:space="preserve">
    <value>https://support.microsoft.com/en-us/help/154501/how-to-disable-automatic-machine-account-password-changes</value>
  </data>
  <data name="S_PwdLastSet_DC_Rationale" xml:space="preserve">
    <value>Number of DC without password change: {count}</value>
  </data>
  <data name="S_PwdLastSet_DC_ReportLocation" xml:space="preserve">
    <value>The detail can be found in &lt;a href="#domaincontrollersection"&gt;Domain controllers&lt;/a&gt;</value>
  </data>
  <data name="S_PwdLastSet_DC_Solution" xml:space="preserve">
    <value>
      Some security agencies report the absence of password change as an indicator of compromise.
      
      If it is not the case, check the following registry keys:
* HKLM\System\CurrentControlSet\Services\Netlogon\Parameters\DisablePasswordChange: must be set to 0 or inexistent;
* HKLM\System\CurrentControlSet\Services\Netlogon\Parameters\MaximumPasswordAge: must be set to 30.
    </value>
  </data>
  <data name="S_PwdLastSet_DC_TechnicalExplanation" xml:space="preserve">
    <value>By default, each computers change automatically its password every 30 days. This is the same case for domain controllers.
    Changing regularly secrets like passwords ensures that they are not used in side channel attacks.
    For exemple, using DCSync to export the hash of a domain controller password, then reusing it in a silver attack to create kerberos tickets.
    
    This audit program considers this as an anomaly after 45 days.
    </value>
  </data>
  <data name="S_PwdLastSet_DC_Title" xml:space="preserve">
    <value>Check if all DC are using regular password change pratices.</value>
  </data>
  <data name="T_SIDHistoryDangerous_Description" xml:space="preserve">
    <value>The purpose is to ensure that the dangerous SID are not stored in the SIDHistory attribute.</value>
  </data>
  <data name="T_SIDHistoryDangerous_Detail" xml:space="preserve">
    <value>Domain: {0}</value>
  </data>
  <data name="T_SIDHistoryDangerous_Documentation" xml:space="preserve">
    <value>https://support.microsoft.com/en-us/help/243330/well-known-security-identifiers-in-windows-operating-systems</value>
  </data>
  <data name="T_SIDHistoryDangerous_Rationale" xml:space="preserve">
    <value>Number of dangerous SID in SIDHistory: {count}</value>
  </data>
  <data name="T_SIDHistoryDangerous_ReportLocation" xml:space="preserve">
    <value>The SIDHistory detail can be found in &lt;a href="#useraccountanalysis"&gt;User information&lt;/a&gt; and &lt;a href="#computeraccountanalysis"&gt;Computer information&lt;/a&gt; and a quick summary in &lt;a href="#sidhistory"&gt;SID History&lt;/a&gt;</value>
  </data>
  <data name="T_SIDHistoryDangerous_Solution" xml:space="preserve">
    <value>
      Identify the account, computer or group having these dangerous SID set in SID History, then clean it up by editing directly the SIDHistory attribute of the underlying AD object.
    </value>
  </data>
  <data name="T_SIDHistoryDangerous_TechnicalExplanation" xml:space="preserve">
    <value>SID History is an attribute used in migration to link with a former account.
    This rule checks for SID not coming from a former domain (such as SYSTEM) or from a former domain but having a RID (the last part of the SID) lower than 1000.
    Indeed, native privileged accounts have a SID lower than 1000.
    A list of Well Known SID is referenced in the documentation below.
    </value>
  </data>
  <data name="T_SIDHistoryDangerous_Title" xml:space="preserve">
    <value>Check if dangerous SID are stored in the SIDHistory attribute.</value>
  </data>
  <data name="S_PwdNeverExpires_Description" xml:space="preserve">
    <value>The purpose is to ensure that every account has a password which is compliant with password expiration policies</value>
  </data>
  <data name="S_PwdNeverExpires_Documentation" xml:space="preserve">
    <value>https://adsecurity.org/?p=4115
https://access.redhat.com/discussions/1283873</value>
  </data>
  <data name="S_PwdNeverExpires_Rationale" xml:space="preserve">
    <value>Number of accounts which has never-expiring passwords: {count}</value>
  </data>
  <data name="S_PwdNeverExpires_ReportLocation" xml:space="preserve">
    <value>The detail can be found in &lt;a href="#useraccountanalysis"&gt;User information&lt;/a&gt;</value>
  </data>
  <data name="S_PwdNeverExpires_Solution" xml:space="preserve">
    <value>In order to make Active Directory enforce periodic password change, accounts must not have the "Password never expires" flag set in the "Account" tab of the user properties. Their passwords should then be rolled immediately.
For services accounts, Windows provide the "managed service accounts" and "group managed service accounts" features to facilite the automatic change of passwords.
Please note that there is a document in the section below which references solutions for service accounts of well known products.
Also Linux servers should be configured with automatic machine account change.</value>
  </data>
  <data name="S_PwdNeverExpires_TechnicalExplanation" xml:space="preserve">
    <value>Some accounts have passwords which never expire. Should an attacker compromise one of these accounts, he would be able to maintain long-term access to the Active Directory domain.
    
We have noted that some Linux servers, domain joined, are configured with a password which never expires.
This is a misconfiguration because a password change can be configured. It was however not the default on some plateform.
See one of the link below for more information.</value>
  </data>
  <data name="S_PwdNeverExpires_Title" xml:space="preserve">
    <value>Check that there is no account with never-expiring passwords</value>
  </data>
  <data name="S_DCRegistration_Description" xml:space="preserve">
    <value>The purpose is to ensure that DC are well registered.</value>
  </data>
  <data name="S_DCRegistration_Detail" xml:space="preserve">
    <value>Domain controller: {0} Problem: {1}</value>
  </data>
  <data name="S_DCRegistration_Documentation" xml:space="preserve">
    <value>https://docs.microsoft.com/en-us/openspecs/windows_protocols/ms-adts/9164e4e8-f892-4ca2-8067-059f6f9387a4
https://docs.microsoft.com/en-us/openspecs/windows_protocols/ms-adts/8ebf2419-1169-4413-88e2-12a5ad499cf5</value>
  </data>
  <data name="S_DCRegistration_Rationale" xml:space="preserve">
    <value>Number of DC with a configuration issue: {count}</value>
  </data>
  <data name="S_DCRegistration_ReportLocation" xml:space="preserve">
    <value>The detail can be found in &lt;a href="#domaincontrollersection"&gt;Domain controllers&lt;/a&gt;</value>
  </data>
  <data name="S_DCRegistration_Solution" xml:space="preserve">
    <value>This rule result is either the result of a manual or software based misconfiguration. It can also be the sign of a compromise.
      Depending on the anonamly reported, you have to perform the following actions:
      - for InvalidUserAccount:
      you have to check that the userAccountControl attribute of the AD object is either 0x00082000 for RW DC or 0x05001000 for RODC
      - for NoConfiguration:
      the DC registration in the Configuration partition is mising. The DC should not be active and need to be demoted.
      - for NoNTDS:
      the NTDS part of the DC Configuration is missing. Most probably the replication is not working. The DC should be demoted.
    </value>
  </data>
  <data name="S_DCRegistration_TechnicalExplanation" xml:space="preserve">
    <value>To be registered as a domain controller, a computer must be a member of the domain controller group, but also has some specific settings.
The settings are a change of the userAccountControl attribute and a couple of objects in the configuration partition.
This rule is triggered when an inconsistency has been detected between the expected values and the real values.

The user account control value for Read/Write DC is:
SERVER_TRUST_ACCOUNT (0x00002000) | TRUSTED_FOR_DELEGATION (0x00080000) = 0x00082000
The user account control value for Read Only DC is:
PARTIAL_SECRETS_ACCOUNT (0x04000000) | TRUSTED_TO_AUTHENTICATE_FOR_DELEGATION (0x01000000) | WORKSTATION_TRUST_ACCOUNT (0x00001000) = 0x05001000
</value>
  </data>
  <data name="S_DCRegistration_Title" xml:space="preserve">
    <value>Check if all DC are well registered.</value>
  </data>
  <data name="P_DelegationDCa2d2_Description" xml:space="preserve">
    <value>The purpose is to ensure that no contrained delegations are applied to DC</value>
  </data>
  <data name="P_DelegationDCa2d2_Detail" xml:space="preserve">
    <value>Domain controller: {0} Delegate: {1} Identifier: {2}</value>
  </data>
  <data name="P_DelegationDCa2d2_Documentation" xml:space="preserve">
    <value />
  </data>
  <data name="P_DelegationDCa2d2_Rationale" xml:space="preserve">
    <value>Number of DC with a contrained delegation: {count}</value>
  </data>
  <data name="P_DelegationDCa2d2_ReportLocation" xml:space="preserve">
    <value>The detail can be found in &lt;a href="#domaincontrollersection"&gt;Domain controllers&lt;/a&gt;</value>
  </data>
  <data name="P_DelegationDCa2d2_Solution" xml:space="preserve">
    <value>You should edit the msDS-AllowedToDelegateTo attribute of the accounts listed below to remove the SPN of the domain controllers involved.
    </value>
  </data>
  <data name="P_DelegationDCa2d2_TechnicalExplanation" xml:space="preserve">
    <value>A constrained delegation is a delegation with some limitation.
    In this case, it is a limitation of the technical service a delegate can call (SPN).
    But in practice, the specific service name is not checked and the delegate can impersonate anyone on all services of a computer.
    For the case of a domain controller, that means that the delegate can take the control of the domain by impersonating a domain admin and doing modifications with the LDAP service.
    This delegation is set via the attribute msDS-AllowedToDelegateTo and is limited to kerberos
    Note: this rule is a companion of the rule P-DelegationDCt2a4d
</value>
  </data>
  <data name="P_DelegationDCa2d2_Title" xml:space="preserve">
    <value>Check if all DC have no constrained delegation.</value>
  </data>
  <data name="P_DelegationDCt2a4d_Description" xml:space="preserve">
    <value>The purpose is to ensure that no contrained delegations with protocol transition are applied to DC</value>
  </data>
  <data name="P_DelegationDCt2a4d_Detail" xml:space="preserve">
    <value>Domain controller: {0} Delegate: {1} Identifier: {2}</value>
  </data>
  <data name="P_DelegationDCt2a4d_Documentation" xml:space="preserve">
    <value />
  </data>
  <data name="P_DelegationDCt2a4d_Rationale" xml:space="preserve">
    <value>Number of DC with a contrained delegation with protocol transition: {count}</value>
  </data>
  <data name="P_DelegationDCt2a4d_ReportLocation" xml:space="preserve">
    <value>The detail can be found in &lt;a href="#domaincontrollersection"&gt;Domain controllers&lt;/a&gt;</value>
  </data>
  <data name="P_DelegationDCt2a4d_Solution" xml:space="preserve">
    <value>You should edit the msDS-AllowedToDelegateTo attribute of the accounts listed below to remove the SPN of the domain controllers involved.
    </value>
  </data>
  <data name="P_DelegationDCt2a4d_TechnicalExplanation" xml:space="preserve">
    <value>A constrained delegation with protocol transition is a delegation with some limitation.
    In this case, it is a limitation of the technical service a delegate can call (SPN).
    But in practice, the specific service name is not checked and the delegate can impersonate anyone on all services of a computer.
    For the case of a domain controller, that means that the delegate can take the control of the domain by impersonating a domain admin and doing modifications with the LDAP service.
    This delegation is set via the attribute msDS-AllowedToDelegateTo.
    The protocol transition is a special feature set in the userAccountControl which does not limit the delegation to the kerberos protocol.
    Note: this rule is a companion of the rule P-DelegationDCa2d2
</value>
  </data>
  <data name="P_DelegationDCt2a4d_Title" xml:space="preserve">
    <value>Check if all DC have no constrained delegation with protocol transition.</value>
  </data>
  <data name="P_DelegationDCsourcedeleg_Description" xml:space="preserve">
    <value>The purpose is to ensure that no resource based constrained delegations are applied to DC</value>
  </data>
  <data name="P_DelegationDCsourcedeleg_Detail" xml:space="preserve">
    <value>Domain controller: {0} Delegate: {1} Identifier: {2}</value>
  </data>
  <data name="P_DelegationDCsourcedeleg_Documentation" xml:space="preserve">
    <value>https://blog.stealthbits.com/resource-based-constrained-delegation-abuse/</value>
  </data>
  <data name="P_DelegationDCsourcedeleg_Rationale" xml:space="preserve">
    <value>Number of DC with a resource based constrained delegation: {count}</value>
  </data>
  <data name="P_DelegationDCsourcedeleg_ReportLocation" xml:space="preserve">
    <value>The detail can be found in &lt;a href="#domaincontrollersection"&gt;Domain controllers&lt;/a&gt;</value>
  </data>
  <data name="P_DelegationDCsourcedeleg_Solution" xml:space="preserve">
    <value>You should edit the msDS-AllowedToDelegateToattribute attribute of the domain controllers and remove the account involved.
    You can do this with the powershell command:
    Set-ADComputer COMPUTER -PrincipalsAllowedToDelegateToAccount $Null
    </value>
  </data>
  <data name="P_DelegationDCsourcedeleg_TechnicalExplanation" xml:space="preserve">
    <value>Resource based contrained delegation are a new feature of Windows 2012 which tries to handle the limitation of Constrained delegations.
    This delegation is defined by setting the msDS-AllowedToDelegateToattribute attribute either using the GUI or a powershell command.
</value>
  </data>
  <data name="P_DelegationDCsourcedeleg_Title" xml:space="preserve">
    <value>Check if all DC have no resource based constrained delegation.</value>
  </data>
  <data name="A_PreWin2000Other_Description" xml:space="preserve">
    <value>The purpose is check that no additional account has been added to the "Pre-Windows 2000 Compatible Access" group</value>
  </data>
  <data name="A_PreWin2000Other_Documentation" xml:space="preserve">
    <value>https://msdn.microsoft.com/en-us/library/cc223672.aspx</value>
  </data>
  <data name="A_PreWin2000Other_Rationale" xml:space="preserve">
    <value>At least one user, computer or group has been added as a member to the PreWin2000 compatible group</value>
  </data>
  <data name="A_PreWin2000Other_Solution" xml:space="preserve">
    <value>Remove the members from the PreWin2000 group while making sure that the group "Authenticated Users" is present. Then reboot each DC.</value>
  </data>
  <data name="A_PreWin2000Other_TechnicalExplanation" xml:space="preserve">
    <value>The pre-Windows 2000 compatible access group grants access to some RPC calls which should not be available to users or computers.</value>
  </data>
  <data name="A_PreWin2000Other_Title" xml:space="preserve">
    <value>Check that the "Pre-Windows 2000 Compatible Access" group has not being modified from its default</value>
  </data>
  <data name="P_ProtectedUsers_Description" xml:space="preserve">
    <value>The purpose is to ensure that all privileged accounts are in the special group Protected Users</value>
  </data>
  <data name="P_ProtectedUsers_Detail" xml:space="preserve">
    <value>User: {0}</value>
  </data>
  <data name="P_ProtectedUsers_Documentation" xml:space="preserve">
    <value>https://docs.microsoft.com/en-us/windows-server/security/credentials-protection-and-management/protected-users-security-group
https://blog.netwrix.com/2015/02/20/add-sensitive-user-accounts-to-active-directory-protected-users-group/
https://dirteam.com/sander/2014/11/25/ten-things-you-need-to-be-aware-of-before-using-the-protected-users-group/
https://blog.andreas-schreiner.de/2018/09/07/active-directory-sicherheit-teil-1-privilegierte-benutzer/</value>
  </data>
  <data name="P_ProtectedUsers_Rationale" xml:space="preserve">
    <value>Number of admins not in Protected Users: {count}</value>
  </data>
  <data name="P_ProtectedUsers_ReportLocation" xml:space="preserve">
    <value>The detail can be found in &lt;a href="#admingroups"&gt;Admin Groups&lt;/a&gt;</value>
  </data>
  <data name="P_ProtectedUsers_Solution" xml:space="preserve">
    <value>After having reviewed the potential impact on adding users to this group, add the missing privileged accounts to this group.</value>
  </data>
  <data name="P_ProtectedUsers_TechnicalExplanation" xml:space="preserve">
    <value>The Protected Users group is a special group which is a very effective mitigation solution to counter attacks using Credential theft starting with Windows 8.1. Older Operating System must be updated to take this protection in account such as the Windows 7 KB2871997 patch.
    For admins, it:
- disable NTLM authentication
- reduce Kerberos ticket lifetime
- enforce usage of strong encryption algorthms such as AES
- prevent caching of passwords on workstations
- prevent any type of Kerberos delegation

Please also note that a few links (see below) recommends that at least one account is kept outside of the group Protected Users in case there is a permission problem.
That's why this rule is not triggered if only one account is not protected.</value>
  </data>
  <data name="P_ProtectedUsers_Title" xml:space="preserve">
    <value>Check if all privileged accounts are in the special group Protected Users.</value>
  </data>
  <data name="S_PwdLastSet_45_Description" xml:space="preserve">
    <value>The purpose is to ensure that the regular change of computer account is active</value>
  </data>
  <data name="S_PwdLastSet_45_Detail" xml:space="preserve">
    <value>Computer: {0} Creation: {1} LastUsed: {2} LastChange: {3}</value>
  </data>
  <data name="S_PwdLastSet_45_Documentation" xml:space="preserve">
    <value>https://support.microsoft.com/en-us/help/154501/how-to-disable-automatic-machine-account-password-changes</value>
  </data>
  <data name="S_PwdLastSet_45_Rationale" xml:space="preserve">
    <value>Number of computer without password change: {count}</value>
  </data>
  <data name="S_PwdLastSet_45_ReportLocation" xml:space="preserve">
    <value>The detail can be found in &lt;a href="#computeraccountanalysis"&gt;Computer information&lt;/a&gt;</value>
  </data>
  <data name="S_PwdLastSet_45_Solution" xml:space="preserve">
    <value>
      Some security agencies report the absence of password change as an indicator of compromise.
      
      If it is not the case, check the following registry keys:
* HKLM\System\CurrentControlSet\Services\Netlogon\Parameters\DisablePasswordChange: must be set to 0 or inexistent;
* HKLM\System\CurrentControlSet\Services\Netlogon\Parameters\MaximumPasswordAge: must be set to 30.
    </value>
  </data>
  <data name="S_PwdLastSet_45_TechnicalExplanation" xml:space="preserve">
    <value>By default, each computers change automatically its password every 30 days.
    Changing regularly secrets like passwords ensures that they are not used in side channel attacks.
    Also with the default possibility to create up to 10 computers accounts, these accounts may be seen as a backdoor.
    
    This audit program considers this as an anomaly between 45 days and 90 days.
    Also this rule is the companion for the rule S-PwdLastSet-90
    </value>
  </data>
  <data name="S_PwdLastSet_45_Title" xml:space="preserve">
    <value>Check if all computers are using regular password change pratices.</value>
  </data>
  <data name="S_PwdLastSet_90_Description" xml:space="preserve">
    <value>The purpose is to ensure that all computer accounts have their password changed in the last 3 months</value>
  </data>
  <data name="S_PwdLastSet_90_Detail" xml:space="preserve">
    <value>Computer: {0} Creation: {1} LastUsed: {2} LastChange: {3}</value>
  </data>
  <data name="S_PwdLastSet_90_Documentation" xml:space="preserve">
    <value>https://support.microsoft.com/en-us/help/154501/how-to-disable-automatic-machine-account-password-changes</value>
  </data>
  <data name="S_PwdLastSet_90_Rationale" xml:space="preserve">
    <value>Number of computer without password change for at least 3 months: {count}</value>
  </data>
  <data name="S_PwdLastSet_90_ReportLocation" xml:space="preserve">
    <value>The detail can be found in &lt;a href="#computeraccountanalysis"&gt;Computer information&lt;/a&gt;</value>
  </data>
  <data name="S_PwdLastSet_90_Solution" xml:space="preserve">
    <value>
      Some security agencies report the absence of password change as an indicator of compromise.
      
      If it is not the case, check the following registry keys:
* HKLM\System\CurrentControlSet\Services\Netlogon\Parameters\DisablePasswordChange: must be set to 0 or inexistent;
* HKLM\System\CurrentControlSet\Services\Netlogon\Parameters\MaximumPasswordAge: must be set to 30.
    </value>
  </data>
  <data name="S_PwdLastSet_90_TechnicalExplanation" xml:space="preserve">
    <value>By default, each computers change automatically its password every 30 days.
    Changing regularly secrets like passwords ensures that they are not used in side channel attacks.
    Also with the default possibility to create up to 10 computers accounts, these accounts may be seen as a backdoor.
    
    This audit program considers this as an anomaly starting with 90 days.
    Also this rule is the companion for the rule S-PwdLastSet-45 which does the same between 45 and 90 days
    </value>
  </data>
  <data name="S_PwdLastSet_90_Title" xml:space="preserve">
    <value>Check if all computers have changed their passwords in the last 3 months.</value>
  </data>
  <data name="P_AdminPwdTooOld_Description" xml:space="preserve">
    <value>The purpose is to ensure that all admins are changing their passwords at least every 3 years</value>
  </data>
  <data name="P_AdminPwdTooOld_Detail" xml:space="preserve">
    <value>Account: {0} Creation: {1} LastChanged: {2}</value>
  </data>
  <data name="P_AdminPwdTooOld_Documentation" xml:space="preserve">
    <value />
  </data>
  <data name="P_AdminPwdTooOld_Rationale" xml:space="preserve">
    <value>Number of admin with a password older than 3 years: {count}</value>
  </data>
  <data name="P_AdminPwdTooOld_ReportLocation" xml:space="preserve">
    <value>The detail can be found in &lt;a href="#admingroups"&gt;Admin Groups&lt;/a&gt;</value>
  </data>
  <data name="P_AdminPwdTooOld_Solution" xml:space="preserve">
    <value>We advised to read the ANSSI guidelines about this, which is quoted in the documentation section below.
    </value>
  </data>
  <data name="P_AdminPwdTooOld_TechnicalExplanation" xml:space="preserve">
    <value>This rule ensure that passwords of administrator are well managed.</value>
  </data>
  <data name="P_AdminPwdTooOld_Title" xml:space="preserve">
    <value>Check if all admin passwords are changed on the field.</value>
  </data>
  <data name="S_NoPreAuthAdmin_Description" xml:space="preserve">
    <value>The purpose is to ensure that all admin accounts do support kerberos pre-authentication</value>
  </data>
  <data name="S_NoPreAuthAdmin_Detail" xml:space="preserve">
    <value>Account: {0} Created: {1} LastLogon: {2}</value>
  </data>
  <data name="S_NoPreAuthAdmin_Documentation" xml:space="preserve">
    <value>http://www.harmj0y.net/blog/activedirectory/roasting-as-reps/</value>
  </data>
  <data name="S_NoPreAuthAdmin_Rationale" xml:space="preserve">
    <value>Number of admin accounts which do not require kerberos pre-authentication: {count}</value>
  </data>
  <data name="S_NoPreAuthAdmin_ReportLocation" xml:space="preserve">
    <value>The detail can be found in &lt;a href="#useraccountanalysis"&gt;User information&lt;/a&gt; and &lt;a href="#computeraccountanalysis"&gt;Computer information&lt;/a&gt;</value>
  </data>
  <data name="S_NoPreAuthAdmin_Solution" xml:space="preserve">
    <value>Edit the property of the involved accounts and select the Account tab. Uncheck "Do not require Kerberos preauthentication". For computers which doesn't have the Account tab, you have to manually edit the attribute useraccountcontrol. Subtract from the attribute the value 4194304.</value>
  </data>
  <data name="S_NoPreAuthAdmin_TechnicalExplanation" xml:space="preserve">
    <value>Without kerberos pre-authentication, an attacker can request kerberos data from the domain controller and use this data to brute-force the account password. You can search accounts using the ldap query &lt;i&gt;(userAccountControl:1.2.840.113556.1.4.803:=4194304)&lt;/i&gt;</value>
  </data>
  <data name="S_NoPreAuthAdmin_Title" xml:space="preserve">
    <value>Check if all admin accounts do support kerberos pre-authentication</value>
  </data>
  <data name="S_NoPreAuth_Detail" xml:space="preserve">
    <value>Account: {0} Created: {1} LastLogon: {2}</value>
  </data>
  <data name="P_DNSAdmin_Description" xml:space="preserve">
    <value>The purpose is to ensure that the Dns Admin group is not used</value>
  </data>
  <data name="P_DNSAdmin_Detail" xml:space="preserve">
    <value />
  </data>
  <data name="P_DNSAdmin_Documentation" xml:space="preserve">
    <value>https://medium.com/@esnesenon/feature-not-bug-dnsadmin-to-dc-compromise-in-one-line-a0f779b8dc83
https://docs.microsoft.com/en-us/openspecs/windows_protocols/ms-dnsp/007efcd2-2955-46dd-a59e-f83ae88f4678</value>
  </data>
  <data name="P_DNSAdmin_Rationale" xml:space="preserve">
    <value>Number of members of the Dns Admins group: {count}</value>
  </data>
  <data name="P_DNSAdmin_ReportLocation" xml:space="preserve">
    <value>The detail can be found in &lt;a href="#admingroups"&gt;Admin Groups&lt;/a&gt;</value>
  </data>
  <data name="P_DNSAdmin_Solution" xml:space="preserve">
    <value>You should remove the members of the DNS admin group and do a proper delegation to the specific DNS Zones.

First, grant only "Read Property", "List", "List object" and "Read permssions" to CN=MicrosoftDNS,CN=System to enable access to the RPC service.

Then on each zone (the object in the tree below with the class dnsZone), grant "Read Property", "List", "List object", "Read permissions", "Create Child", "Delete Child", "Delete", "Delete Tree".      
    </value>
  </data>
  <data name="P_DNSAdmin_TechnicalExplanation" xml:space="preserve">
    <value>Administrators of the DNS Service have the possibility to inject a DLL in this service.
However this service is hosted most of the time in the domain controller and is running as system.
That means that DNS Admins are potentially domain admins.

The security descriptor used to grant admin rights is located on the nTSecurityDescriptor attribute of the object CN=MicrosoftDNS,CN=System.
The "Write All Prop" access right induces the vulnerability.

In this case, the DnsAdmins group is not empty and grant to its user, the possibility to interact with the DNS Service.</value>
  </data>
  <data name="P_DNSAdmin_Title" xml:space="preserve">
    <value>Check if the Dns Admins group is not empty</value>
  </data>
  <data name="P_RODCRevealOnDemand_Description" xml:space="preserve">
    <value>The purpose is to ensure that no privileged group can be revealed on RODC</value>
  </data>
  <data name="P_RODCRevealOnDemand_Detail" xml:space="preserve">
    <value>Domain controller: {0} Account: {1}</value>
  </data>
  <data name="P_RODCRevealOnDemand_Documentation" xml:space="preserve">
    <value>https://docs.microsoft.com/en-us/openspecs/windows_protocols/ms-adts/8dfc81be-7461-48f2-8caf-07402bccb0ea</value>
  </data>
  <data name="P_RODCRevealOnDemand_Rationale" xml:space="preserve">
    <value>At least one privileged group can be revealed on RODC</value>
  </data>
  <data name="P_RODCRevealOnDemand_ReportLocation" xml:space="preserve">
    <value>The detail can be found in &lt;a href="#domaincontrollersection"&gt;Domain controllers&lt;/a&gt;</value>
  </data>
  <data name="P_RODCRevealOnDemand_Solution" xml:space="preserve">
    <value>Edit the attribute msDS-RevealOnDemandGroup and remove the privileged user or group identified.
    
    This can be managed in the Password Replication Policy tab of the computer objecct in the Active Directory Users and Computers console.</value>
  </data>
  <data name="P_RODCRevealOnDemand_TechnicalExplanation" xml:space="preserve">
    <value>There is an attribute on each RODC which enumerates the groups that the RODC can retrieve.
    When the RODC retrieve the user account, all secrets are integrated into the data, meaning that the RODC can impersonate the user account.
  In this case, a user or a group has been identified that have a RID (the last part of the SID) lower than 1000.
All privileged group have a RID lower than 1000, than means that the RODC can get access at any time to that privileged information.</value>
  </data>
  <data name="P_RODCRevealOnDemand_Title" xml:space="preserve">
    <value>Check if a privileged group can be revealed on a RODC</value>
  </data>
  <data name="P_RODCNeverReveal_Description" xml:space="preserve">
    <value>The purpose is to ensure that the protection against revealing privileged group is active</value>
  </data>
  <data name="P_RODCNeverReveal_Detail" xml:space="preserve">
    <value>Domain controller: {0} Group: {1}</value>
  </data>
  <data name="P_RODCNeverReveal_Documentation" xml:space="preserve">
    <value>https://docs.microsoft.com/en-us/openspecs/windows_protocols/ms-adts/8dfc81be-7461-48f2-8caf-07402bccb0ea</value>
  </data>
  <data name="P_RODCNeverReveal_Rationale" xml:space="preserve">
    <value>The protection against Privileged Group protection on RODC is not fully enabled</value>
  </data>
  <data name="P_RODCNeverReveal_ReportLocation" xml:space="preserve">
    <value>The detail can be found in &lt;a href="#domaincontrollersection"&gt;Domain controllers&lt;/a&gt;</value>
  </data>
  <data name="P_RODCNeverReveal_Solution" xml:space="preserve">
    <value>Check the value of the attribute msDS-NeverRevealGroup and the presence of the following expected groups:
- Administrators;
- Server Operators;
- Account Operators;
- Backup Operators;
- Denied RODC Password Replication Group

    This can be managed in the Password Replication Policy tab of the computer objecct in the Active Directory Users and Computers console.</value>
  </data>
  <data name="P_RODCNeverReveal_TechnicalExplanation" xml:space="preserve">
    <value>In addition to the group Denied RODC Password Replication Group there is a custom setting set for RODC in an attribute named msDS-NeverRevealGroup.
    This rule check the current value against the default one.</value>
  </data>
  <data name="P_RODCNeverReveal_Title" xml:space="preserve">
    <value>Check if the protection against revealing privileged group is active</value>
  </data>
  <data name="P_RODCAdminRevealed_Description" xml:space="preserve">
    <value>The purpose is to check if privileged users have already been revealed</value>
  </data>
  <data name="P_RODCAdminRevealed_Detail" xml:space="preserve">
    <value>Domain controller: {0} User: {1}</value>
  </data>
  <data name="P_RODCAdminRevealed_Documentation" xml:space="preserve">
    <value>https://docs.microsoft.com/en-us/openspecs/windows_protocols/ms-adts/8dfc81be-7461-48f2-8caf-07402bccb0ea</value>
  </data>
  <data name="P_RODCAdminRevealed_Rationale" xml:space="preserve">
    <value>At least one privileged user has been revealed on a RODC</value>
  </data>
  <data name="P_RODCAdminRevealed_ReportLocation" xml:space="preserve">
    <value>The detail can be found in &lt;a href="#domaincontrollersection"&gt;Domain controllers&lt;/a&gt;</value>
  </data>
  <data name="P_RODCAdminRevealed_Solution" xml:space="preserve">
    <value>The admin account should have its secrets change (a password reset) and be sure that the account will not be revealed anymore.</value>
  </data>
  <data name="P_RODCAdminRevealed_TechnicalExplanation" xml:space="preserve">
    <value>On Active Directory, all users revealed to a RODC are tracked by an attribute set on the computer object of the RODC named msDS-RevealedUsers.
    The program check on the list of revealed users if one is known as a privileged user.
  Indeed the RODC is caching the authentication secrets related of this user, which can then be used to impersonate it.
In addition to that, RODC are placed in general on more riskier environment.</value>
  </data>
  <data name="P_RODCAdminRevealed_Title" xml:space="preserve">
    <value>Check privileged users have been revealed on RODC</value>
  </data>
  <data name="RODC_Detail" xml:space="preserve">
    <value>Read-Only Domain Controllers are used in poor physically secured zones. An incorrect protection level can leak sensitive data.</value>
  </data>
  <data name="P_RODCSYSVOLWrite_Description" xml:space="preserve">
    <value>The purpose is to ensure that no RODC has write access to the SYSVOL</value>
  </data>
  <data name="P_RODCSYSVOLWrite_Detail" xml:space="preserve">
    <value>Domain controller: {0}</value>
  </data>
  <data name="P_RODCSYSVOLWrite_Documentation" xml:space="preserve">
    <value>https://docs.microsoft.com/en-us/openspecs/windows_protocols/ms-frs2/3588b343-4076-4776-b5c0-78e2b3d91ed3</value>
  </data>
  <data name="P_RODCSYSVOLWrite_Rationale" xml:space="preserve">
    <value>At least one RODC has write access to the SYSVOL volume</value>
  </data>
  <data name="P_RODCSYSVOLWrite_ReportLocation" xml:space="preserve">
    <value>The detail can be found in &lt;a href="#domaincontrollersection"&gt;Domain controllers&lt;/a&gt;</value>
  </data>
  <data name="P_RODCSYSVOLWrite_Solution" xml:space="preserve">
    <value>Locate the domain controller object related to the RODC in ADSIEdit.
    Then zoom on CN=DFSR-LocalSettings then CN=Domain System Volume.
    Edit the attribute msDFSR-ReadOnly and set it from false to true.
    </value>
  </data>
  <data name="P_RODCSYSVOLWrite_TechnicalExplanation" xml:space="preserve">
    <value>The SYSVOL Volume is a special DFS volume used to stored system files such as GPO.
    Read Only Controllers (RODC) have a read-only access to it.
  If it has a write access, it can change the file locally and propagate them to all writable domain controllers.
And thus enable an attacker to take control of the domain by modifying GPO applied to Domain Controllers.</value>
  </data>
  <data name="P_RODCSYSVOLWrite_Title" xml:space="preserve">
    <value>Check if RODC have write access to the SYSVOL volume</value>
  </data>
  <data name="A_NoNetSessionHardening_Description" xml:space="preserve">
    <value>The purpose is to ensure that mitigations are in place against the Bloodhound tool</value>
  </data>
  <data name="A_NoNetSessionHardening_Detail" xml:space="preserve">
    <value />
  </data>
  <data name="A_NoNetSessionHardening_Documentation" xml:space="preserve">
    <value>https://github.com/p0w3rsh3ll/NetCease
https://adsecurity.org/?p=3299</value>
  </data>
  <data name="A_NoNetSessionHardening_Rationale" xml:space="preserve">
    <value>No GPO has been found which implements NetCease</value>
  </data>
  <data name="A_NoNetSessionHardening_ReportLocation" xml:space="preserve">
    <value>The detail can be found in &lt;a href="#lsasettings"&gt;Security settings&lt;/a&gt;</value>
  </data>
  <data name="A_NoNetSessionHardening_Solution" xml:space="preserve">
    <value>If this mitigation is not part of the computer image, apply the following recommandations:
Run the NetCease PowerShell script (referenced below) on a reference workstation.
Open the Group Policy Management Console. Right-click the Group Policy object (GPO) that should contain the new preference item, and then click Edit .
In the console tree under Computer Configuration, expand the Preferences folder, and then expand the Windows Settings folder.
Right-click the Registry node, point to New, and select Registry Wizard.
Select the reference workstation on which the desired registry settings exist, then click Next .
Browse to HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlSet\Services\LanmanServer\DefaultSecurity\
and select the check box for “SrvsvcSessionInfo” from which you want to create a Registry preference item. Select the check box for a key only if you want to create a Registry item for the key rather than for a value within the key.
Click Finish.
The settings that you selected appear as preference items in the Registry Wizard Values collection</value>
  </data>
  <data name="A_NoNetSessionHardening_TechnicalExplanation" xml:space="preserve">
    <value>By default, Windows computers allow any authenticated user to enumerate network sessions to it.
This means an attacker could enumerate network sessions to a file share hosting home directories or a Domain Controller to see who’s connected to SYSVOL (to apply Group Policy) and determine which workstations each user and admin account is logged into.
Bloodhound uses this capability extensively to map out credentials in the network.

Disabling Net Session Enumeration removes the capability for any user to enumerate net session info (Recon).</value>
  </data>
  <data name="A_NoNetSessionHardening_Title" xml:space="preserve">
    <value>Check if NetCease has been put in place to mitigate Bloodhound</value>
  </data>
  <data name="A_UnixPwd_Description" xml:space="preserve">
    <value>The purpose is to check if password information may be stored in AD attributes</value>
  </data>
  <data name="A_UnixPwd_Detail" xml:space="preserve">
    <value>User: {0}</value>
  </data>
  <data name="A_UnixPwd_Documentation" xml:space="preserve">
    <value>https://docs.microsoft.com/en-us/openspecs/windows_protocols/ms-adts/f3adda9f-89e1-4340-a3f2-1f0a6249f1f8
https://www.blackhillsinfosec.com/domain-goodness-learned-love-ad-explorer/</value>
  </data>
  <data name="A_UnixPwd_Rationale" xml:space="preserve">
    <value>At least one user has an attribute set which is known to potentially contains a password</value>
  </data>
  <data name="A_UnixPwd_ReportLocation" xml:space="preserve">
    <value>The detail can be found in &lt;a href="#unixpasswordsfound"&gt;Unix Passwords&lt;/a&gt;</value>
  </data>
  <data name="A_UnixPwd_Solution" xml:space="preserve">
    <value>The attribute unixUserPassword and userPassword should be cleared from the mentionned user account, unless the remote system is known to have a strong cryptographic protocol.</value>
  </data>
  <data name="A_UnixPwd_TechnicalExplanation" xml:space="preserve">
    <value>To perform Single Sign On (SSO) systems need to share secrets with Active Directory.
    This is not the case for all systems such as Unix and Mainframe and designers have found a workaround by storing this secret into a user account attribute.
  However not all systems did implement a proper and cryptographically safe protocol and they are checking the password submitted in their system with an AD attribute.
At that time, it was not known that these attributes can be queried by everyone and as consequence, they did not enforce a robust protection.
Looking at the attribute unixUserPassword, the password can be retrieved either in clear text (encoded as ASCII) or with a weak algorithm such as ROT 13.

In addition to that, the way to change a password in LDAP system is to modify the value of the special attribute userPassword.
This attribute is not supposed to be visible. However Active Directory is using another attribute named unicodePwd (unless the heuristic fUserPwdSupport  is set).
That means that the attribute userPassword is not special anymore and that a change of its value is displayed in clear text, considered as a normal attribute.
A misconfigured application can change the user password using this old mechanism, and as a consequence, set the user password in clear text.
</value>
  </data>
  <data name="A_UnixPwd_Title" xml:space="preserve">
    <value>Check if attributes unixUserPassword and userPassword are set</value>
  </data>
  <data name="T_AzureADSSO_Description" xml:space="preserve">
    <value>The purpose is to check that password rotation is in place with AzureAD SSO</value>
  </data>
  <data name="T_AzureADSSO_Detail" xml:space="preserve">
    <value />
  </data>
  <data name="T_AzureADSSO_Documentation" xml:space="preserve">
    <value>https://docs.microsoft.com/en-us/azure/active-directory/hybrid/how-to-connect-sso-faq#how-can-i-roll-over-the-kerberos-decryption-key-of-the-azureadssoacc-computer-account
https://itpro-tips.com/wp-content/uploads/files/TechnetGallery/Azure-AD-SSO-Key-Rollover-d2f1604a.zip
https://www.dsinternals.com/en/impersonating-office-365-users-mimikatz/</value>
  </data>
  <data name="T_AzureADSSO_Rationale" xml:space="preserve">
    <value>The password used in AzureAD SSO has not been changed for at least one year</value>
  </data>
  <data name="T_AzureADSSO_ReportLocation" xml:space="preserve">
    <value>The detail can be found in &lt;a href="#azure"&gt;Azure&lt;/a&gt;</value>
  </data>
  <data name="T_AzureADSSO_Solution" xml:space="preserve">
    <value>Run the script referenced in the documentation below to change the password of the account AZUREADSSOACC.</value>
  </data>
  <data name="T_AzureADSSO_TechnicalExplanation" xml:space="preserve">
    <value>AzureAD SSO is performed using a gateway. This gateway converts a kerbros TGS ticket to SAML ticket.
    In short, a connection to the computer account AZUREADSSOACC and the secret of this user account is used as a shared secret with AzureAD.
  Despite the fact that computer account should have its password automatically changed every 30 days, this computer account does not have its password changed automatically.
That means that an extraction of its password (using DCSync for example) can lead to an AzureAD compromise.</value>
  </data>
  <data name="T_AzureADSSO_Title" xml:space="preserve">
    <value>Check if password roation is in place with AzureAD SSO</value>
  </data>
  <data name="S_OS_Win7_Description" xml:space="preserve">
    <value>The purpose is to ensure that there is no use of the obsolete and vulnerable OS Windows 7 for the workstations within the domain</value>
  </data>
  <data name="S_OS_Win7_Documentation" xml:space="preserve">
    <value>https://techcommunity.microsoft.com/t5/windows-it-pro-blog/activate-windows-7-esus-on-multiple-devices-with-a-mak/ba-p/1167196</value>
  </data>
  <data name="S_OS_Win7_Rationale" xml:space="preserve">
    <value>Presence of Windows 7 = {count}</value>
  </data>
  <data name="S_OS_Win7_ReportLocation" xml:space="preserve">
    <value>The detail can be found in &lt;a href="#operatingsystems"&gt;Operating Systems&lt;/a&gt;</value>
  </data>
  <data name="S_OS_Win7_Solution" xml:space="preserve">
    <value>In order to solve this security issue, you should upgrade all the workstations to a more recent version of Windows, starting from Windows 10. Do note that you can get the full details regarding the OS used with the following PowerShell command: &lt;i&gt;Get-ADComputer -Filter * -Property * | Format-Table Name,OperatingSystem,OperatingSystemServicePack,OperatingSystemVersion -Wrap -Auto You can replace [-Filter *] by [-Filter {OperatingSystem -Like "Windows Server*"}&lt;/i&gt;</value>
  </data>
  <data name="S_OS_Win7_TechnicalExplanation" xml:space="preserve">
    <value>The Windows 7 OS is not supported any longer, as it is vulnerable to many publicly known exploits: Administrator's credentials can be captured, security protocols are weak, etc.
PingCastle is trying to guess if support has been purchased from Microsoft. Based on the documentation referenced below, the program checks if the script Activate-ProductOnline.ps1 is present.
If the script is detected, Windows 7 is considered as supported and this rule is not triggered.</value>
  </data>
  <data name="S_OS_Win7_Title" xml:space="preserve">
    <value>Obsolete OS (Windows 7)</value>
  </data>
  <data name="A_DnsZoneTransfert_Description" xml:space="preserve">
    <value>The purpose is to ensure that no DNS Zones are configured with Zone Transfers.</value>
  </data>
  <data name="A_DnsZoneTransfert_Detail" xml:space="preserve">
    <value>Zone: {0}</value>
  </data>
  <data name="A_DnsZoneTransfert_Documentation" xml:space="preserve">
    <value>https://docs.microsoft.com/en-us/openspecs/windows_protocols/ms-dnsp/f97756c9-3783-428b-9451-b376f877319a
    https://docs.microsoft.com/en-us/windows-server/administration/windows-commands/dnscmd</value>
  </data>
  <data name="A_DnsZoneTransfert_Rationale" xml:space="preserve">
    <value>A DNS Zone is configured with Zone Transfers enabled</value>
  </data>
  <data name="A_DnsZoneTransfert_ReportLocation" xml:space="preserve">
    <value />
  </data>
  <data name="A_DnsZoneTransfert_Solution" xml:space="preserve">
    <value>You have to disable Zone Transfers.
    Identify the faulty zone in the details below.
    Go to the DNS console and select a zone in the "Forward Lookup Zones".
    Right click on it and switch to the "Zone Transfers" tab.
    Then ensure "Allow zone transfers" is not enabled "To any server".
    You can also run: dnscmd /zoneresetsecondaries zone /noxfr
    </value>
  </data>
  <data name="A_DnsZoneTransfert_TechnicalExplanation" xml:space="preserve">
    <value>When the Zone Transfers mechanims is enabled, an attacker can retrieve all DNS records anonymously.
    He can then use this feature to generate network noise to trigger a man in the middle attack and capture credentials.

    This setting is domain wide, meaning that all servers share the same setting.
    Please note that PingCastle does this check to only one DNS Server of the zone.

    To test if the Zone Transfers is enabled, issue the following command:
    on Linux: &lt;pre&gt;host -t axfr domain.name dns-server&lt;/pre&gt; or &lt;pre&gt;dig axfr @dns-server domain.name&lt;/pre&gt;
    on Windows: &lt;pre&gt;nslookup&lt;/pre&gt; then &lt;pre&gt;server dns-server&lt;/pre&gt; then &lt;pre&gt;set type=any&lt;/pre&gt; then &lt;pre&gt;ls -d domain.name&lt;/pre&gt;
    </value>
  </data>
  <data name="A_DnsZoneTransfert_Title" xml:space="preserve">
    <value>Check if DNS Zones are configured with Zone Transfers.</value>
  </data>
  <data name="A_LAPS_Joined_Computers_Description" xml:space="preserve">
    <value>The purpose of this rule is to ensure that there is no LAPS permission problems with computers that have been added manually to the domain by a user</value>
  </data>
  <data name="A_LAPS_Joined_Computers_Detail" xml:space="preserve">
    <value></value>
  </data>
  <data name="A_LAPS_Joined_Computers_Documentation" xml:space="preserve">
    <value>https://azurecloudai.blog/2019/10/01/laps-security-concern-computers-joiners-are-able-to-see-laps-password/
https://www.securityinsider-wavestone.com/2020/01/taking-over-windows-workstations-pxe-laps.html</value>
  </data>
  <data name="A_LAPS_Joined_Computers_Rationale" xml:space="preserve">
    <value>The local admin password of at least one computer can be retrieved by the user who joined the computer to the domain</value>
  </data>
  <data name="A_LAPS_Joined_Computers_ReportLocation" xml:space="preserve">
    <value>The detail can be found in &lt;a href="#laps"&gt;LAPS&lt;/a&gt;</value>
  </data>
  <data name="A_LAPS_Joined_Computers_Solution" xml:space="preserve">
    <value>Review the security of the computer objects listed in the LAPS section below to change their ownership (you can give it to the domain admins group).
    Check if the creator has also write permissions to change the owner or the security descriptor and if he has the right "all extended rights" on this object.
    If it is the case, remove the permissions granted to this user.
    </value>
  </data>
  <data name="A_LAPS_Joined_Computers_TechnicalExplanation" xml:space="preserve">
    <value>By default, every domain user can add up to 10 computers to the domain (see the rule S-ADRegistration for more information).
    When a computer is added to the domain, the owner of the computer object is the user who joined the computer.
    To trace this insertion, a special attribute mS-DS-CreatorSID is added, whose value is the SID of its creator.
    When LAPS is installed, the local admin account has its password stored in a special attribute named, by default, ms-mcs-AdmPwd. Its access is retricted.
    Because the user who created it is the owner of the underlying object, it can retrieve the LAPS attribute and get the local admin password.
    
    In addition to check if the owner of the computer object is the user which added it, this program checks also if this user have an explicit permission on this object to write the owner, write the security descriptor, or "all extended rights".
    Indeed, the right "all extended rights" allows to read the LAPS password and write access to these attributes can cancel the security hardening of changing the owner.
    </value>
  </data>
  <data name="A_LAPS_Joined_Computers_Title" xml:space="preserve">
    <value>Check if LAPS passwords can be retrieved from computers that has been added manually by users.</value>
  </data>
  <data name="A_CertTempAnyone_Description" xml:space="preserve">
    <value>The purpose of this rule is to ensure that there is no certificate template that can be edited by anyone</value>
  </data>
  <data name="A_CertTempAnyone_Detail" xml:space="preserve">
    <value>Name: {0}</value>
  </data>
  <data name="A_CertTempAnyone_Documentation" xml:space="preserve">
    <value>https://posts.specterops.io/certified-pre-owned-d95910965cd2
https://www.riskinsight-wavestone.com/en/2021/06/microsoft-adcs-abusing-pki-in-active-directory-environment/</value>
  </data>
  <data name="A_CertTempAnyone_Rationale" xml:space="preserve">
    <value>At least one certificate template can be modified by everyone [{count}]</value>
  </data>
  <data name="A_CertTempAnyone_ReportLocation" xml:space="preserve">
    <value>The detail can be found in &lt;a href="#certificatetemplates"&gt;Certificate Templates&lt;/a&gt;</value>
  </data>
  <data name="A_CertTempAnyone_Solution" xml:space="preserve">
    <value>Review the security permissions of this certificate template and remove the write access to everyone-like group such as domain user, domain computers, everyone, authenticated users, ...
    </value>
  </data>
  <data name="A_CertTempAnyone_TechnicalExplanation" xml:space="preserve">
    <value>A certificate template is an object whose definition serves as a base to issue certificates.
    If a user has the right to edit it, it can manually change obscure attributes such as msPKI-Certificate-Name-Flag.
    Doing so will enable him to provide the subject of the certificate and thus having a certificate on behalf other users such as admins.
  It can be used to impersonate them and take control of the domain</value>
  </data>
  <data name="A_CertTempAnyone_Title" xml:space="preserve">
    <value>Check if certificate templates can be edited by everyone.</value>
  </data>
  <data name="A_CertTempAnyPurpose_Description" xml:space="preserve">
    <value>The purpose of this rule is to ensure that there is no certificate template with any purpose that can be requested by anyone</value>
  </data>
  <data name="A_CertTempAnyPurpose_Detail" xml:space="preserve">
    <value>Name: {0}</value>
  </data>
  <data name="A_CertTempAnyPurpose_Documentation" xml:space="preserve">
    <value>https://posts.specterops.io/certified-pre-owned-d95910965cd2
https://www.riskinsight-wavestone.com/en/2021/06/microsoft-adcs-abusing-pki-in-active-directory-environment/</value>
  </data>
  <data name="A_CertTempAnyPurpose_Rationale" xml:space="preserve">
    <value>At least one certificate template can be requested by everyone having any purpose [{count}]</value>
  </data>
  <data name="A_CertTempAnyPurpose_ReportLocation" xml:space="preserve">
    <value>The detail can be found in &lt;a href="#certificatetemplates"&gt;Certificate Templates&lt;/a&gt;</value>
  </data>
  <data name="A_CertTempAnyPurpose_Solution" xml:space="preserve">
    <value>Review the permissions that allow a wide enrollement of this certificate template automatically or specify a specific purpose (EKU)
    </value>
  </data>
  <data name="A_CertTempAnyPurpose_TechnicalExplanation" xml:space="preserve">
    <value>A certificate should define restrictions of its use. It is done via extensions known as EKU (extended key usage).
    Without a proper purpose or with the global purpose "Any Purpose" it can be used to enroll certificates on behalf other users and impersonate them using it.</value>
  </data>
  <data name="A_CertTempAnyPurpose_Title" xml:space="preserve">
    <value>Check the purpose provided by certificate templates</value>
  </data>
  <data name="A_CertTempAgent_Description" xml:space="preserve">
    <value>The purpose of this rule is to ensure that there is no agent certificate that can be requested by anyone</value>
  </data>
  <data name="A_CertTempAgent_Detail" xml:space="preserve">
    <value>Name: {0}</value>
  </data>
  <data name="A_CertTempAgent_Documentation" xml:space="preserve">
    <value>https://posts.specterops.io/certified-pre-owned-d95910965cd2
https://www.riskinsight-wavestone.com/en/2021/06/microsoft-adcs-abusing-pki-in-active-directory-environment/</value>
  </data>
  <data name="A_CertTempAgent_Rationale" xml:space="preserve">
    <value>At least one certificate template can be used to issue agent certificate to everyone [{count}]</value>
  </data>
  <data name="A_CertTempAgent_ReportLocation" xml:space="preserve">
    <value>The detail can be found in &lt;a href="#certificatetemplates"&gt;Certificate Templates&lt;/a&gt;</value>
  </data>
  <data name="A_CertTempAgent_Solution" xml:space="preserve">
    <value>Review the permissions that allow a wide enrollement of this certificate template
    </value>
  </data>
  <data name="A_CertTempAgent_TechnicalExplanation" xml:space="preserve">
    <value>An Agent certificate is a special certificate used to request certificate on behalf other users.
    A template has been detected with the agent EKU and that can be enrolled by a large number of users.</value>
  </data>
  <data name="A_CertTempAgent_Title" xml:space="preserve">
    <value>Check the permission of agent certificate templates</value>
  </data>
  <data name="A_CertTempCustomSubject_Description" xml:space="preserve">
    <value>The purpose of this rule is to ensure that there is no certificate request having an authentication purpose whose subject can be modified</value>
  </data>
  <data name="A_CertTempCustomSubject_Detail" xml:space="preserve">
    <value>Name: {0}</value>
  </data>
  <data name="A_CertTempCustomSubject_Documentation" xml:space="preserve">
    <value>https://posts.specterops.io/certified-pre-owned-d95910965cd2
https://www.riskinsight-wavestone.com/en/2021/06/microsoft-adcs-abusing-pki-in-active-directory-environment/</value>
  </data>
  <data name="A_CertTempCustomSubject_Rationale" xml:space="preserve">
    <value>At least one certificate template used for authentication can have its subject modified when being used [{count}]</value>
  </data>
  <data name="A_CertTempCustomSubject_ReportLocation" xml:space="preserve">
    <value>The detail can be found in &lt;a href="#certificatetemplates"&gt;Certificate Templates&lt;/a&gt;</value>
  </data>
  <data name="A_CertTempCustomSubject_Solution" xml:space="preserve">
    <value>On the certificate template properties, uncheck in the property sheet "Subject Name" the field "Supply in the request".
    Or in alternative, restrict this template to a restricted group.
    </value>
  </data>
  <data name="A_CertTempCustomSubject_TechnicalExplanation" xml:space="preserve">
    <value>Usually, the subject of a certificate is generated automatically by the certification authority.
    By allowing its manual edition before its issuance, a malicious user can set the subject to match an administrator account, and thus get a certificate representing them.
  This certificate can be abuse later to impersonate them.</value>
  </data>
  <data name="A_CertTempCustomSubject_Title" xml:space="preserve">
    <value>Check the if a custom subject can be pushed on an authentication certificate templates</value>
  </data>
  <data name="A_PreWin2000AuthenticatedUsers_Description" xml:space="preserve">
    <value>The purpose is check if the "Pre-Windows 2000 Compatible Access" group contains authenticated users</value>
  </data>
  <data name="A_PreWin2000AuthenticatedUsers_Documentation" xml:space="preserve">
    <value>https://msdn.microsoft.com/en-us/library/cc223672.aspx</value>
  </data>
  <data name="A_PreWin2000AuthenticatedUsers_Rationale" xml:space="preserve">
    <value>The PreWin2000 compatible group contains "authenticated users"</value>
  </data>
  <data name="A_PreWin2000AuthenticatedUsers_Solution" xml:space="preserve">
    <value>Remove "authenticated users" from the PreWin2000 group.</value>
  </data>
  <data name="A_PreWin2000AuthenticatedUsers_TechnicalExplanation" xml:space="preserve">
    <value>The pre-Windows 2000 compatible access group grants access to some RPC calls.
    Its default and secure value is the "Authenticated Users" group which allows users to perform group look up using legacy protocols.
    
  If this group contains "Authenticated Users", it increases the impact on the exploitation vulnerability on legacy protocols such as the printer spooler.
    Indeed, in the #PrintNightmare attack, it enables a patch bypass on domain controllers because the property Elevated Token is on when establishing a session to the DC.
    Removing the group can have side impacts and as a consequence, this is reported here as a special hardening measure.
  </value>
  </data>
  <data name="A_PreWin2000AuthenticatedUsers_Title" xml:space="preserve">
    <value>Check that the "Pre-Windows 2000 Compatible Access" group does not contain "Authenticated Users"</value>
  </data>
  <data name="S_OS_W10_Description" xml:space="preserve">
    <value>The purpose is to ensure that there is no use of non supported version of Windows 10 within the domain</value>
  </data>
  <data name="S_OS_W10_Documentation" xml:space="preserve">
    <value>https://docs.microsoft.com/en-us/windows/release-health/release-information</value>
  </data>
  <data name="S_OS_W10_Rationale" xml:space="preserve">
    <value>Presence of non supported Windows 10 = {count}</value>
  </data>
  <data name="S_OS_W10_ReportLocation" xml:space="preserve">
    <value>The detail can be found in &lt;a href="#operatingsystems"&gt;Operating Systems&lt;/a&gt;</value>
  </data>
  <data name="S_OS_W10_Solution" xml:space="preserve">
    <value>In order to solve this security issue, you should upgrade all the Windows 10 to a more recent version.
    Do note that you can get the full details regarding the OS used with the following PowerShell command: &lt;i&gt;Get-ADComputer -Filter * -Property * | Format-Table Name,OperatingSystem,OperatingSystemServicePack,OperatingSystemVersion -Wrap -Auto You can replace [-Filter *] by [-Filter {OperatingSystem -Like "Windows 10*"}&lt;/i&gt;</value>
  </data>
  <data name="S_OS_W10_TechnicalExplanation" xml:space="preserve">
    <value>Some versions of Windows 10 OS is not supported any longer, and may be vulnerable to exploits that are not patched anymore.</value>
  </data>
  <data name="S_OS_W10_Title" xml:space="preserve">
    <value>Obsolete OS (Windows 10)</value>
  </data>
  <data name="S_OS_W10_Detail" xml:space="preserve">
    <value>Version: {0}  Number: {1} Active: {2}</value>
  </data>
  <data name="S_ADRegistrationSchema_Description" xml:space="preserve">
    <value>The purpose is to ensure that there is no schema class that can be used to create arbitrary objects</value>
  </data>
  <data name="S_ADRegistrationSchema_Documentation" xml:space="preserve">
    <value>
https://bugs.chromium.org/p/project-zero/issues/detail?id=2186
https://gist.github.com/IISResetMe/399a75cfccabc1a17d0cc3b5ae29f3aa#file-update-msexchstoragegroupschema-ps1
https://msrc.microsoft.com/update-guide/vulnerability/CVE-2021-34470</value>
  </data>
  <data name="S_ADRegistrationSchema_Rationale" xml:space="preserve">
    <value>Presence of vulnerable schema class = {count}</value>
  </data>
  <data name="S_ADRegistrationSchema_ReportLocation" xml:space="preserve">
    <value></value>
  </data>
  <data name="S_ADRegistrationSchema_Solution" xml:space="preserve">
    <value>For PossSuperiorComputer:
    You have to edit the schema to change the value of the attribute possSuperior and remove the "computer" value.
  A powershell script in the documentation provides a fix.

For PossSuperiorUser:
    You have to edit the schema to change the value of the attribute possSuperior and remove the "user" value.
  A powershell script in the documentation provides a fix.
  
Also the class msExchStorageGroup is known to have this vulnerability via the CVE-2021-34470.
In this case, the vulnerability is exploitable even if Exchange has been uninstalled.</value>
  </data>
  <data name="S_ADRegistrationSchema_TechnicalExplanation" xml:space="preserve">
    <value>The Classes added to the schema provide additional object types. If misconfigured, a class can be used to bypass security restriction.
    For the vulnerability PossSuperiorComputer:
    A class has the attribute possSuperiors containing the class "computer" and this class inherits from "container".
  That means that every computer can request this class to be added.
  Once this class has been added, it can be used as a container to create additional users or computers without restrictions.

    For the vulnerability PossSuperiorUser:
    It is the same vulnerability than PossSuperiorComputer but with the "user" class instead of the "computer" class.
    </value>
  </data>
  <data name="S_ADRegistrationSchema_Title" xml:space="preserve">
    <value>Vulnerable Schema Class check</value>
  </data>
  <data name="S_ADRegistrationSchema_Detail" xml:space="preserve">
    <value>Class: {0}  Vulnerability: {1}</value>
  </data>
</root>